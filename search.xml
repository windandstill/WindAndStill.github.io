<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloudalibaba(三) 服务网关 链路追踪 消息驱动</title>
      <link href="/javaee/spring/springcloudalibaba/3.fu-wu-wang-guan-yu-lian-lu-zhui-zong-xiao-xi-qu-dong/"/>
      <url>/javaee/spring/springcloudalibaba/3.fu-wu-wang-guan-yu-lian-lu-zhui-zong-xiao-xi-qu-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Gateway–服务网关"><a href="#1-Gateway–服务网关" class="headerlink" title="1. Gateway–服务网关"></a>1. Gateway–服务网关</h1><h2 id="1-1-网关简介"><a href="#1-1-网关简介" class="headerlink" title="1.1 网关简介"></a>1.1 网关简介</h2><p>没有网关的存在，我们只能在客户端记录每个微服务的地址，然后分别去调用</p><p>这样的架构，会存在着诸多的问题：</p><ul><li>客户端多次请求不同的微服务，增加客户端代码或配置编写的复杂性</li><li>认证复杂，每个服务都需要独立认证</li><li>存在跨域请求，在一定场景下处理相对复杂</li></ul><p>上面的这些问题可以借助<code>API网关</code>来解决</p><p>所谓的API网关，就是指系统的<code>统一入口</code>，它封装了应用程序的内部结构，为客户端提供统一服务</p><p>一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等</p><p>在业界比较流行的网关，有下面这些：</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibaba%E5%8A%A0%E5%85%A5%E7%BD%91%E5%85%B3%E4%B9%8B%E5%90%8E%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="SpringCloudalibaba加入网关后整体架构图"></p><p>在业界比较流行的网关，有下面这些：</p><ul><li><p><strong>Ngnix+lua</strong></p><p>使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用</p><p>lua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本</p></li><li><p><strong>Kong</strong></p><p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用</p><p><code>问题</code>： 只支持Http协议；二次开发，自由扩展困难；提供管理API，缺乏更易用的管控、配置方式</p></li><li><p><strong>Zuul</strong></p><p>Netflix开源的网关，功能丰富，使用JAVA开发，易于二次开发</p><p><code>问题</code>：缺乏管控，无法动态配 置；依赖组件较多；处理Http请求依赖的是Web容器，性能不如Nginx</p></li><li><p><strong>Spring Cloud Gateway</strong></p><p>Spring公司为了替换Zuul而开发的网关服务，将在下面具体介绍</p></li></ul><p><code>注意</code>：SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway 来做网关</p><h2 id="1-2-Gateway简介"><a href="#1-2-Gateway简介" class="headerlink" title="1.2 Gateway简介"></a>1.2 Gateway简介</h2><p>Spring Cloud Gateway是Spring公司基于Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式</p><p>它的目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能</p><p>例如：安全，监控和限流</p><p><strong>优点：</strong></p><ul><li><p>性能强劲：是第一代网关Zuul的1.6倍</p></li><li><p>功能强大：内置了很多实用的功能，例如转发、监控、限流等</p></li><li><p>设计优雅，容易扩展</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</p></li><li><p>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</p></li><li><p>需要Spring Boot 2.0及以上的版本，才支持</p></li></ul><h2 id="1-3-Gateway快速入门"><a href="#1-3-Gateway快速入门" class="headerlink" title="1.3 Gateway快速入门"></a>1.3 Gateway快速入门</h2><p>基本步骤:</p><ol><li>创建模块，导入依赖</li><li>创建主类</li><li>添加配置文件</li><li>启动项目，用网关去访问</li></ol><blockquote><p>创建<code>api-gateway</code>模块,导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建主类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(GatewayApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>添加配置文件</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span> <span class="comment"># 当前路由的标识, 要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8081</span> <span class="comment"># 请求要转发到的地址</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级,数字越小级别越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product-serv/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>启动项目, 并通过网关去访问微服务</p></blockquote><p>localhost:7000/product-serv/product/1</p><h2 id="1-4-Gateway整合Nacos"><a href="#1-4-Gateway整合Nacos" class="headerlink" title="1.4 Gateway整合Nacos"></a>1.4 Gateway整合Nacos</h2><p>步骤:</p><ol><li>引入依赖</li><li>主类上添加注解@EnableDiscoveryClient</li><li>修改配置文件</li></ol><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>添加注解</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(GatewayApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改配置文件</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 让gateway可以发现nacos中的微服务</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span> <span class="comment"># 当前路由的标识, 要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-product</span> <span class="comment"># lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级,数字越小级别越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product-serv/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>测试</p></blockquote><p>localhost:7000/product-serv/product/1</p><blockquote><p><code>还有一种简化版</code>(但不推荐)</p></blockquote><p>不写路由配置 (全部默认)</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 让gateway可以发现nacos中的微服务</span></span><br></pre></td></tr></tbody></table></figure><p>localhost:7000/service-product/product/1</p><p>这时候，就发现只要按照<strong>网关地址/微服务/接口</strong>的格式去访问，就可以得到成功响应</p><h2 id="1-5-Gateway核心架构"><a href="#1-5-Gateway核心架构" class="headerlink" title="1.5  Gateway核心架构"></a>1.5  Gateway核心架构</h2><blockquote><p>基本概念</p></blockquote><p>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体</p><p>主要定义了下面的几个信息:</p><ul><li><strong>id</strong>，路由标识符，区别于其他 Route</li><li><strong>uri</strong>，路由指向的目的地 uri，即客户端请求最终被转发到的微服务</li><li><strong>order</strong>，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高</li><li><strong>predicate</strong>，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由</li><li><strong>filter</strong>，过滤器用于修改请求和响应信息</li></ul><blockquote><p>执行流程</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Gateway%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Gateway工作流程"></p><p>执行流程大体如下：</p><ol><li><code>Gateway Client</code>向<code>Gateway Server</code>发送请求</li><li>请求首先会被<code>HttpWebHandlerAdapter</code>进行提取组装成网关上下文</li><li>然后网关的上下文会传递到<code>DispatcherHandler</code>，它负责将请求分发给 <code>RoutePredicateHandlerMapping</code></li><li><code>RoutePredicateHandlerMapping</code>负责路由查找，并根据路由断言判断路由是否可用</li><li>如果过断言成功，由<code>FilteringWebHandler</code>创建过滤器链并调用</li><li>请求会一次经过<code>PreFilter</code>–<strong>微服务</strong>–<code>PostFilter</code>的方法，最终返回响应</li></ol><h2 id="1-6-断言"><a href="#1-6-断言" class="headerlink" title="1.6 断言"></a>1.6 断言</h2><p>Predicate(断言, 谓词) 用于进行条件判断，只有断言都返回真，才会真正的执行路由</p><p>断言就是说: 在什么条件下 才能进行路由转发</p><h3 id="1-6-1-内置路由断言工厂"><a href="#1-6-1-内置路由断言工厂" class="headerlink" title="1.6.1 内置路由断言工厂"></a>1.6.1 内置路由断言工厂</h3><p>SpringCloud Gateway包括许多内置的断言工厂，所有这些断言都与HTTP请求的不同属性匹配。具体如下：</p><ul><li><p>基于Datetime类型的断言工厂</p><p>此类型的断言根据时间做判断，主要有三个：</p><p>AfterRoutePredicateFactory： 接收一个日期参数，判断请求日期是否晚于指定日期 BeforeRoutePredicateFactory： 接收一个日期参数，判断请求日期是否早于指定日期 BetweenRoutePredicateFactory： 接收两个日期参数，判断请求日期是否在指定时间段内</p><p><strong>-After=2019-12-31T23:59:59.789+08:00[Asia/Shanghai]</strong></p></li><li><p>基于远程地址的断言工厂</p><p>RemoteAddrRoutePredicateFactory：接收一个IP地址段，判断请求主 机地址是否在地址段中</p><p><strong>-RemoteAddr=192.168.1.1/24</strong></p></li><li><p>基于Cookie的断言工厂</p><p>CookieRoutePredicateFactory：接收两个参数，cookie 名字和一个正则表达式</p><p>判断请求 cookie是否具有给定名称且值与正则表达式匹配</p><p><strong>-Cookie=chocolate, ch.</strong></p></li><li><p>基于Header的断言工厂</p><p>HeaderRoutePredicateFactory：接收两个参数，标题名称和正则表达式</p><p>判断请求Header是否 具有给定名称且值与正则表达式匹配</p><p><strong>-Header=X-Request-Id, \d+</strong></p></li><li><p>基于Host的断言工厂 HostRoutePredicateFactory：接收一个参数，主机名模式</p><p>判断请求的Host是否满足匹配规则</p><p><strong>-Host=**.testhost.org</strong></p></li><li><p>基于Method请求方法的断言工厂</p><p>MethodRoutePredicateFactory：接收一个参数，判断请求类型是否跟指定的类型匹配</p><p><strong>-Method=GET</strong></p></li><li><p>基于Path请求路径的断言工厂</p><p>PathRoutePredicateFactory：接收一个参数，判断请求的URI部分是否满足路径规则</p><p><strong>-Path=/foo/{segment}</strong></p></li><li><p>基于Query请求参数的断言工厂</p><p>QueryRoutePredicateFactory ：接收两个参数，请求param和正则表达式， 判断请求参数是否具有给定名称且值与正则表达式匹配</p><p><strong>-Query=baz, ba.</strong></p></li><li><p>基于路由权重的断言工厂</p><p>WeightRoutePredicateFactory：接收一个[组名,权重], 然后对于同一个组内的路由按照权重转发</p><p><strong>routes:</strong></p><p> <strong>-id: weight_route1 uri: host1 predicates:</strong></p><p> <strong>-Path=/product/*</strong>*</p><p> <strong>-Weight=group3, 1</strong></p><p> <strong>-id: weight_route2 uri: host2 predicates:</strong></p><p> <strong>-Path=/product/*</strong>*</p><p> <strong>-Weight= group3, 9</strong></p></li></ul><p><code>路径相同 按权重1:9发送</code></p><blockquote><p>内置路由断言工厂的使用</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span> <span class="comment"># 当前路由的标识, 要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-product</span> <span class="comment"># 请求要转发到的地址</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级,数字越小级别越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product-serv/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2019-11-28T00:00:00.000+08:00</span> <span class="comment">#限制请求时间在2019-11-28之前</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=POST</span> <span class="comment">#限制请求方式为POST</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span> <span class="comment"># 当前路由的标识, 要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-order</span> <span class="comment"># 请求要转发到的地址</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级,数字越小级别越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-serv/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-6-2-自定义断言工厂"><a href="#1-6-2-自定义断言工厂" class="headerlink" title="1.6.2 自定义断言工厂"></a>1.6.2 自定义断言工厂</h3><p>我们来设定一个场景: 假设我们的应用仅仅让age在(min,max)之间的人来访问</p><blockquote><p>第1步：在配置文件中,添加一个Age的断言配置</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span> <span class="comment"># 当前路由的标识, 要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-product</span> <span class="comment"># 请求要转发到的地址</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级,数字越小级别越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product-serv/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Age=18,60</span> <span class="comment"># 限制年龄只有在18到60岁之间的人能访问</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第2步：自定义一个断言工厂, 实现断言方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个自定义的路由断言工厂类,要求有两个</span></span><br><span class="line"><span class="comment">//1 名字必须是 配置+RoutePredicateFactory</span></span><br><span class="line"><span class="comment">//2 必须继承AbstractRoutePredicateFactory&lt;配置类&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutePredicateFactory</span>&lt;AgeRoutePredicateFactory.Config&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeRoutePredicateFactory</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">super</span>(AgeRoutePredicateFactory.Config.class);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的中参数值 给他赋值到配置类中的属性上</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//这个位置的顺序必须跟配置文件中的值的顺序对应</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">"minAge"</span>, <span class="string">"maxAge"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断言逻辑</span></span><br><span class="line">    <span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title function_">apply</span><span class="params">(AgeRoutePredicateFactory.Config config)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;ServerWebExchange&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(ServerWebExchange serverWebExchange)</span> {</span><br><span class="line">                <span class="comment">//1 接收前台传入的age参数</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> serverWebExchange.getRequest().getQueryParams().getFirst(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2 先判断是否为空</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(ageStr)) {</span><br><span class="line">                    <span class="comment">//3 如果不为空,再进行路由逻辑判断</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line">                    <span class="keyword">if</span> (age &lt; config.getMaxAge() &amp;&amp; age &gt; config.getMinAge()) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置类,用于接收配置文件中的对应参数</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> minAge;<span class="comment">//18</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> maxAge;<span class="comment">//60</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-过滤器"><a href="#1-7-过滤器" class="headerlink" title="1.7 过滤器"></a>1.7 过滤器</h2><blockquote><p>作用</p></blockquote><p>过滤器就是在请求的传递过程中,对请求和响应做一些手脚</p><blockquote><p>生命周期</p></blockquote><p>在Gateway中, Filter的生命周期只有两个：“pre” 和 “post”</p><ul><li><p>PRE： 这种过滤器在请求被路由之前调用</p><p>我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等</p></li><li><p>POST：这种过滤器在路由到微服务以后执行</p><p>这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等</p></li></ul><blockquote><p>分类</p></blockquote><p>Gateway 的Filter从作用范围可分为两种: GatewayFilter(<strong>局部过滤器</strong>)与GlobalFilter(<strong>全局过滤器</strong>)</p><ul><li>GatewayFilter：应用到单个路由或者一个分组的路由上</li><li>GlobalFilter：应用到所有的路由上。</li></ul><h3 id="1-7-1-局部过滤器"><a href="#1-7-1-局部过滤器" class="headerlink" title="1.7.1 局部过滤器"></a>1.7.1 局部过滤器</h3><blockquote><p>内置局部过滤器</p></blockquote><table><thead><tr><th>过滤器工厂</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>为原始请求添加Header</td><td>Header的名称及值</td></tr><tr><td>AddRequestParameter</td><td>为原始请求添加请求参数</td><td>参数名称及值</td></tr><tr><td>AddResponseHeader</td><td>为原始响应添加Header</td><td>Header的名称及值</td></tr><tr><td>DedupeResponseHeader</td><td>剔除响应头中重复的值</td><td>需要去重的Header名称及去重策略</td></tr><tr><td>Hystrix</td><td>为路由引入Hystrix的断路器保护</td><td>HystrixCommand的名称</td></tr><tr><td>FallbackHeaders</td><td>为fallbackUri的请求头中添加具体的异常信息</td><td>Header的名称</td></tr><tr><td>PrefixPath</td><td>为原始请求路径添加前缀</td><td>前缀路径</td></tr><tr><td>PreserveHostHeader</td><td>为请求添加一个 preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host</td><td>无</td></tr><tr><td>RequestRateLimiter</td><td>用于对请求限流，限流算法为令牌桶</td><td>keyResolver<br>rateLimiter<br>statusCode<br>denyEmptyKey<br>emptyKeyStatus</td></tr><tr><td>RedirectTo</td><td>将原始请求重定向到指定的URL</td><td>http状态码及重定向的 url</td></tr><tr><td>RemoveHopByHopHeadersFilter</td><td>为原始请求删除IETF组织规定的一系列Header</td><td>默认就会启用，可以通过配置指定仅删除哪些 Header</td></tr><tr><td>RemoveRequestHeader</td><td>为原始请求删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveResponseHeader</td><td>为原始响应删除某个Header</td><td>Header名称</td></tr><tr><td>RewritePath</td><td>重写原始的请求路径</td><td>原始路径正则表达式以及重写后路径的正则表达式</td></tr><tr><td>RewriteResponseHeader</td><td>重写原始响应中的某个Header</td><td>Header名称，值的正则表达式，重写后的值</td></tr><tr><td>SaveSession</td><td>在转发请求之前，强制执行 WebSession::save操作</td><td>无</td></tr><tr><td>secureHeaders</td><td>为原始响应添加一系列起安全作用的响应头</td><td>无，支持修改这些安全响应头的值</td></tr><tr><td>SetPath</td><td>修改原始的请求路径</td><td>修改后的路径</td></tr><tr><td>SetResponseHeader</td><td>修改原始响应中某个Header的值</td><td>Header名称，修改后的值</td></tr><tr><td>SetStatus</td><td>修改原始响应的状态码</td><td>HTTP 状态码，可以是数字，也可以是字符串</td></tr><tr><td>StripPrefix</td><td>用于截断原始请求的路径</td><td>使用数字表示要截断的路径的数量</td></tr><tr><td>Retry</td><td>针对不同的响应进行重试</td><td>retries、statuses、 methods、series</td></tr><tr><td>RequestSize</td><td>设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回 413 Payload Too Large</td><td>请求包大小，单位为字节，默认值为5M</td></tr><tr><td>ModifyRequestBody</td><td>在转发请求之前修改原始请求体内容</td><td>修改后的请求体内容</td></tr><tr><td>ModifyResponseBody</td><td>修改原始响应体的内容</td><td>修改后的响应体内容</td></tr></tbody></table><h3 id="1-7-2-自定义局部过滤器"><a href="#1-7-2-自定义局部过滤器" class="headerlink" title="1.7.2 自定义局部过滤器"></a>1.7.2 自定义局部过滤器</h3><blockquote><p>第1步：在配置文件中,添加一个Log的过滤器配置</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span> <span class="comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉1层路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Log=true,false</span> <span class="comment"># 控制日志是否开启</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>​    第2步：自定义一个过滤器工厂,实现方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义局部过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGatewayFilterFactory</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;LogGatewayFilterFactory.Config&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogGatewayFilterFactory</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">super</span>(LogGatewayFilterFactory.Config.class);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件中的参数 赋值到 配置类中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">"consoleLog"</span>, <span class="string">"cacheLog"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(LogGatewayFilterFactory.Config config)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> {</span><br><span class="line">                <span class="keyword">if</span> (config.isCacheLog()) {</span><br><span class="line">                    System.out.println(<span class="string">"cacheLog已经开启了...."</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (config.isConsoleLog()) {</span><br><span class="line">                    System.out.println(<span class="string">"consoleLog已经开启了...."</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置类 接收配置参数</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> consoleLog;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> cacheLog;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-3-全局过滤器"><a href="#1-7-3-全局过滤器" class="headerlink" title="1.7.3 全局过滤器"></a>1.7.3 全局过滤器</h3><p>开发中的鉴权逻辑：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务端对token进行解密，判断是否有效</li></ul><p>下面的我们自定义一个GlobalFilter，去校验所有请求的请求参数中是否包含“token”</p><p>如果不包含请求参数“token”则不转发路由，否则执行正常的逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义全局过滤器需要实现GlobalFilter和Ordered接口</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered {</span><br><span class="line">    <span class="comment">//完成判断逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain</span></span><br><span class="line"><span class="params">            chain)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) {</span><br><span class="line">            System.out.println(<span class="string">"鉴权失败"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//调用chain.filter继续向下游执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//顺序,数值越小,优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8-网关限流"><a href="#1-8-网关限流" class="headerlink" title="1.8 网关限流"></a>1.8 网关限流</h2><p>Sentinel支持对SpringCloud Gateway、Zuul等主流网关进行限流</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Sentinel%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81.png" alt="Sentinel网关限流"></p><p>从1.6.0版本开始，Sentinel提供了SpringCloud Gateway的适配模块，可以提供两种资源维度的限流：</p><ul><li>route维度：即在Spring配置文件中配置的路由条目，资源名为对应的routeId</li><li>自定义API维度：用户可以利用Sentinel提供的API来自定义一些API分组</li></ul><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>编写配置类</p></blockquote><p>基于Sentinel 的Gateway限流是通过其提供的Filter来完成的</p><p>使用时只需注入对应的 <code>SentinelGatewayFilter</code>实例以及 <code>SentinelGatewayBlockExceptionHandler</code> 实例即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayConfiguration</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt;</span></span><br><span class="line"><span class="params">                                        viewResolversProvider,</span></span><br><span class="line"><span class="params">                                ServerCodecConfigurer serverCodecConfigurer)</span> {</span><br><span class="line">        <span class="built_in">this</span>.viewResolvers =</span><br><span class="line">                viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个限流的过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">sentinelGatewayFilter</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SentinelGatewayFilter</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置初始化的限流参数</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initGatewayRules</span><span class="params">()</span> {</span><br><span class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        rules.add(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GatewayFlowRule</span>(<span class="string">"product_route"</span>) <span class="comment">//资源名称,对应路由id</span></span><br><span class="line">                        .setCount(<span class="number">1</span>) <span class="comment">// 限流阈值</span></span><br><span class="line">                        .setIntervalSec(<span class="number">1</span>) <span class="comment">// 统计时间窗口，单位是秒，默认是 1 秒</span></span><br><span class="line">        );</span><br><span class="line">        GatewayRuleManager.loadRules(rules);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置限流的异常处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="keyword">public</span> SentinelGatewayBlockExceptionHandler</span><br><span class="line">    <span class="title function_">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SentinelGatewayBlockExceptionHandler</span>(viewResolvers,</span><br><span class="line">                serverCodecConfigurer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义限流异常页面</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBlockHandlers</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">BlockRequestHandler</span> <span class="variable">blockRequestHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockRequestHandler</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">handleRequest</span><span class="params">(ServerWebExchange</span></span><br><span class="line"><span class="params">                                                              serverWebExchange, Throwable throwable)</span> {</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">                map.put(<span class="string">"message"</span>, <span class="string">"接口被限流了"</span>);</span><br><span class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK).</span><br><span class="line">                        contentType(MediaType.APPLICATION_JSON_UTF8).</span><br><span class="line">                        body(BodyInserters.fromObject(map));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>自定义API分组</p></blockquote><p>自定义API分组是一种更细粒度的限流规则定义</p><p>与上面不同在配置初始化的限流参数与自定义API分组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayConfiguration</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class="line"><span class="params">                                ServerCodecConfigurer serverCodecConfigurer)</span> {</span><br><span class="line">        <span class="built_in">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个限流的过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">sentinelGatewayFilter</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SentinelGatewayFilter</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置初始化的限流参数</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initGatewayRules</span><span class="params">()</span> {</span><br><span class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        rules.add(<span class="keyword">new</span> <span class="title class_">GatewayFlowRule</span>(<span class="string">"product_api1"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</span><br><span class="line">        rules.add(<span class="keyword">new</span> <span class="title class_">GatewayFlowRule</span>(<span class="string">"product_api2"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</span><br><span class="line">        GatewayRuleManager.loadRules(rules);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置限流的异常处理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title function_">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SentinelGatewayBlockExceptionHandler</span>(viewResolvers, serverCodecConfigurer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//　自定义限流异常页面</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBlockHandlers</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">BlockRequestHandler</span> <span class="variable">blockRequestHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockRequestHandler</span>() {</span><br><span class="line">            <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> {</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">                map.put(<span class="string">"message"</span>, <span class="string">"接口被限流了"</span>);</span><br><span class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK).</span><br><span class="line">                        contentType(MediaType.APPLICATION_JSON_UTF8).</span><br><span class="line">                        body(BodyInserters.fromObject(map));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义API分组</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initCustomizedApis</span><span class="params">()</span> {</span><br><span class="line">        Set&lt;ApiDefinition&gt; definitions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ApiDefinition</span> <span class="variable">api1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiDefinition</span>(<span class="string">"product_api1"</span>)</span><br><span class="line">                .setPredicateItems(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ApiPredicateItem&gt;() {{</span><br><span class="line">                    <span class="comment">// 以/product-serv/product/api1 开头的请求</span></span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">ApiPathPredicateItem</span>().setPattern(<span class="string">"/product-serv/product/api1/**"</span>).</span><br><span class="line">                            setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));</span><br><span class="line">                }});</span><br><span class="line">        <span class="type">ApiDefinition</span> <span class="variable">api2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiDefinition</span>(<span class="string">"product_api2"</span>)</span><br><span class="line">                .setPredicateItems(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ApiPredicateItem&gt;() {{</span><br><span class="line">                    <span class="comment">// 以/product-serv/product/api2/demo1 完成的url路径匹配</span></span><br><span class="line">                    add(<span class="keyword">new</span> <span class="title class_">ApiPathPredicateItem</span>().setPattern(<span class="string">"/product-serv/product/api2/demo1"</span>));</span><br><span class="line">                }});</span><br><span class="line">        definitions.add(api1);</span><br><span class="line">        definitions.add(api2);</span><br><span class="line">        GatewayApiDefinitionManager.loadApiDefinitions(definitions);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2-Sleuth–链路追踪"><a href="#2-Sleuth–链路追踪" class="headerlink" title="2. Sleuth–链路追踪"></a>2. Sleuth–链路追踪</h1><h2 id="2-1-链路追踪介绍"><a href="#2-1-链路追踪介绍" class="headerlink" title="2.1 链路追踪介绍"></a>2.1 链路追踪介绍</h2><p>在大型系统的微服务化构建中，一个系统被拆分成了许多模块</p><p>这些模块负责不同的功能，组合成系统，最终可以提供丰富的功能</p><p>在这种架构中，一次请求往往需要涉及到多个服务</p><p>互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心，也就意味着这种架构形式也会存在一些问题:</p><ul><li>如何快速发现问题？</li><li>如何判断故障影响范围？</li><li>如何梳理服务依赖以及依赖的合理性？</li><li>如何分析链路性能问题以及实时容量规划？</li></ul><p><strong>分布式链路追踪</strong>（Distributed Tracing），就是将一次分布式请求还原成调用链路，进行日志记录，性能监控并将一次分布式请求的调用情况集中展示</p><p>比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等</p><p>常见的链路追踪技术有下面这些：</p><ul><li><p><strong>cat</strong></p><p>由大众点评开源，基于Java开发的实时应用监控平台，包括实时应用监控，业务监控 </p><p>集成方案是通过代码埋点的方式来实现监控，比如： 拦截器，过滤器等</p><p>对代码的侵入性很大，集成成本较高。风险较大。 </p></li><li><p><strong>zipkin</strong></p><p>由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现</p><p>该产品结合spring-cloud-sleuth 使用较为简单， 集成很方便， 但是功能较简单</p></li><li><p><strong>pinpoint</strong></p><p>Pinpoint是韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具</p><p>特点是支持多种插件，UI功能强大，接入端无代码侵入。</p></li><li><p><strong>skywalking</strong></p><p>SkyWalking是本土开源的基于字节码注入的调用链分析，以及应用监控分析工具</p><p>特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器</p></li><li><p><strong>Sleuth</strong></p><p>SpringCloud 提供的分布式系统中链路追踪解决方案 但是没与UI</p></li></ul><p><code>注意</code>：SpringCloud alibaba技术栈中并没有提供自己的链路追踪技术的，我们可以采用Sleuth + Zinkin来做链路追踪解决方案</p><h2 id="2-2-Sleuth入门"><a href="#2-2-Sleuth入门" class="headerlink" title="2.2 Sleuth入门"></a>2.2 Sleuth入门</h2><h3 id="2-2-1-Sleuth介绍"><a href="#2-2-1-Sleuth介绍" class="headerlink" title="2.2.1 Sleuth介绍"></a>2.2.1 Sleuth介绍</h3><p>SpringCloud Sleuth主要功能就是在分布式系统中提供追踪解决方案</p><p>它大量借用了Google Dapper的设计， 先来了解一下Sleuth中的术语和相关概念</p><ul><li><p>Trace</p><p>由一组Trace Id相同的Span串联形成一个树状结构</p><p>为了实现请求跟踪，当请求到达分布式系统的入口端点时，只需要服务跟踪框架为该请求创建一个唯一的标识（即TraceId），同时在分布式系 统内部流转的时候，框架始终保持传递该唯一值，直到整个请求的返回</p><p>那么我们就可以使用该唯一标识将所有的请求串联起来，形成一条完整的请求链路</p></li><li><p>Span</p><p>代表了一组基本的工作单元</p><p>为了统计各处理单元的延迟，当请求到达各个服务组件的时候，也通过一个唯一标识（SpanId）来标记它的开始、具体过程和结束</p><p>通过SpanId的开始和结束时间戳，就能统计该span的调用时间</p><p>除此之外，我们还可以获取如事件的名称、请求信息等元数据</p></li><li><p>Annotation</p><p>用它记录一段时间内的事件，内部使用的重要注释：</p><p>cs（Client Send）客户端发出请求，开始一个请求的生命</p><p>sr（Server Received）服务端接受到请求开始进行处理， sr－cs = 网络延迟（服务调用的时间）</p><p>ss（Server Send）服务端处理完毕准备发送到客户端，ss - sr = 服务器上的请求处理时间</p><p>cr（Client Reveived）客户端接受到服务端的响应，请求结束。 cr - sr = 请求的总时间</p></li></ul><h3 id="2-2-2-Sleuth入门"><a href="#2-2-2-Sleuth入门" class="headerlink" title="2.2.2 Sleuth入门"></a>2.2.2 Sleuth入门</h3><blockquote><p>修改父工程引入Sleuth依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--链路追踪 Sleuth--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>启动微服务，调用之后，我们可以在控制台观察到sleuth的日志输出</p><p>微服务名称, traceId, spanid,是否将链路的追踪结果输出到第三方平台</p><p>[api-gateway,3977125f73391553,3977125f73391553,false] </p><p>[service-order,3977125f73391553,57547b5bf71f8242,false] </p><p>[service-product,3977125f73391553,449f5b3f3ef8d5c5,false]</p><p>其中 3977125f73391553 是TraceId， 57547b5bf71f8242 是SpanId，依次调用有一个全局的 TraceId，将调用链路串起来</p><p>仔细分析每个微服务的日志，不难看出请求的具体过程</p><h2 id="2-3-Zipkin的集成"><a href="#2-3-Zipkin的集成" class="headerlink" title="2.3 Zipkin的集成"></a>2.3 Zipkin的集成</h2><h3 id="2-3-1-ZipKin介绍"><a href="#2-3-1-ZipKin介绍" class="headerlink" title="2.3.1 ZipKin介绍"></a>2.3.1 ZipKin介绍</h3><p>Zipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的<strong>收集、存储、查找和展现</strong></p><p>我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系统性能瓶颈的根源</p><p>除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请求链路明细，</p><p>比如：可以查询某段时间内各用户请求的处理时间等</p><p>Zipkin 提供了可插拔数据存储方式：In-Memory、MySql、Cassandra 以及 Elasticsearch</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Zipkin%20%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png" alt="Zipkin 的基础架构"></p><p>上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成：</p><ul><li><p>Collector：</p><p>收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能</p></li><li><p>Storage：</p><p>存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中，我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中</p></li><li><p>RESTful API：</p><p>API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接系统访问以实现监控等</p></li><li><p>Web UI：</p><p>UI 组件， 基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分析跟踪信息</p></li></ul><p>Zipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用</p><p>客户端会配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监听，并生成相应的 Trace 和 Span 信息发送给服务端</p><h3 id="2-3-2-ZipKin服务端安装"><a href="#2-3-2-ZipKin服务端安装" class="headerlink" title="2.3.2 ZipKin服务端安装"></a>2.3.2 ZipKin服务端安装</h3><blockquote><p>第1步: 下载ZipKin的jar包</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec</span><br></pre></td></tr></tbody></table></figure><p>访问上面的网址，即可得到一个jar包，这就是ZipKin服务端的jar包</p><blockquote><p>第2步: 通过命令行，输入下面的命令启动ZipKin Server</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-jar</span> zipkin<span class="literal">-server-2</span>.<span class="number">12.9</span><span class="literal">-exec</span>.jar</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第3步：通过浏览器访问 <a href="http://localhost:9411访问">http://localhost:9411访问</a></p></blockquote><h3 id="2-3-3-Zipkin客户端集成"><a href="#2-3-3-Zipkin客户端集成" class="headerlink" title="2.3.3 Zipkin客户端集成"></a>2.3.3 Zipkin客户端集成</h3><p>基本步骤:</p><ol><li><p>导入依赖</p></li><li><p>添加配置</p></li><li><p>访问微服务</p></li></ol><blockquote><p>在需要使用的微服务上导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>添加配置</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411/</span> <span class="comment">#zipkin server的请求地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span> <span class="comment">#让nacos把它当成一个URL，而不要当做服务名</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样的百分比</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-ZipKin数据持久化"><a href="#2-4-ZipKin数据持久化" class="headerlink" title="2.4 ZipKin数据持久化"></a>2.4 ZipKin数据持久化</h2><p>Zipkin Server默认会将追踪数据信息保存到内存，但这种方式不适合生产环境</p><p>Zipkin支持将追踪 数据持久化到<code>mysql</code>数据库或<code>elasticsearch</code>中</p><h3 id="2-4-1-使用mysql实现数据持久化"><a href="#2-4-1-使用mysql实现数据持久化" class="headerlink" title="2.4.1 使用mysql实现数据持久化"></a>2.4.1 使用mysql实现数据持久化</h3><blockquote><p>第1步: 创建mysql数据环境</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS zipkin_spans</span><br><span class="line">(</span><br><span class="line">    `trace_id_high` BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this</span><br><span class="line">means the trace uses 128 bit traceIds instead of 64 bit',</span><br><span class="line">    `trace_id`      BIGINT       NOT NULL,</span><br><span class="line">    `id`            BIGINT       NOT NULL,</span><br><span class="line">    `name`          VARCHAR(255) NOT NULL,</span><br><span class="line">    `parent_id`     BIGINT,</span><br><span class="line">    `debug`         BIT(1),</span><br><span class="line">    `start_ts`      BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs</span><br><span class="line">query and to implement TTL',</span><br><span class="line">    `duration`      BIGINT COMMENT 'Span.duration(): micros used for minDuration</span><br><span class="line">and maxDuration query'</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  ROW_FORMAT = COMPRESSED</span><br><span class="line">  CHARACTER SET = utf8</span><br><span class="line">  COLLATE</span><br><span class="line">      utf8_general_ci;</span><br><span class="line">ALTER TABLE zipkin_spans</span><br><span class="line">    ADD UNIQUE KEY (`trace_id_high`, `trace_id`, `id`)</span><br><span class="line">        COMMENT 'ignore insert on duplicate';</span><br><span class="line">ALTER TABLE zipkin_spans</span><br><span class="line">    ADD INDEX (`trace_id_high`, `trace_id`, `id`)</span><br><span class="line">        COMMENT 'for joining with zipkin_annotations';</span><br><span class="line">ALTER TABLE zipkin_spans</span><br><span class="line">    ADD INDEX (`trace_id_high`, `trace_id`) COMMENT 'for</span><br><span class="line">getTracesByIds';</span><br><span class="line">ALTER TABLE zipkin_spans</span><br><span class="line">    ADD INDEX (`name`) COMMENT 'for getTraces and</span><br><span class="line">getSpanNames';</span><br><span class="line">ALTER TABLE zipkin_spans</span><br><span class="line">    ADD INDEX (`start_ts`) COMMENT 'for getTraces</span><br><span class="line">ordering and range';</span><br><span class="line">CREATE TABLE IF NOT EXISTS zipkin_annotations</span><br><span class="line">(</span><br><span class="line">    `trace_id_high`         BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this</span><br><span class="line">means the trace uses 128 bit traceIds instead of 64 bit',</span><br><span class="line">    `trace_id`              BIGINT       NOT NULL COMMENT 'coincides with</span><br><span class="line">zipkin_spans.trace_id',</span><br><span class="line">    `span_id`               BIGINT       NOT NULL COMMENT 'coincides with zipkin_spans.id',</span><br><span class="line">    `a_key`                 VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or</span><br><span class="line">Annotation.value if type == -1',</span><br><span class="line">    `a_value`               BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller</span><br><span class="line">than 64KB',</span><br><span class="line">    `a_type`                INT          NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if</span><br><span class="line">Annotation',</span><br><span class="line">    `a_timestamp`           BIGINT COMMENT 'Used to implement TTL;</span><br><span class="line">Annotation.timestamp or zipkin_spans.timestamp',</span><br><span class="line">    `endpoint_ipv4`         INT COMMENT 'Null when Binary/Annotation.endpoint is</span><br><span class="line">null',</span><br><span class="line">    `endpoint_ipv6`         BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint</span><br><span class="line">is null, or no IPv6 address',</span><br><span class="line">    `endpoint_port`         SMALLINT COMMENT 'Null when Binary/Annotation.endpoint</span><br><span class="line">is null',</span><br><span class="line">    `endpoint_service_name` VARCHAR(255) COMMENT 'Null when</span><br><span class="line">Binary/Annotation.endpoint is null'</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  ROW_FORMAT = COMPRESSED</span><br><span class="line">  CHARACTER SET = utf8</span><br><span class="line">  COLLATE</span><br><span class="line">      utf8_general_ci;</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD UNIQUE KEY (`trace_id_high`, `trace_id`,</span><br><span class="line">                    `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`trace_id_high`, `trace_id`,</span><br><span class="line">               `span_id`) COMMENT 'for joining with zipkin_spans';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`trace_id_high`, `trace_id`)</span><br><span class="line">        COMMENT 'for getTraces/ByIds';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`endpoint_service_name`) COMMENT</span><br><span class="line">        'for getTraces and getServiceNames';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`a_type`) COMMENT 'for getTraces';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`a_key`) COMMENT 'for getTraces';</span><br><span class="line">ALTER TABLE zipkin_annotations</span><br><span class="line">    ADD INDEX (`trace_id`, `span_id`, `a_key`)</span><br><span class="line">        COMMENT 'for dependencies job';</span><br><span class="line">CREATE TABLE IF NOT EXISTS zipkin_dependencies</span><br><span class="line">(</span><br><span class="line">    `day`        DATE         NOT NULL,</span><br><span class="line">    `parent`     VARCHAR(255) NOT NULL,</span><br><span class="line">    `child`      VARCHAR(255) NOT NULL,</span><br><span class="line">    `call_count` BIGINT</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  ROW_FORMAT = COMPRESSED</span><br><span class="line">  CHARACTER SET = utf8</span><br><span class="line">  COLLATE</span><br><span class="line">      utf8_general_ci;</span><br><span class="line">ALTER TABLE zipkin_dependencies</span><br><span class="line">    ADD UNIQUE KEY (`day`, `parent`, `child`);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第2步: 在启动ZipKin Server的时候,指定数据保存的mysql的信息</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-jar</span> zipkin<span class="literal">-server-2</span>.<span class="number">12.9</span><span class="literal">-exec</span>.jar <span class="literal">--STORAGE_TYPE</span>=mysql <span class="literal">--MYSQL_HOST</span>=<span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--MYSQL_TCP_PORT</span>=<span class="number">3306</span> <span class="literal">--MYSQL_DB</span>=zipkin <span class="literal">--MYSQL_USER</span>=root <span class="literal">--MYSQL_PASS</span>=root</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-2-使用elasticsearch实现数据持久化"><a href="#2-4-2-使用elasticsearch实现数据持久化" class="headerlink" title="2.4.2 使用elasticsearch实现数据持久化"></a>2.4.2 使用elasticsearch实现数据持久化</h3><blockquote><p>第1步: 下载elasticsearch</p></blockquote><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-8-4">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-8-4</a></p><blockquote><p>第2步: 启动elasticsearch</p></blockquote><p>elasticsearch.bat文件</p><blockquote><p>第3步: 在启动ZipKin Server的时候，指定数据保存的elasticsearch的信息</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-jar</span> zipkin<span class="literal">-server-2</span>.<span class="number">12.9</span><span class="literal">-exec</span>.jar <span class="literal">--STORAGE_TYPE</span>=elasticsearch <span class="literal">--ES-HOST</span>=localhost:<span class="number">9200</span></span><br></pre></td></tr></tbody></table></figure><h1 id="3-RocketMQ–消息驱动"><a href="#3-RocketMQ–消息驱动" class="headerlink" title="3. RocketMQ–消息驱动"></a>3. RocketMQ–消息驱动</h1><h2 id="3-1-MQ简介"><a href="#3-1-MQ简介" class="headerlink" title="3.1 MQ简介"></a>3.1 MQ简介</h2><p>MQ（Message Queue）是一种跨进程的通信机制，用于传递消息</p><p>通俗点说，就是一个先进先出的数据结构</p><blockquote><p>异步解耦</p></blockquote><p><strong>最常见的一个场景是用户注册后，需要发送注册邮件和短信通知，以告知用户注册成功</strong></p><p>异步解耦是消息队列 MQ 的主要特点，主要目的是减少请求响应时间和解耦</p><p>主要的使用场景就是将比较耗时而且不需要即时（同步）返回结果的操作作为消息放入消息队列</p><p>同时，由于使用了消息列 MQ，只要保证消息格式不变，消息的发送方和接收方并不需要彼此联系，也不需要受对方的影响，即解耦合</p><blockquote><p>流量削峰</p></blockquote><p><strong>流量削峰也是消息队列 MQ 的常用场景，一般在秒杀或团队抢购(高并发)活动中使用广泛</strong></p><p>在秒杀或团队抢购活动中，由于用户请求量较大，导致流量暴增</p><p>秒杀的应用在处理如此大量的访问流量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况</p><p>为解决这些问题，可在应用和下游通知系统之间加入消息队列 MQ</p><p>秒杀处理流程如下所述：</p><ol><li>用户发起海量秒杀请求到秒杀业务处理系统</li><li>秒杀处理系统按照秒杀处理逻辑将满足秒杀条件的请求发送至消息队列 MQ</li><li>下游的通知系统订阅消息队列 MQ 的秒杀相关消息，再将秒杀成功的消息发送到相应用户</li><li>用户收到秒杀成功的通知。</li></ol><h2 id="3-2-常见的MQ产品"><a href="#3-2-常见的MQ产品" class="headerlink" title="3.2 常见的MQ产品"></a>3.2 常见的MQ产品</h2><p>目前业界有很多MQ产品，比较出名的有下面这些：</p><ul><li><p><strong>ZeroMQ</strong></p><p>号称<code>最快的消息队列系统</code>，尤其针对大吞吐量的需求场景</p><p>扩展性好，开发比较灵活，采用<code>C语言实现</code>，实际上只是一个socket库的重新封装</p><p><code>如果做为消息队列使用，需要开发大量的代码</code></p><p>ZeroMQ仅提供<code>非持久性的队列</code>，也就是说如果down机，数据将会丢失</p></li><li><p><strong>RabbitMQ</strong></p><p>使用<code>erlang语言</code>开发，性能较好，适合于企业级的开发</p><p><code>但是不利于做二次开发和维护</code></p></li><li><p>ActiveMQ</p><p>历史悠久的Apache开源项目</p><p>已经在很多产品中得到应用，实现了JMS1.1规范，可以和spring-jms轻松融合，实现了多种协议，支持<code>持久化到数据库</code></p><p><code>对队列数较多的情况支持不好</code></p></li><li><p>RocketMQ</p><p>阿里巴巴的MQ中间件，由<code>java语言</code>开发，性能非常好，能够撑住双十一的大流量，而且使用起来很简单</p></li><li><p>Kafka</p><p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish/Subscribe消息队列系统，现在主要用于大数据</p><p>相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布 式系统</p></li></ul><h2 id="3-3-环境搭建"><a href="#3-3-环境搭建" class="headerlink" title="3.3 环境搭建"></a>3.3 环境搭建</h2><blockquote><p>第一步: 下载RocketMQ</p></blockquote><p><a href="http://rocketmq.apache.org/release_notes/release-notes-4.4.0/">http://rocketmq.apache.org/release_notes/release-notes-4.4.0/</a></p><p><strong>环境要求</strong></p><ul><li>Linux 64位操作系统</li><li>64bit JDK 1.8+</li></ul><blockquote><p>第二步:  安装RocketMQ</p></blockquote><ol><li>上传文件到Linux系统</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># ls /usr/local/src/</span></span><br><span class="line">rocketmq<span class="literal">-all-4</span>.<span class="number">4.0</span><span class="literal">-bin-release</span>.zip</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>解压到安装目录</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">src</span>]<span class="comment"># unzip rocketmq-all-4.4.0-bin-release.zip</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">src</span>]<span class="comment"># mv rocketmq-all-4.4.0-bin-release ../rocketmq</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第三步:启动RocketMQ</p></blockquote><ol><li>修改启动内存</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑bin/runbroker.sh 和 bin/runserver.sh文件,修改里面的</span></span><br><span class="line"><span class="comment"># JAVA_OPT="${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g"</span></span><br><span class="line"><span class="comment"># 为JAVA_OPT="${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m"</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>启动NameServer</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># nohup ./bin/mqnamesrv &amp;</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1467</span></span><br><span class="line"><span class="comment"># 只要进程不报错,就应该是启动成功了,可以查看一下日志</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># tail -f /root/logs/rocketmqlogs/namesrv.log</span></span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># netstat -an | grep 9876</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>启动Broker</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># nohup bin/mqbroker -n localhost:9876 &amp;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># tail -f /root/logs/rocketmqlogs/broker.log</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第四步: 测试RocketMQ</p></blockquote><ol><li>测试消息发送</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># export NAMESRV_ADDR=localhost:9876</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># bin/tools.sh org.apache.rocketmq<span class="doctag">.example</span>.quickstart.Producer</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>测试消息接收</li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># export NAMESRV_ADDR=localhost:9876</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># bin/tools.sh org.apache.rocketmq<span class="doctag">.example</span>.quickstart.Consumer</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第五步:  关闭RocketMQ</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># bin/mqshutdown broker</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jyw</span> <span class="type">rocketmq</span>]<span class="comment"># bin/mqshutdown namesrv</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-RocketMQ的架构及概念"><a href="#3-4-RocketMQ的架构及概念" class="headerlink" title="3.4 RocketMQ的架构及概念"></a>3.4 RocketMQ的架构及概念</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%20RocketMQ%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt=" RocketMQ的架构"></p><p>如上图所示，整体可以分成4个角色，分别是：NameServer，Broker，Producer，Consumer</p><ul><li><p><strong>Broker</strong>(邮递员)</p><p>Broker是RocketMQ的核心，负责消息的接收，存储，投递等功能</p></li><li><p><strong>NameServer</strong>(邮局)</p><p>消息队列的协调者，Broker向它注册路由信息，同时Producer和Consumer向其获取路由信息</p></li><li><p><strong>Producer</strong>(寄件人)</p><p>消息的生产者，需要从NameServer获取Broker信息，然后与Broker建立连接，向Broker发送消息</p></li><li><p><strong>Consumer</strong>(收件人)</p><p>消息的消费者，需要从NameServer获取Broker信息，然后与Broker建立连接，从Broker获取消息</p></li><li><p><strong>Topic</strong>(地区)</p><p>用来区分不同类型的消息，发送和接收消息前都需要先创建Topic，针对Topic来发送和接收消息</p></li><li><p><strong>Message Queue</strong>(邮件)</p><p>为了提高性能和吞吐量，引入了Message Queue，一个Topic可以设置一个或多个Message Queue，这样消息就可以并行往各个Message Queue发送消息，消费者也可以并行的从多个 Message Queue读取消息</p></li><li><p><strong>Message</strong></p><p>Message 是消息的载体</p></li><li><p><strong>Producer Group</strong></p><p>生产者组，简单来说就是多个发送同一类消息的生产者称之为一个生产者组</p></li><li><p><strong>Consumer Group</strong></p><p>消费者组，消费同一类消息的多个 consumer 实例组成一个消费者组</p></li></ul><h2 id="3-5-RocketMQ控制台安装"><a href="#3-5-RocketMQ控制台安装" class="headerlink" title="3.5 RocketMQ控制台安装"></a>3.5 RocketMQ控制台安装</h2><blockquote><p>第一步: 下载工程</p></blockquote><p><a href="https://github.com/apache/rocketmq-externals/releases">https://github.com/apache/rocketmq-externals/releases</a></p><blockquote><p>第二步: 修改配置文件</p></blockquote><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件 rocketmq-console\src\main\resources\application.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">7777 #项目启动后的端口号</span></span><br><span class="line"><span class="attr">rocketmq.config.namesrvAddr</span>=<span class="string">192.168.114.130:9876 #nameserv的地址，注意防火墙要开启9876端口</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第三步: 打成jar包，并启动</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入控制台项目，将工程打成jar包</span></span><br><span class="line">mvn clean package <span class="literal">-Dmaven</span>.test.skip=true</span><br><span class="line"><span class="comment"># 启动控制台</span></span><br><span class="line">java <span class="literal">-jar</span> target/rocketmq<span class="literal">-console-ng-1</span>.<span class="number">0.0</span>.jar</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第四步: 访问控制台</p></blockquote><p>127.0.0.1:7777</p><h2 id="3-6-消息发送和接收演示"><a href="#3-6-消息发送和接收演示" class="headerlink" title="3.6 消息发送和接收演示"></a>3.6 消息发送和接收演示</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rocketmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-1-发送消息"><a href="#3-6-1-发送消息" class="headerlink" title="3.6.1 发送消息"></a>3.6.1 发送消息</h3><p>消息发送步骤: </p><ol><li>创建消息生产者, 指定生产者所属的组名</li><li>指定Nameserver地址</li><li>启动生产者</li><li>创建消息对象，指定主题、标签和消息体</li><li>发送消息</li><li>关闭生产者</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQSendMessageTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">//1.创建消息生产者,并且设置生产组名</span></span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">"myproducer-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 为生产者设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.109.131:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 启动生产者</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 构建消息对象,主要是设置消息的主题 标签 内容</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">"myTopic"</span>, <span class="string">"myTag"</span>, (<span class="string">"Test RocketMQ Message"</span>).getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5 发送消息 第二个参数代表超时时间</span></span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 关闭生产者</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-2-接收消息"><a href="#3-6-2-接收消息" class="headerlink" title="3.6.2 接收消息"></a>3.6.2 接收消息</h3><p>消息接收步骤:</p><ol><li>创建消息消费者, 指定消费者所属的组名</li><li>指定Nameserver地址</li><li>指定消费者订阅的主题和标签</li><li>设置回调函数，编写处理消息的方法</li><li>启动消息消费者</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQReceiveMessageTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 创建消费者,并且为其指定消费者组名</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">"myconsumer-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 为消费者设置NameServer的地址</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.109.131:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 指定消费者订阅的主题和标签</span></span><br><span class="line">        consumer.subscribe(<span class="string">"myTopic"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 设置一个回调函数,并在函数中编写接收到消息之后的处理方法</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() {</span><br><span class="line">            <span class="comment">//处理获取到的消息</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> {</span><br><span class="line">                <span class="comment">//消费逻辑</span></span><br><span class="line">                System.out.println(<span class="string">"Message===&gt;"</span> + list);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回消费成功状态</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5 启动消费者</span></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">"启动消费者成功了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-7-案例"><a href="#3-7-案例" class="headerlink" title="3.7 案例"></a>3.7 案例</h2><h3 id="3-7-1-订单微服务发送消息"><a href="#3-7-1-订单微服务发送消息" class="headerlink" title="3.7.1 订单微服务发送消息"></a>3.7.1 订单微服务发送消息</h3><blockquote><p>在order里添加依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>添加配置</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.114</span><span class="number">.130</span><span class="string">:9876</span> <span class="comment">#rocketMQ服务的地址</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">shop-order</span> <span class="comment"># 生产者组</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>编写控制器</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">    log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line">    <span class="keyword">if</span> (product.getPid() == -<span class="number">1</span>) {</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setPname(<span class="string">"下单失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单(创建订单)</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setUid(<span class="number">1</span>);</span><br><span class="line">    order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">    order.setPid(pid);</span><br><span class="line">    order.setPname(product.getPname());</span><br><span class="line">    order.setPprice(product.getPprice());</span><br><span class="line">    order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    orderService.save(order);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line">    rocketMQTemplate.convertAndSend(<span class="string">"order-topic"</span>,order);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-2-用户微服务订阅消息"><a href="#3-7-2-用户微服务订阅消息" class="headerlink" title="3.7.2 用户微服务订阅消息"></a>3.7.2 用户微服务订阅消息</h3><blockquote><p>user模块依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>主类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(UserApplication.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-user</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=true&amp;c3haracterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">hbm2ddl:</span></span><br><span class="line">          <span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.114</span><span class="number">.130</span><span class="string">:9876</span> <span class="comment">#rocketMQ服务的地址</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>编写短信接收</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(consumerGroup = "shop-user", topic = "order-topic")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;Order&gt; {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Order order)</span> {</span><br><span class="line">        log.info(<span class="string">"收到一个订单信息{},接下来发送短信"</span>, JSON.toJSONString(order));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-8-发送不同类型的消息"><a href="#3-8-发送不同类型的消息" class="headerlink" title="3.8 发送不同类型的消息"></a>3.8 发送不同类型的消息</h2><h3 id="3-8-1-普通消息"><a href="#3-8-1-普通消息" class="headerlink" title="3.8.1 普通消息"></a>3.8.1 普通消息</h3><p>RocketMQ提供三种方式来发送普通消息：可靠同步发送、可靠异步发送和单向发送</p><blockquote><p>可靠同步发送</p></blockquote><p>同步发送是指消息发送方发出数据后，会在收到接收方发回响应之后才发下一个数据包的通讯方式</p><p>此种方式应用场景非常广泛，例如重要通知邮件、报名短信通知、营销短信系统等</p><blockquote><p>可靠异步发送</p></blockquote><p>异步发送是指发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式</p><p>发送方通过回调接口接收服务器响应，并对响应结果进行处理</p><p>异步发送一般用于链路耗时较长，对 RT 响应时间较为敏感的业务场景，例如用户视频上传后通知启动转码服务，转码完成后通知推送转码结果等</p><blockquote><p>单向发送</p></blockquote><p>单向发送是指发送方只负责发送消息，不等待服务器回应且没有回调函数触发，即只发送请求不等待应答</p><p>适用于某些耗时非常短，但对可靠性要求并不高的场景，例如日志收集</p><blockquote><p><strong><code>测试</code></strong></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = OrderApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageTypeTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步消息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSyncSend</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//参数一: topic， 如果想添加tag 可以使用"topic:tag"的写法</span></span><br><span class="line">        <span class="comment">//参数二: 消息内容</span></span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> rocketMQTemplate.syncSend(<span class="string">"test-topic-1"</span>, <span class="string">"这是一条同步消息"</span>);</span><br><span class="line">        System.out.println(sendResult);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异步消息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAsyncSend</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">//参数一: topic, 如果想添加tag 可以使用"topic:tag"的写法</span></span><br><span class="line">        <span class="comment">//参数二: 消息内容</span></span><br><span class="line">        <span class="comment">//参数三: 回调函数, 处理返回结果</span></span><br><span class="line">        rocketMQTemplate.asyncSend(<span class="string">"test-topic-1"</span>, <span class="string">"这是一条异步消息"</span>, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> {</span><br><span class="line">                System.out.println(sendResult);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> {</span><br><span class="line">                System.out.println(throwable);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">//让线程不要终止</span></span><br><span class="line">        Thread.sleep(<span class="number">30000000</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单向消息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOneWay</span><span class="params">()</span> {</span><br><span class="line">        rocketMQTemplate.sendOneWay(<span class="string">"test-topic-1"</span>, <span class="string">"这是一条单向消息"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>三种发送方式的对比</strong></p><table><thead><tr><th>发送方式</th><th>发送TPS</th><th>发送结果反馈</th><th>可靠性</th></tr></thead><tbody><tr><td>同步发送</td><td>快</td><td>有</td><td>不丢失</td></tr><tr><td>异步发送</td><td>快</td><td>有</td><td>不丢失</td></tr><tr><td>单向发送</td><td>最快</td><td>无</td><td>可能丢失</td></tr></tbody></table><h3 id="3-8-2-顺序消息"><a href="#3-8-2-顺序消息" class="headerlink" title="3.8.2 顺序消息"></a>3.8.2 顺序消息</h3><p>顺序消息是消息队列提供的一种严格按照顺序来发布和消费的消息类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步顺序消息[异步顺序 单向顺序写法类似]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSyncSendOrderly</span><span class="params">()</span> {</span><br><span class="line"><span class="comment">//第三个参数用于队列的选择</span></span><br><span class="line">    rocketMQTemplate.syncSendOrderly(<span class="string">"test-topic-1"</span>, <span class="string">"这是一条异步顺序消息"</span>,</span><br><span class="line">            <span class="string">"xxxx"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-8-3-事务消息"><a href="#3-8-3-事务消息" class="headerlink" title="3.8.3 事务消息"></a>3.8.3 事务消息</h3><p>RocketMQ提供了事务消息，通过事务消息就能达到分布式事务的最终一致</p><blockquote><p>事务消息交互流程</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/RocketMQ%E4%BA%8B%E5%8A%A1%E4%BF%A1%E6%81%AF%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B.png" alt="RocketMQ事务信息交互流程"></p><p><strong>两个概念:</strong></p><ul><li><p><code>半事务消息</code>：暂不能投递的消息，发送方已经成功地将消息发送到了RocketMQ服务端<br>但是服务端未收到生产者对该消息的二次确认，此时该消息被标记成“暂不能投递”状态<br>处于该种状态下的消息即半事务消息</p></li><li><p><code>消息回查</code>：由于网络闪断、生产者应用重启等原因，导致某条事务消息的二次确认丢失<br>RocketMQ服务端通过扫描发现某条消息长期处于“半事务消息”时<br>需要主动向消息生产者询问该消息的最终状态（Commit 或是 Rollback），该询问过程即消息回查</p></li></ul><blockquote><p>事务消息发送步骤：</p></blockquote><ol><li>发送方将半事务消息发送至RocketMQ服务端</li><li>RocketMQ服务端将消息持久化之后，向发送方返回Ack确认消息已经发送成功，此时消息为半事 务消息</li><li>发送方开始执行本地事务逻辑</li><li>发送方根据本地事务执行结果向服务端提交二次确认（Commit 或是 Rollback），<br>服务端收到 Commit 状态则将半事务消息标记为可投递，订阅方最终将收到该消息；<br>服务端收到 Rollback 状态则删除半事务消息，订阅方将不会接受该消息</li></ol><blockquote><p>事务消息回查步骤：</p></blockquote><ol><li>在断网或者是应用重启的特殊情况下，上述步骤4提交的二次确认最终未到达服务端，经过固定时间后服务端将对该消息发起消息回查</li><li>发送方收到消息回查后，需要检查对应消息的本地事务执行的最终结果</li><li>发送方根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行操作。</li></ol><blockquote><p>代码实现</p></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">日志实体类</button></li><li class="tab"><button type="button" data-href="#1-2">TxLogDao</button></li><li class="tab"><button type="button" data-href="#1-3">ServiceImpl</button></li><li class="tab"><button type="button" data-href="#1-4">ServiceImplListener</button></li><li class="tab"><button type="button" data-href="#1-5">Controller</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息事物状态记录</span></span><br><span class="line"><span class="meta">@Entity(name = "shop_txlog")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxLog</span> {</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String txId;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TxLogDao</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;TxLog, String&gt; {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxLogDao txLogDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrderBefore</span><span class="params">(Order order)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">txId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//发送半事务消息</span></span><br><span class="line">        rocketMQTemplate.sendMessageInTransaction(</span><br><span class="line">                <span class="string">"tx_producer_group"</span>,</span><br><span class="line">                <span class="string">"tx_topic"</span>,</span><br><span class="line">                MessageBuilder.withPayload(order).setHeader(<span class="string">"txId"</span>, txId).build(),</span><br><span class="line">                order</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(String txId, Order order)</span> {</span><br><span class="line">        <span class="comment">//保存订单</span></span><br><span class="line">        orderDao.save(order);</span><br><span class="line">        <span class="type">TxLog</span> <span class="variable">txLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TxLog</span>();</span><br><span class="line">        txLog.setTxId(txId);</span><br><span class="line">        txLog.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//记录事物日志</span></span><br><span class="line">        txLogDao.save(txLog);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RocketMQTransactionListener(txProducerGroup = "tx_producer_group")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImplListener</span> <span class="keyword">implements</span> <span class="title class_">RocketMQLocalTransactionListener</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderServiceImpl OrderServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxLogDao txLogDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行本地事物</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">txId</span> <span class="operator">=</span> (String) msg.getHeaders().get(<span class="string">"txId"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//本地事物</span></span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) arg;</span><br><span class="line">            OrderServiceImpl.createOrder(txId,order);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息回查</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(Message msg)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">txId</span> <span class="operator">=</span> (String) msg.getHeaders().get(<span class="string">"txId"</span>);</span><br><span class="line">        <span class="type">TxLog</span> <span class="variable">txLog</span> <span class="operator">=</span> txLogDao.findById(txId).get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (txLog != <span class="literal">null</span>){</span><br><span class="line">            <span class="comment">//本地事物(订单)成功了</span></span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderServiceImpl orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (product.getPid() == -<span class="number">100</span>) {</span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">            order.setOid(-<span class="number">100L</span>);</span><br><span class="line">            order.setPname(<span class="string">"下单失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.createOrderBefore(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-9-RocketMQ支持两种消息模式"><a href="#3-9-RocketMQ支持两种消息模式" class="headerlink" title="3.9 RocketMQ支持两种消息模式"></a>3.9 RocketMQ支持两种消息模式</h2><p>RocketMQ支持两种消息模式:</p><ul><li><strong>广播消费</strong>: 每个消费者实例都会收到消息,也就是一条消息可以被每个消费者实例处理</li><li><strong>集群消费</strong>: 一条消息只能被一个消费者实例消费</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RocketMQMessageListener(</span></span><br><span class="line"><span class="meta">        consumerGroup = "shop-user", //消费者组名</span></span><br><span class="line"><span class="meta">        topic = "order-topic",//消费主题</span></span><br><span class="line"><span class="meta">        consumeMode = ConsumeMode.CONCURRENTLY,//消费模式,指定是否顺序消费 CONCURRENTLY(同步,默认) ORDERLY(顺序)</span></span><br><span class="line"><span class="meta">        messageModel = MessageModel.CLUSTERING//消息模式 BROADCASTING(广播)  CLUSTERING(集群,默认)</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> SpringCloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudalibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudalibaba(二) 服务治理,负载均衡,服务容错</title>
      <link href="/javaee/spring/springcloudalibaba/2.fu-wu-zhi-li-yu-fu-wu-rong-cuo/"/>
      <url>/javaee/spring/springcloudalibaba/2.fu-wu-zhi-li-yu-fu-wu-rong-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-服务治理"><a href="#1-服务治理" class="headerlink" title="1. 服务治理"></a>1. 服务治理</h1><p>我们把服务提供者的网络地址 （ip，端口）等硬编码到了代码中，这种做法存在许多问题:</p><ul><li>一旦服务提供者地址变化，就需要手工修改代码</li><li>一旦是多个服务提供者，无法实现负载均衡功能</li><li>一旦服务变得越来越多，人工维护调用关系困难</li></ul><p>这时候就需要通过<code>注册中心</code><strong>动态</strong>的实现`服务治理·</p><h2 id="1-1-服务治理介绍"><a href="#1-1-服务治理介绍" class="headerlink" title="1.1 服务治理介绍"></a>1.1 服务治理介绍</h2><p>服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的<strong>自动化注册与发现</strong></p><ul><li><p><strong>服务注册</strong>：在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务</p></li><li><p><strong>服务发现</strong>：服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实 例的访问</p></li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibaba%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="SpringCloudalibaba服务治理流程图"></p><h2 id="1-2-服务注册中心"><a href="#1-2-服务注册中心" class="headerlink" title="1.2 服务注册中心"></a>1.2 服务注册中心</h2><ol><li>服务发现：<ul><li><strong>服务注册</strong>：保存服务提供者和服务调用者的信息</li><li><strong>服务订阅</strong>：服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息</li></ul></li><li>服务配置：<ul><li><strong>配置订阅</strong>：服务提供者和服务调用者订阅微服务相关的配置</li><li><strong>配置下发</strong>：主动将配置推送给服务提供者和服务调用者</li></ul></li><li>服务健康检测<ul><li>检测服务提供者的健康情况，如果发现异常，执行服务剔除</li></ul></li></ol><blockquote><p>常见的注册中心</p></blockquote><ul><li><p><strong>Zookeeper</strong></p><p>zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p></li><li><p><strong>Eureka</strong></p><p>Eureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭源</p></li><li><p><strong>Consul</strong></p><p>Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现和配置管理的功能。Consul的功能都很实用，其中包括：服务注册/发现、健康检查、Key/Value 存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以;安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。</p></li><li><p><strong>Nacos</strong></p><p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos=eureka+config。</p></li></ul><h1 id="2-Nacos入门"><a href="#2-Nacos入门" class="headerlink" title="2. Nacos入门"></a>2. Nacos入门</h1><h2 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h2><blockquote><p>安装nacos</p></blockquote><p>下载地址: <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>下载zip格式的安装包，然后进行解压缩操作</p><blockquote><p>启动nacos</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">切换目录</span></span><br><span class="line">cd nacos/bin</span><br><span class="line"><span class="meta">#</span><span class="language-bash">命令启动</span></span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></tbody></table></figure><blockquote><p>访问nacos</p></blockquote><p>打开浏览器输入<a href="http://localhost:8848/nacos%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%EF%BC%8C">http://localhost:8848/nacos，即可访问服务，</a> 默认密码是nacos/nacos</p><h2 id="2-2-注册与调用微服务"><a href="#2-2-注册与调用微服务" class="headerlink" title="2.2 注册与调用微服务"></a>2.2 注册与调用微服务</h2><blockquote><p>常用步骤</p></blockquote><p><code>注册</code>:</p><ol><li>添加依赖</li><li>主类上添加@EnableDiscoveryClient注解</li><li>配置文件中添加nacos服务地址</li></ol><p><code>调用</code>:</p><ol><li>注入DiscoveryClient discoveryClient</li><li>从nacos中获取服务地址</li><li>通过restTemplate调用微服务</li></ol><h3 id="2-2-1-将商品微服务注册到naco"><a href="#2-2-1-将商品微服务注册到naco" class="headerlink" title="2.2.1 将商品微服务注册到naco"></a>2.2.1 将商品微服务注册到naco</h3><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>主类上添加@EnableDiscoveryClient注解</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(ProductApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置文件中添加nacos服务地址</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-2-将订单微服务注册到nacos"><a href="#2-2-2-将订单微服务注册到nacos" class="headerlink" title="2.2.2 将订单微服务注册到nacos"></a>2.2.2 将订单微服务注册到nacos</h3><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>主类上添加@EnableDiscoveryClient注解</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置文件中添加nacos服务地址</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-3-调用商品微服务"><a href="#2-2-3-调用商品微服务" class="headerlink" title="2.2.3 调用商品微服务"></a>2.2.3 调用商品微服务</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息 找到服务对象列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-product"</span>);</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> serviceInstance.getHost() + <span class="string">":"</span> +serviceInstance.getPort();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span></span><br><span class="line">                restTemplate.getForObject(<span class="string">"http://"</span> + url + <span class="string">"/product/"</span> + pid, Product.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.createOrder(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-实现服务调用的负载均衡"><a href="#3-实现服务调用的负载均衡" class="headerlink" title="3. 实现服务调用的负载均衡"></a>3. 实现服务调用的负载均衡</h1><h2 id="3-1-负载均衡概念"><a href="#3-1-负载均衡概念" class="headerlink" title="3.1 负载均衡概念"></a>3.1 负载均衡概念</h2><p>通俗的讲， <code>负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器,组件）上进行执行</code></p><p>根据负载均衡发生位置的不同,一般分为<code>服务端负载均衡</code>和<code>客户端负载均衡</code></p><ul><li><p>服务端负载均衡</p><p>发生在服务提供者一方，比如常见的nginx负载均衡</p></li><li><p>客户端负载均衡</p><p>发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求</p></li></ul><h2 id="3-2-自定义实现负载均衡"><a href="#3-2-自定义实现负载均衡" class="headerlink" title="3.2 自定义实现负载均衡"></a>3.2 自定义实现负载均衡</h2><blockquote><p>通过idea再启动一个 shop-product 微服务，设置其端口为8082</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibaba-productApp2.png" alt="SpringCloudalibaba-productApp2"></p><blockquote><p>利用随机数实现负载均衡</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息 随机获取一个</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-product"</span>);</span><br><span class="line">        <span class="comment">//随机选择</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(instances.size());<span class="comment">//0 1 2</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span></span><br><span class="line">                restTemplate.getForObject(<span class="string">"http://"</span> + instance.getHost() + <span class="string">":"</span> + instance.getPort() + <span class="string">"/product/"</span> + pid, Product.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.createOrder(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-基于Ribbon实现负载均衡"><a href="#3-3-基于Ribbon实现负载均衡" class="headerlink" title="3.3 基于Ribbon实现负载均衡"></a>3.3 基于Ribbon实现负载均衡</h2><p><strong>Ribbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡</strong></p><blockquote><p>在RestTemplate 的生成方法上添加@LoadBalanced注解</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>服务调用的方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接使用微服务名字， 从nacos中获取服务地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"service-product"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">"http://"</span> + url + <span class="string">"/product/"</span> + pid, Product.class);</span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.createOrder(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-Ribbon支持的负载均衡策略"><a href="#3-4-Ribbon支持的负载均衡策略" class="headerlink" title="3.4 Ribbon支持的负载均衡策略"></a>3.4 Ribbon支持的负载均衡策略</h2><p>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 <code>com.netflix.loadbalancer.IRule</code> , 具体的负载策略如下图所示:</p><table><thead><tr><th>策略名</th><th>策略描述</th><th>实现说明</th></tr></thead><tbody><tr><td>BestAvailableRule</td><td>选择一个最小的并发请求的server</td><td>逐个考察Server，如果Server被 tripped了，则忽略<br>在选择其中 ActiveRequestsCount 最小的server</td></tr><tr><td>AvailabilityFilteringRule</td><td>过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后端server，并过滤掉那些高并发的的后端 server（active connections 超过配 置的阈值）</td><td>使用一个AvailabilityPredicate来包含过滤server的逻辑<br>其实就就是检查 status里记录的各个server的运行状态</td></tr><tr><td>WeightedResponseTimeRule</td><td>根据相应时间分配一个weight，相应时 间越长，weight越小，被选中的可能性 越低</td><td>一个后台线程定期的从status里面读取评价响应时间，为每个server计算 一个weight<br>Weight的计算也比较简单responsetime 减去每个server自己平均的responsetime是server的权重<br>当刚开始运行，没有形成statas 时，使用roubine策略选择server</td></tr><tr><td>RetryRule</td><td>对选定的负载均衡策略机上重试机制</td><td>在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</td></tr><tr><td>RoundRobinRule</td><td>轮询方式轮询选择 server</td><td>轮询index，选择index对应位置的 server</td></tr><tr><td>RandomRule</td><td>随机选择一个server</td><td>在index上随机，选择index对应位置 的server</td></tr><tr><td>ZoneAvoidanceRule</td><td>复合判断server所在 区域的性能和server的可用性选择server</td><td>使用ZoneAvoidancePredicate和 AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个 zone的运行性能是否可用，剔除不可用的zone（的所有server）， AvailabilityPredicate用于过滤掉连接数过多的Server</td></tr></tbody></table><blockquote><p>修改配置文件调整Ribbon负责策略</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service-product:</span> <span class="comment"># 调用的提供者的名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题</p></blockquote><p>由于使用了RestTemplate固定了地址的写法，存在一些问题</p><ol><li>代码可读性不好</li><li>编程风格不统一</li></ol><h2 id="3-5-基于Feign实现服务调用"><a href="#3-5-基于Feign实现服务调用" class="headerlink" title="3.5 基于Feign实现服务调用"></a>3.5 基于Feign实现服务调用</h2><p>Feign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务 一样简单，只需要创建一个接口并添加一个注解即可。</p><p>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负载均衡的效果。</p><blockquote><p>Feign使用的基本步骤</p></blockquote><ol><li>引入依赖</li><li>在主类上添加Fegin的注解@EnableFeignClients</li><li>创建一个service，并使用Fegin实现微服务调用</li></ol><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在主类上添加Fegin的注解@EnableFeignClients</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span><span class="comment">//开启Fegin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建一个service，并使用Fegin实现微服务调用</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient("service-product")</span><span class="comment">//指定nacos下的完整路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> {</span><br><span class="line"><span class="comment">//@FeignClient+@GetMapping 就是一个完整的请求路径 http://service-product/product/{pid}</span></span><br><span class="line">    <span class="meta">@GetMapping(value = "/product/{pid}")</span></span><br><span class="line">    Product <span class="title function_">findByPid</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.save(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="4-Sentinel–服务容错"><a href="#4-Sentinel–服务容错" class="headerlink" title="4. Sentinel–服务容错"></a>4. Sentinel–服务容错</h1><h2 id="4-1-高并发带来的问题"><a href="#4-1-高并发带来的问题" class="headerlink" title="4.1 高并发带来的问题"></a>4.1 高并发带来的问题</h2><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络原因或者自身的原因，服务并不能保证服务的100%可用</p><p>如果单个服务出现问题，调用这个服务就会出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。</p><h2 id="4-2-模拟高并发场景"><a href="#4-2-模拟高并发场景" class="headerlink" title="4.2 模拟高并发场景"></a>4.2 模拟高并发场景</h2><blockquote><p>服务端模拟网络延迟</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟调用商品微服务需要2s的时间</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了不产生大量的额垃圾数据,暂时不保存订单入库</span></span><br><span class="line">        <span class="comment">//orderService.save(order);</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试高并发</span></span><br><span class="line">    <span class="meta">@GetMapping("/order/message")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"测试高并发"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改配置文件tomcat的并发数</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">max-threads:</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用jmeter进行压力测试</p></blockquote><p>下载地址<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a></p><ol><li><p>修改配置，并启动软件</p><p>进入bin目录,修改jmeter.properties文件中的语言支持为language=zh_CN，然后点击jmeter.bat 启动软件</p></li><li><p>添加线程组</p></li><li><p>配置线程并发数</p><p>设置线程数20   循环100次</p></li><li><p>添加Http取样</p></li><li><p>配置取样，并启动测试</p></li></ol><blockquote><p>访问ｍessage方法观察效果</p></blockquote><p><strong>结论:</strong></p><p>此时会发现, 由于order方法囤积了大量请求, 导致ｍessage方法的访问出现了问题，这就是服务雪崩的雏形</p><h2 id="4-3-服务雪崩效应"><a href="#4-3-服务雪崩效应" class="headerlink" title="4.3 服务雪崩效应"></a>4.3 服务雪崩效应</h2><p>在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用</p><p>如果一个服务出现了问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等待，进而导致服务瘫痪</p><p>由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是 服务故障的<code>“雪崩效应”</code></p><p>雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽</p><p>我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是<code>＂雪落而不雪崩＂</code></p><h2 id="4-4-常见容错方案与组件"><a href="#4-4-常见容错方案与组件" class="headerlink" title="4.4 常见容错方案与组件"></a>4.4 常见容错方案与组件</h2><p>常见的容错思路有隔离、超时、限流、熔断、降级</p><blockquote><p>隔离</p></blockquote><p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。</p><p>常见的隔离方式有：线程池隔离和信号量隔离</p><blockquote><p>超时</p></blockquote><p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程</p><blockquote><p>限流</p></blockquote><p>限流就是限制系统的输入和输出流量已达到保护系统的目的</p><p>为了保证系统的稳固运行,一旦达到的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的</p><blockquote><p>熔断</p></blockquote><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用</p><p>这种牺牲局部，保全整体的措施就叫做熔断</p><p>服务熔断一般有三种状态：</p><ul><li><p>熔断关闭状态（Closed）</p><p>服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制</p></li><li><p>熔断开启状态（Open）</p><p>后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法</p></li><li><p>半熔断状态（Half-Open）</p><p>尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率</p><p>如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断关闭状态。</p></li></ul><blockquote><p>降级</p></blockquote><p>降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案</p><blockquote><p><strong>常见的容错组件</strong></p></blockquote><ul><li><p><strong>Hystrix</strong></p><p>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止 级联失败，从而提升系统的可用性与容错性</p></li><li><p><strong>Resilience4J</strong></p><p>Resilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推 荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x/2.x，而且监控也支持和 prometheus等多款主流产品进行整合</p></li><li><p><strong>Sentinel</strong></p><p>Sentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定</p></li></ul><blockquote><p>三个组件在各方面的对比</p></blockquote><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h2 id="4-5-Sentinel概念和功能"><a href="#4-5-Sentinel概念和功能" class="headerlink" title="4.5 Sentinel概念和功能"></a>4.5 Sentinel概念和功能</h2><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于<code>服务容错</code>的综合性解决方案</p><p>它以流量为切入点, 从<strong>流量控制、熔断降级、系统负载保护</strong>等多个维度来保护服务的稳定性</p><blockquote><p>流量控制</p></blockquote><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据</p><p>任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的</p><p>我们需要根据系统的处理能力对流量进行控制</p><p>Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状</p><blockquote><p>熔断降级</p></blockquote><p>当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障</p><p>Sentinel 对这个问题采取了两种手段</p><ul><li><p>通过并发线程数进行限制</p><p>Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响</p><p>当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积</p><p>当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝</p><p>堆积的线程完成任务后才开始继续接收请求</p></li><li><p>通过响应时间对资源进行降级</p><p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源</p><p>当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复</p></li></ul><blockquote><p>Sentinel 和 Hystrix 的区别</p><p>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务 但是在限制的手段上, 确采取了完全不一样的方法: </p><p>Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程 切换的成本。</p><p>Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制</p></blockquote><blockquote><p>系统负载保护</p></blockquote><p>Sentinel 同时提供系统维度的自适应保护能力</p><p>当系统负载较高的时候，如果还持续让请求进入可能会导致系统崩溃，无法响应</p><p>在集群环境下，会把本应这台机器承载的流量转发到其它的机器上去</p><p>如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><blockquote><p>Sentinel 具有以下特征</p></blockquote><ul><li><p><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景</p><p>例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用 应用等</p></li><li><p><strong>完备的实时监控</strong>：Sentinel 提供了实时的监控功能</p><p>通过控制台可以看到接入应用的单台机器秒级数据, 甚至 500 台以下规模的集群的汇总运行情况</p></li><li><p><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块</p><p>例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel</p></li><li><p><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口</p><p>您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等</p></li></ul><blockquote><p>Sentinel 分为两个部分</p></blockquote><ul><li><strong>核心库</strong>（Java 客户端）不依赖任何框架/库,能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持</li><li><strong>控制台</strong>（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等 应用容器。</li></ul><h2 id="4-6-微服务集成Sentinel"><a href="#4-6-微服务集成Sentinel" class="headerlink" title="4.6 微服务集成Sentinel"></a>4.6 微服务集成Sentinel</h2><blockquote><p>安装Sentinel控制台</p></blockquote><ol><li><p>下载jar包,解压到文件夹</p><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p></li><li><p>启动控制台</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)</span></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.7.0.jar</span><br></pre></td></tr></tbody></table></figure><blockquote><p>引入依赖即可</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改配置文件，加入控制台配置</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9999</span> <span class="comment">#跟控制台交流的端口,随意指定一个未使用的端口即可</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment"># 指定控制台服务的地址</span></span><br></pre></td></tr></tbody></table></figure><p>通过浏览器访问localhost:8080 进入控制台 ( 默认用户名密码是 sentinel/sentinel )</p><h2 id="4-7-Sentinel规则"><a href="#4-7-Sentinel规则" class="headerlink" title="4.7 Sentinel规则"></a>4.7 Sentinel规则</h2><h3 id="4-7-1-流控规则"><a href="#4-7-1-流控规则" class="headerlink" title="4.7.1 流控规则"></a>4.7.1 流控规则</h3><p>流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标</p><p>当达到指定的阈值时 对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性</p><p><strong>资源名</strong>：唯一名称，默认是请求路径，可自定义</p><p><strong>针对来源</strong>：指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制</p><p><strong>阈值类型/单机阈值</strong>：</p><ul><li>QPS（每秒请求数量）: 当调用该接口的QPS达到阈值的时候，进行限流</li><li>线程数：当调用该接口的线程数达到阈值的时候，进行限流</li></ul><p><strong>是否集群</strong>：暂不需要集群</p><blockquote><p>直接流控模式</p></blockquote><p>直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流</p><blockquote><p>关联流控模式</p></blockquote><p>关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流</p><blockquote><p>链路流控模式</p></blockquote><p>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流</p><p>它的功能有点类似于针对来源配置项，区别在于：<code>针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度更细</code></p><p>在ServiceImpl中对指定的方法加上@SentinelResource注解让Sentinel识别</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource("message")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">message</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"message"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多个requestMapping需要调用时单独可以设置入口requstMapping的规则</p><blockquote><p>配置流控效果</p></blockquote><ul><li><strong>快速失败（默认</strong>）: 直接失败，抛出异常，不做任何额外的处理，是最简单的效果</li><li>Warm Up：它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的 1/3，然后慢慢增长，直到最大阈值，适用于将突然增大的流量转换为缓步增长的场景</li><li><strong>排队等待</strong>：让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待； 它还会让设置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃</li></ul><h3 id="4-7-2-降级规则"><a href="#4-7-2-降级规则" class="headerlink" title="4.7.2 降级规则"></a>4.7.2 降级规则</h3><p>降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件：</p><blockquote><p>平均响应时间</p></blockquote><p>当资源的平均响应时间超过阈值（以 ms 为单位）之后，资源进入准降级状态</p><p>如果接下来 1s 内持续进入 5 个请求，它们的 RT都持续超过这个阈值</p><p>那么在接下的时间窗口 （以 s 为单位）之内，就会对这个方法进行服务降级</p><p><code>注意</code>: Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要 变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置。</p><blockquote><p>异常比例</p></blockquote><p>当资源的每秒异常总数占通过量的比值超过阈值之后，资源进入降级状态</p><p>即在接下的时间窗口（以 s 为单位）之内，对这个方法的调用都会自动地返回</p><p>异常比率的阈值范围是 [0.0, 1.0]</p><blockquote><p>异常数</p></blockquote><p>当资源近 1 分钟的异常数目超过阈值之后会进行服务降级</p><p>注意由于统计时间窗口是分钟级别的，若时间窗口小于 60s，则结束熔断状态后仍可能再进入熔断状态</p><h2 id="4-7-3-热点规则"><a href="#4-7-3-热点规则" class="headerlink" title="4.7.3 热点规则"></a>4.7.3 热点规则</h2><p>热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/order/message3")</span></span><br><span class="line"><span class="meta">@SentinelResource("message3")</span><span class="comment">//注意这里必须使用这个注解标识,否则热点规则不生效</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">message3</span><span class="params">(String name,Integer age)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"message3"</span>+name+age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数索引表示对第几个参数进行限流(从0开始)</p><p>在热点规则里面还可以额外限制参数规则</p><h3 id="4-7-4-授权规则"><a href="#4-7-4-授权规则" class="headerlink" title="4.7.4 授权规则"></a>4.7.4 授权规则</h3><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行</p><p>这时候可以使用 Sentinel 的来源访问控制的功能</p><p>来源访问控制根据资源的请求来源（origin）限制资源是否通过：</p><ul><li>若配置白名单，则只有请求来源位于白名单内时才可通过</li><li>若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过</li></ul><blockquote><p>流控应用</p></blockquote><p>其实这个位置要填写的是来源标识，Sentinel提供了 RequestOriginParser 接口来处理来源</p><p>只要Sentinel保护的接口资源被访问，Sentinel就会调用 RequestOriginParser 的实现类去解析访问来源</p><p>比如:</p><p>获取serviceName的信息，对其进行判定</p><p>如果选择黑名单，流控应用填上pc那么当传递参数里面有serviceName=pc时就无法访问</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestOriginParserDefinition</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> request.getParameter(<span class="string">"serviceName"</span>);</span><br><span class="line">        <span class="keyword">return</span> serviceName;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-7-5-系统规则"><a href="#4-7-5-系统规则" class="headerlink" title="4.7.5 系统规则"></a>4.7.5 系统规则</h3><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 <strong>Load、RT、入口 QPS 、CPU 使用率和线程数</strong>五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效</p><ul><li><p><strong>Load</strong>（仅对 Linux/Unix-like 机器生效）：当系统 load1 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护</p><p>系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般 是 CPU cores * 2.5</p></li><li><p><strong>RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒</p></li><li><p><strong>线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护</p></li><li><p><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护</p></li><li><p><strong>CPU使用率</strong>：当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护</p></li></ul><h2 id="4-8-自定义异常返回"><a href="#4-8-自定义异常返回" class="headerlink" title="4.8 自定义异常返回"></a>4.8 自定义异常返回</h2><p>实现UrlBlockHandle添加到容器即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandlerPage</span> <span class="keyword">implements</span> <span class="title class_">UrlBlockHandler</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BlockException 异常接口,包含Sentinel的五个异常</span></span><br><span class="line">    <span class="comment">// FlowException 限流异常</span></span><br><span class="line">    <span class="comment">// DegradeException 降级异常</span></span><br><span class="line">    <span class="comment">// ParamFlowException 参数限流异常</span></span><br><span class="line">    <span class="comment">// AuthorityException 授权异常</span></span><br><span class="line">    <span class="comment">// SystemBlockException 系统负载异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blocked</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        ResponseData responseData=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException){</span><br><span class="line">            responseData = <span class="keyword">new</span> <span class="title class_">ResponseData</span>(-<span class="number">1</span>, <span class="string">"接口被限流了"</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException){</span><br><span class="line">            responseData = <span class="keyword">new</span> <span class="title class_">ResponseData</span>(-<span class="number">2</span>, <span class="string">"接口被降级了"</span>);</span><br><span class="line">        }</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(responseData));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResponseData</span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-9-SentinelResource的使用"><a href="#4-9-SentinelResource的使用" class="headerlink" title="4.9  @SentinelResource的使用"></a>4.9  @SentinelResource的使用</h2><p>在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护</p><p>同时还能通过@SentinelResource来指定出现异常时的处理策略</p><p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>资源名称</td></tr><tr><td>entryType</td><td>entry类型，标记流量的方向，取值IN/OUT，默认是OUT</td></tr><tr><td><code>blockHandler</code></td><td>处理BlockException的函数名称,函数要求：<br>1. 必须是 public<br>2.返回类型 参数与原方法一致<br>3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法</td></tr><tr><td><code>blockHandlerClass</code></td><td>存放blockHandler的类,对应的处理函数必须static修饰</td></tr><tr><td><code>fallback</code></td><td>用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。函数要求：<br>1. 返回类型与原方法一致<br>2. 参数类型需要和原方法相匹配<br>3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法</td></tr><tr><td><code>fallbackClass</code></td><td>存放fallback的类。对应的处理函数必须static修饰</td></tr><tr><td>defaultFallback</td><td>用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常进行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函数要求：<br>1. 返回类型与原方法一致<br>2. 方法参数列表为空，或者有一个 Throwable 类型的参数<br>3. 默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法</td></tr><tr><td>exceptionsToIgnore</td><td>指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入 fallback逻辑，而是原样抛出</td></tr><tr><td>exceptionsToTrace</td><td>需要trace的异常</td></tr></tbody></table><blockquote><p>限流和降级后的处理方法定义在方法中</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl3</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">            value = "message",//定义资源名称</span></span><br><span class="line"><span class="meta">            blockHandler = "blockHandler",//指定发生BlockException时进入的方法</span></span><br><span class="line"><span class="meta">            fallback = "fallback"//指定发生Throwable时进入的方法</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">message</span><span class="params">()</span> {</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"message"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BlockException时进入的方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">blockHandler</span><span class="params">(BlockException ex)</span> {</span><br><span class="line">        log.error(<span class="string">"{}"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"接口被限流或者降级了..."</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Throwable时进入的方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fallback</span><span class="params">(Throwable throwable)</span> {</span><br><span class="line">        log.error(<span class="string">"{}"</span>, throwable);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"接口发生异常了..."</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>限流和降级方法外置到单独的类中</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl3</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">            value = "message",//定义资源名称</span></span><br><span class="line"><span class="meta">            blockHandlerClass = OrderServiceImpl3BlockHandlerClass.class,</span></span><br><span class="line"><span class="meta">            blockHandler = "blockHandler",//指定发生BlockException时进入的方法</span></span><br><span class="line"><span class="meta">            fallbackClass = OrderServiceImpl3FallbackClass.class,</span></span><br><span class="line"><span class="meta">            fallback = "fallback"//指定发生Throwable时进入的方法</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">message</span><span class="params">()</span> {</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"message"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl3BlockHandlerClass</span> {</span><br><span class="line">    <span class="comment">//注意这里必须使用static修饰方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">blockHandler</span><span class="params">(BlockException ex)</span> {</span><br><span class="line">        log.error(<span class="string">"{}"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"接口被限流或者降级了..."</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl3FallbackClass</span> {</span><br><span class="line">    <span class="comment">//注意这里必须使用static修饰方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">fallback</span><span class="params">(Throwable throwable)</span> {</span><br><span class="line">        log.error(<span class="string">"{}"</span>, throwable);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"接口发生异常了..."</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-10-Sentinel规则持久化"><a href="#4-10-Sentinel规则持久化" class="headerlink" title="4.10 Sentinel规则持久化"></a>4.10 Sentinel规则持久化</h2><p>通过Dashboard来为每个Sentinel客户端设置各种各样的规则</p><p>但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化</p><p>本地文件数据源会定时轮询文件的变更，读取规则</p><p>这样我们既可以在应用本地直接修改文件来更新规则，也可以通过 Sentinel 控制台推送规则</p><p>以本地文件数据源为例，推送过程如下图所示</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibabaSentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96.png" alt="SpringCloudalibabaSentinel规则持久化"></p><p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的 规则保存到本地的文件中</p><blockquote><p>1.编写处理类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规则持久化</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilePersistence</span> <span class="keyword">implements</span> <span class="title class_">InitFunc</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.application.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String application;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setApplication</span><span class="params">(String name)</span>{</span><br><span class="line">        application=name;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">String</span> <span class="variable">ruleDir</span> <span class="operator">=</span> System.getProperty(<span class="string">"user.home"</span>) + <span class="string">"/sentinel-rules/"</span> + application;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flowRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">"/flow-rule.json"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">degradeRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">"/degrade-rule.json"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">systemRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">"/system-rule.json"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authorityRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">"/authority-rule.json"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paramFlowRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">"/param-flow-rule.json"</span>;</span><br><span class="line">        <span class="built_in">this</span>.mkdirIfNotExits(ruleDir);</span><br><span class="line">        <span class="built_in">this</span>.createFileIfNotExits(flowRulePath);</span><br><span class="line">        <span class="built_in">this</span>.createFileIfNotExits(degradeRulePath);</span><br><span class="line">        <span class="built_in">this</span>.createFileIfNotExits(systemRulePath);</span><br><span class="line">        <span class="built_in">this</span>.createFileIfNotExits(authorityRulePath);</span><br><span class="line">        <span class="built_in">this</span>.createFileIfNotExits(paramFlowRulePath);</span><br><span class="line">        <span class="comment">// 流控规则</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleRDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                flowRulePath,</span><br><span class="line">                flowRuleListParser</span><br><span class="line">        );</span><br><span class="line">        FlowRuleManager.register2Property(flowRuleRDS.getProperty());</span><br><span class="line">        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                flowRulePath,</span><br><span class="line">                <span class="built_in">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);</span><br><span class="line">        <span class="comment">// 降级规则</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleRDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                degradeRulePath,</span><br><span class="line">                degradeRuleListParser</span><br><span class="line">        );</span><br><span class="line">        DegradeRuleManager.register2Property(degradeRuleRDS.getProperty());</span><br><span class="line">        WritableDataSource&lt;List&lt;DegradeRule&gt;&gt; degradeRuleWDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                degradeRulePath,</span><br><span class="line">                <span class="built_in">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerDegradeDataSource(degradeRuleWDS);</span><br><span class="line">        <span class="comment">// 系统规则</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; systemRuleRDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                systemRulePath,</span><br><span class="line">                systemRuleListParser</span><br><span class="line">        );</span><br><span class="line">        SystemRuleManager.register2Property(systemRuleRDS.getProperty());</span><br><span class="line">        WritableDataSource&lt;List&lt;SystemRule&gt;&gt; systemRuleWDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                systemRulePath,</span><br><span class="line">                <span class="built_in">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerSystemDataSource(systemRuleWDS);</span><br><span class="line">        <span class="comment">// 授权规则</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleRDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                authorityRulePath,</span><br><span class="line">                authorityRuleListParser</span><br><span class="line">        );</span><br><span class="line">        AuthorityRuleManager.register2Property(authorityRuleRDS.getProperty());</span><br><span class="line">        WritableDataSource&lt;List&lt;AuthorityRule&gt;&gt; authorityRuleWDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                authorityRulePath,</span><br><span class="line">                <span class="built_in">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerAuthorityDataSource(authorityRuleWDS);</span><br><span class="line">        <span class="comment">// 热点参数规则</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleRDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                paramFlowRulePath,</span><br><span class="line">                paramFlowRuleListParser</span><br><span class="line">        );</span><br><span class="line">        ParamFlowRuleManager.register2Property(paramFlowRuleRDS.getProperty());</span><br><span class="line">        WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; paramFlowRuleWDS = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                paramFlowRulePath,</span><br><span class="line">                <span class="built_in">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        ModifyParamFlowRulesCommandHandler.setWritableDataSource(paramFlowRuleWDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;FlowRule&gt;&gt; flowRuleListParser = source -&gt;</span><br><span class="line">            JSON.parseObject(</span><br><span class="line">                    source,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() {</span><br><span class="line">                    }</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleListParser = source</span><br><span class="line">            -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;DegradeRule&gt;&gt;() {</span><br><span class="line">            }</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;SystemRule&gt;&gt; systemRuleListParser = source -&gt;</span><br><span class="line">            JSON.parseObject(</span><br><span class="line">                    source,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;SystemRule&gt;&gt;() {</span><br><span class="line">                    }</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleListParser =</span><br><span class="line">            source -&gt; JSON.parseObject(</span><br><span class="line">                    source,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;AuthorityRule&gt;&gt;() {</span><br><span class="line">                    }</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleListParser =</span><br><span class="line">            source -&gt; JSON.parseObject(</span><br><span class="line">                    source,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;ParamFlowRule&gt;&gt;() {</span><br><span class="line">                    }</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mkdirIfNotExits</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) {</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createFileIfNotExits</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) {</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; String <span class="title function_">encodeJson</span><span class="params">(T t)</span> {</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>2.添加配置</p></blockquote><p>在resources下创建配置目录 META-INF/services ,然后添加文件 <code>com.alibaba.csp.sentinel.init.InitFunc</code></p><p>在文件中添加配置类的全路径</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cn.jyw.shop.order.config.FilePersistence</span><br></pre></td></tr></tbody></table></figure><h2 id="4-11-Feign整合Sentinel-容错类"><a href="#4-11-Feign整合Sentinel-容错类" class="headerlink" title="4.11 Feign整合Sentinel(容错类)"></a>4.11 Feign整合Sentinel(容错类)</h2><p>远程调用出现问题时使用的类</p><p>步骤:</p><ol><li>引入依赖</li><li>配置文件</li><li>创建容错类</li><li>指定容错类</li></ol><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sentinel客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置文件中开启Feign对Sentine的支持</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建容错类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容错类要求必须实现被容错的接口,并为每个方法实现容错方案</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceFallBack</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(Integer pid)</span> {</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        product.setPid(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>为被容器的接口指定容错类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value用于指定调用nacos下哪个微服务</span></span><br><span class="line"><span class="comment">//fallback用于指定容错类</span></span><br><span class="line"><span class="meta">@FeignClient(value = "service-product",fallback = ProductServiceFallBack.class)</span><span class="comment">//指定nacos下的完整路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> {</span><br><span class="line"><span class="comment">//@FeignClient+@GetMapping 就是一个完整的请求路径 http://service-product/product/{pid}</span></span><br><span class="line">    <span class="meta">@GetMapping(value = "/product/{pid}")</span></span><br><span class="line">    Product <span class="title function_">findByPid</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改controller</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/order/prod/{pid}")</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">    log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line">    <span class="comment">//加入判断</span></span><br><span class="line">    <span class="keyword">if</span> (product.getPid() == -<span class="number">1</span>) {</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setPname(<span class="string">"下单失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单(创建订单)</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setUid(<span class="number">1</span>);</span><br><span class="line">    order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">    order.setPid(pid);</span><br><span class="line">    order.setPname(product.getPname());</span><br><span class="line">    order.setPprice(product.getPprice());</span><br><span class="line">    order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    orderService.save(order);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>停止所有 shop-product 服务,重启 shop-order 服务,访问请求,观察容错效果</p><blockquote><p>容错工厂类</p><p>能获取容错时产生的异常</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容错类要求必须实现被容错的接口,并为每个方法实现容错方案</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceFallBack</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ProductService&gt; {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductService <span class="title function_">create</span><span class="params">(Throwable throwable)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductService</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(Integer pid)</span> {</span><br><span class="line">                throwable.printStackTrace();<span class="comment">//获取容错时产生的异常</span></span><br><span class="line">                <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">                product.setPid(-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对应的接口上的注解由fallback变成fallbackFactory</p><p><code>注意: fallback和fallbackFactory只能使用其中一种方式</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> SpringCloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudalibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudalibaba(一) 微服务介绍与案例创建</title>
      <link href="/javaee/spring/springcloudalibaba/1.wei-fu-wu-jie-shao-yu-an-li-chuang-jian/"/>
      <url>/javaee/spring/springcloudalibaba/1.wei-fu-wu-jie-shao-yu-an-li-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微服务介绍"><a href="#1-微服务介绍" class="headerlink" title="1. 微服务介绍"></a>1. 微服务介绍</h1><h2 id="1-1-系统架构演变"><a href="#1-1-系统架构演变" class="headerlink" title="1.1 系统架构演变"></a>1.1 系统架构演变</h2><table><thead><tr><th>架构类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>单体应用架构</td><td>1. 项目架构简单，小型项目的话， 开发成本低<br>2. 项目部署在一个节点上， 维护方便</td><td>1. 全部功能集成在一个工程中，对于大型项目来讲不易开发和维护<br>2. 项目模块之间紧密耦合，单点容错率低<br>3. 无法针对不同模块进行针对性优化和水平扩展</td></tr><tr><td>垂直应用架构</td><td>1. 系统拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平扩展<br>2. 一个系统的问题不会影响到其他系统，提高容错率</td><td>1. 系统之间相互独立， 无法进行相互调用<br>2. 系统之间相互独立， 会有重复的开发任务</td></tr><tr><td>分布式架构</td><td>抽取公共的功能为服务层，提高代码复用性</td><td>系统间耦合度变高，调用关系错综复杂，难以维护</td></tr><tr><td>SOA架构</td><td>使用注册中心解决了服务间调用关系的自动调节</td><td>1. 服务间会有依赖关系，一旦某个环节出错会影响较大( 服务雪崩 )<br>2. 服务关心复杂，运维、测试部署困难</td></tr><tr><td>微服务架构</td><td>1. 服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展<br>2. 微服务之间采用Restful等轻量级http协议相互调用</td><td>分布式系统开发的技术成本高（容错、分布式事务等）</td></tr></tbody></table><h2 id="1-2-微服务架构的常见问题"><a href="#1-2-微服务架构的常见问题" class="headerlink" title="1.2 微服务架构的常见问题"></a>1.2 微服务架构的常见问题</h2><ul><li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])</li><li>这么多小服务，他们之间如何通讯？(restful rpc)</li><li>这么多小服务，客户端怎么访问他们？(网关)</li><li>这么多小服务，一旦出现问题了，应该如何自处理？(容错)</li><li>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)</li></ul><h2 id="1-3-微服务架构的常见概念"><a href="#1-3-微服务架构的常见概念" class="headerlink" title="1.3 微服务架构的常见概念"></a>1.3 微服务架构的常见概念</h2><h3 id="1-3-1-服务治理"><a href="#1-3-1-服务治理" class="headerlink" title="1.3.1 服务治理"></a>1.3.1 服务治理</h3><blockquote><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现</p></blockquote><ul><li><p><strong>服务注册</strong>：服务实例将自身服务信息注册到注册中心</p></li><li><p><strong>服务发现</strong>：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提 供的服务</p></li><li><p><strong>服务剔除</strong>：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到</p></li></ul><h3 id="1-3-2-服务调用"><a href="#1-3-2-服务调用" class="headerlink" title="1.3.2 服务调用"></a>1.3.2 服务调用</h3><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于 HTTP的RESTful接口以及基于TCP的RPC协议</p><ul><li><p><strong>REST</strong>(Representational State Transfer)</p><p>这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议</p></li><li><p><strong>RPC</strong>（Remote Promote Call）</p><p>一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。</p></li></ul><blockquote><p>区别与联系</p></blockquote><table><thead><tr><th>比较项</th><th>RESTful</th><th>RPC</th></tr></thead><tbody><tr><td>通讯协议</td><td>HTTP</td><td>一般使用TCP</td></tr><tr><td>性能</td><td>略低</td><td>较高</td></tr><tr><td>灵活度</td><td>高</td><td>低</td></tr><tr><td>应用</td><td>微服务框架</td><td>SOA架构</td></tr></tbody></table><h3 id="1-3-3-服务网关"><a href="#1-3-3-服务网关" class="headerlink" title="1.3.3 服务网关"></a>1.3.3 服务网关</h3><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：</p><ul><li>客户端需要调用不同的url地址，增加难度</li><li>在一定的场景下，存在跨域请求的问题</li><li>每个微服务都需要进行单独的身份认证</li></ul><p>针对这些问题，API网关顺势而生。</p><p>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibaba%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.png" alt="SpringCloudalibaba服务网关"></p><h3 id="1-3-4-服务容错"><a href="#1-3-4-服务容错" class="headerlink" title="1.3.4 服务容错"></a>1.3.4 服务容错</h3><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。</p><p>我们没法预防雪崩效应的发生，只能尽可能去做好容错。</p><blockquote><p>服务容错的三个核心思想是</p></blockquote><ul><li>不被外界环境影响</li><li>不被上游请求压垮</li><li>不被下游响应拖垮</li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringCloudalibaba%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99.png" alt="SpringCloudalibaba服务容错"></p><h3 id="1-3-5-链路追踪"><a href="#1-3-5-链路追踪" class="headerlink" title="1.3.5 链路追踪"></a>1.3.5 链路追踪</h3><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，**<code>性能监控即链路追踪</code>**</p><h2 id="1-4-微服务架构的常见解决方案"><a href="#1-4-微服务架构的常见解决方案" class="headerlink" title="1.4 微服务架构的常见解决方案"></a>1.4 微服务架构的常见解决方案</h2><h3 id="1-4-1-ServiceComb"><a href="#1-4-1-ServiceComb" class="headerlink" title="1.4.1 ServiceComb"></a>1.4.1 ServiceComb</h3><p>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</p><h3 id="1-4-2-SpringCloud"><a href="#1-4-2-SpringCloud" class="headerlink" title="1.4.2 SpringCloud"></a>1.4.2 SpringCloud</h3><p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h3 id="1-4-3-SpringCloud-Alibaba"><a href="#1-4-3-SpringCloud-Alibaba" class="headerlink" title="1.4.3  SpringCloud Alibaba"></a>1.4.3  SpringCloud Alibaba</h3><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><h1 id="2-SpringCloud-Alibaba介绍"><a href="#2-SpringCloud-Alibaba介绍" class="headerlink" title="2. SpringCloud Alibaba介绍"></a>2. SpringCloud Alibaba介绍</h1><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h2 id="2-1-主要功能"><a href="#2-1-主要功能" class="headerlink" title="2.1  主要功能"></a>2.1  主要功能</h2><ul><li><p><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux， OpenFeign、RestTemplate、Spring Cloud Gateway， Zuul， Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修 改限流降级规则，还支持查看限流降级 Metrics 监控。</p></li><li><p><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</p></li><li><p><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</p></li><li><p><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</p></li><li><p><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</p></li><li><p><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p></li><li><p><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p>同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</p></li><li><p><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建 客户触达通道。</p></li></ul><h2 id="2-2-组件"><a href="#2-2-组件" class="headerlink" title="2.2 组件"></a>2.2 组件</h2><ul><li><strong>Sentinel</strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</li><li><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li><strong>RocketMQ</strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠 的消息发布与订阅服务。</li><li><strong>Dubbo</strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li><strong>Seata</strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li><strong>Alibaba Cloud ACM</strong>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心 产品</li><li><strong>Alibaba Cloud OSS</strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提 供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和 访问任意类型的数据</li><li><strong>Alibaba Cloud SchedulerX:</strong> 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精 准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。 Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速 搭建客户触达通道。</li></ul><h1 id="3-案例准备"><a href="#3-案例准备" class="headerlink" title="3. 案例准备"></a>3. 案例准备</h1><h2 id="3-1-技术选型"><a href="#3-1-技术选型" class="headerlink" title="3.1 技术选型"></a>3.1 技术选型</h2><p>maven：3.3.9</p><p>数据库：MySQL 5.7</p><p>持久层: SpingData Jpa</p><p>其他: SpringCloud Alibaba 技术栈</p><h2 id="3-2-模块设计"><a href="#3-2-模块设计" class="headerlink" title="3.2 模块设计"></a>3.2 模块设计</h2><p>springcloud-alibaba 父工程</p><p>shop-common 公共模块【实体类】</p><p>shop-user 用户微服务 【端口: 807x】</p><p>shop-product 商品微服务 【端口: 808x】</p><p>shop-order 订单微服务 【端口: 809x】</p><h2 id="3-3-创建父工程"><a href="#3-3-创建父工程" class="headerlink" title="3.3 创建父工程"></a>3.3 创建父工程</h2><blockquote><p>springcloud-alibaba 父工程</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF- 8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-cloud.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-cloud-alibaba.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-创建基础模块"><a href="#3-4-创建基础模块" class="headerlink" title="3.4 创建基础模块"></a>3.4 创建基础模块</h2><blockquote><p>shop-common 公共模块【实体类】</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.56<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>实体类</p></blockquote><p><code>注意</code>:本次使用jpa自动创建数据库，需要将实体包放在SpringBoot启动类之下，使带有@Entity的类被扫描。否则需要指定扫描实体包</p><ul><li>用户</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="meta">@Entity(name = "shop_user")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">//定义主键自增策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer uid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String telephone;<span class="comment">//手机号</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>商品</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="meta">@Entity(name = "shop_product")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> {</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String pname;<span class="comment">//商品名称</span></span><br><span class="line">    <span class="keyword">private</span> Double pprice;<span class="comment">//商品价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;<span class="comment">//库存</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>订单</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单</span></span><br><span class="line"><span class="meta">@Entity(name = "shop_order")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//表示属性是主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">//生成主键策略</span></span><br><span class="line">    <span class="keyword">private</span> Long oid;<span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Integer uid;<span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> Integer pid;<span class="comment">//商品id</span></span><br><span class="line">    <span class="keyword">private</span> String pname;<span class="comment">//商品名称</span></span><br><span class="line">    <span class="keyword">private</span> Double pprice;<span class="comment">//商品单价</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;<span class="comment">//购买数量</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="4-创建微服务"><a href="#4-创建微服务" class="headerlink" title="4. 创建微服务"></a>4. 创建微服务</h1><blockquote><p>步骤: </p></blockquote><ol><li>创建模块 导入依赖</li><li>创建SpringBoot主类</li><li>加入配置文件</li><li>创建必要的接口和实现类(controller service dao)</li></ol><h2 id="4-1-用户微服务"><a href="#4-1-用户微服务" class="headerlink" title="4.1 用户微服务"></a>4.1 用户微服务</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建SpringBoot主类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(UserApplication.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>加入配置文件 application.yml</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-user</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=true&amp;c3haracterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">hbm2ddl:</span></span><br><span class="line">          <span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-商品微服务"><a href="#4-2-商品微服务" class="headerlink" title="4.2 商品微服务"></a>4.2 商品微服务</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-product<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建SpringBoot主类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(ProductApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>加入配置文件 application.yml</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">hbm2ddl:</span></span><br><span class="line">          <span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建ProductDao接口</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductDao</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Product,Integer&gt; {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建ProductService接口和实现类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(Integer pid)</span> {</span><br><span class="line">        <span class="keyword">return</span> productDao.findById(pid).get();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建Controller</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span><span class="comment">//可以自动生成log对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/product/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(<span class="meta">@PathVariable</span> Integer pid)</span>{</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findByPid(pid);</span><br><span class="line">        log.info(<span class="string">"查询结果:"</span>+ JSON.toJSONString(product));</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>启动工程，等到数据库表创建完毕之后，加入测试数据</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO shop_product VALUE(NULL,'小米','1000','5000');</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,'华为','2000','5000');</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,'苹果','3000','5000');</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,'OPPO','4000','5000');</span><br></pre></td></tr></tbody></table></figure><p>最后通过浏览器访问服务即可</p><h2 id="4-3-订单微服务"><a href="#4-3-订单微服务" class="headerlink" title="4.3 订单微服务"></a>4.3 订单微服务</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-order<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>​    创建SpringBoot主类</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderApplication {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>加入配置文件 application.yml</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">hbm2ddl:</span></span><br><span class="line">          <span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建OrderDao接口</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order,Long&gt; {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建OrderService接口和实现类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Order order)</span> {</span><br><span class="line">        orderDao.save(order);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建RestTemplate 调用服务模板</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建Controller</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> {</span><br><span class="line"><span class="comment">//下单填写地址调用</span></span><br><span class="line">    <span class="meta">@RequestMapping("/order/prod/{pid}")</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">order</span><span class="params">(<span class="meta">@PathVariable("pid")</span> Integer pid)</span> {</span><br><span class="line">        log.info(<span class="string">"接收到{}号商品的下单请求,接下来调用商品微服务查询此商品信息"</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用商品微服务,查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span></span><br><span class="line">                restTemplate.getForObject(<span class="string">"http://localhost:8081/product/"</span> + pid, Product.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"查询到{}号商品的信息,内容是:{}"</span>, pid, JSON.toJSONString(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单(创建订单)</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">1</span>);</span><br><span class="line">        order.setUsername(<span class="string">"测试用户"</span>);</span><br><span class="line">        order.setPid(pid);</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        orderService.save(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"创建订单成功,订单信息为{}"</span>, JSON.toJSONString(order));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后启动工程,通过浏览器访问服务进行测试</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> SpringCloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudalibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot(二) 原理篇</title>
      <link href="/javaee/spring/springboot/springboot-er-yuan-li-pian/"/>
      <url>/javaee/spring/springboot/springboot-er-yuan-li-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-自动配置工作流程"><a href="#1-自动配置工作流程" class="headerlink" title="1. 自动配置工作流程"></a>1. 自动配置工作流程</h1><h2 id="1-1-bean的加载方式"><a href="#1-1-bean的加载方式" class="headerlink" title="1.1 bean的加载方式"></a>1.1 bean的加载方式</h2><ol><li>xml+&lt;bean&gt;(<strong><code>配置文件</code></strong>)</li><li>xml:context+注解（@Component+4个@Bean）(<strong><code>注解扫描</code></strong>)</li><li>配置类+扫描+注解（@Component+4个@Bean）(<strong><code>配置类</code></strong>)<ul><li>@Bean定义FactoryBean接口(<strong><code>可以在变成bean之前做点事</code></strong>)</li><li>@ImportResource(<strong><code>导入配置</code></strong>)</li><li>@Configuration注解的proxyBeanMethods属性(<strong><code>代理对象,默认多个</code></strong>)</li></ul></li><li>@Import导入bean的类(<strong><code>在配置类上注入class</code></strong>)<ul><li>@Import导入配置类(<strong><code>在配置类上注入class</code></strong>)</li></ul></li><li>AnnotationConfigApplicationContext调用register方法(<strong><code>容器创建之后注册bean</code></strong>)</li><li>@Import导入ImportSelector接口(<strong><code>选择 bean 的方式</code></strong>)</li><li>@Import导入ImportBeanDefinitionRegistrar接口(<strong><code>控制 bean 的相关属性</code></strong>)</li><li>@Import导入BeanDefinitionRegistryPostProcessor接口(<strong><code>bean的最终裁决</code></strong>)</li></ol><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">配置文件+<bean>标签</bean></button></li><li class="tab"><button type="button" data-href="#1-2">配置文件扫描+注解定义bean</button></li><li class="tab"><button type="button" data-href="#1-3">注解方式声明配置类</button></li><li class="tab"><button type="button" data-href="#1-4">使用Import注解注入bean</button></li><li class="tab"><button type="button" data-href="#1-5">编程形式注册bean</button></li><li class="tab"><button type="button" data-href="#1-6">导入实现了ImportSelector接口的类</button></li><li class="tab"><button type="button" data-href="#1-7">导入实现了ImportBeanDefinitionRegistrar接口的类</button></li><li class="tab"><button type="button" data-href="#1-8">BeanDefinitionRegistryPostProcessor接口的类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>最初级的bean的加载方式其实可以直击spring管控bean的核心思想，就是提供类名，然后spring就可以管理了</p><p>所以第一种方式就是给出bean的类名，至于内部嘛就是反射机制加载成class</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xml方式声明自己开发的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"Dog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--xml方式声明第三方开发的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationCOntext1.xml"</span>);</span><br><span class="line"><span class="comment">//        Object cat = ctx.getBean("cat");</span></span><br><span class="line"><span class="comment">//        System.out.println(cat);</span></span><br><span class="line"><span class="comment">//        Dog dog = ctx.getBean(Dog.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(dog);</span></span><br><span class="line">        String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) {</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>由于方式一种需要将spring管控的bean全部写在xml文件中，对于程序员来说非常不友好</p><p>所以就有了第二种方式。哪一个类要受到spring管控加载成bean，就在这个类的上面加一个注解，还可以顺带起一个bean的名字（id）。</p><p>这里可以使用的注解有@Component以及三个衍生注解@Service、@Controller、@Repository。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("tom")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于我们无法在第三方提供的技术源代码中去添加上述4个注解</p><p>因此当你需要加载第三方开发的bean的时候可以使用下列方式定义注解式的bean</p><p>@Bean定义在一个方法上方，当前方法的返回值就可以交给spring管控</p><p><code>记得这个方法所在的类一定要定义在@Component修饰的类中</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    "</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定扫描加载bean的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.bean,cn.jyw.config"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationCOntext2.xml"</span>);</span><br><span class="line">String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String name : names) {</span><br><span class="line">    System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>使用java类替换掉xml的配置</p><blockquote><p>定义一个类并使用@ComponentScan替代原始xml配置中的包扫描这个动作，其实功能基本相同</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan({"cn.jyw.bean","cn.jyw.config"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig3</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DogFactoryBean <span class="title function_">dog</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DogFactoryBean</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//注解类声明配置而不是使用配置文件    </span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig3.class);</span><br><span class="line">       String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line">       <span class="keyword">for</span> (String name : names) {</span><br><span class="line">           System.out.println(name);</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用FactroyBean接口</p></blockquote><p>造出来的bean并不是DogFactoryBean，而是Dog</p><p>可以在对象初始化前做一些事情，下例中的注释位置就是让你自己去<code>扩展</code>要做的其他事情</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Dog&gt; {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//.........</span></span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() {</span><br><span class="line">        <span class="keyword">return</span> Dog.class;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan({"cn.jyw.bean","cn.jyw.config"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig3</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DogFactoryBean <span class="title function_">dog</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DogFactoryBean</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注解格式导入XML格式配置的bean</p></blockquote><p>@ImportResource，在配置类上直接写上要被融合的xml配置文件名</p><p>就可以融合配置文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource("applicationContext1.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig32</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig32.class);</span><br><span class="line">       String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line">       <span class="keyword">for</span> (String name : names) {</span><br><span class="line">           System.out.println(name);</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>proxyBeanMethods属性</p></blockquote><p>​        前面的例子中用到了@Configuration这个注解，当我们使用AnnotationConfigApplicationContext加载配置类的时候，配置类可以不添加这个注解。但是这个注解有一个更加强大的功能，它可以保障配置类中使用方法创建的bean的唯一性。为@Configuration注解设置proxyBeanMethods属性值为true即可，由于此属性默认值为true，所以很少看见明确书写的，除非想放弃此功能。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig33</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        下面通过容器再调用上面的cat方法时，得到的就是同一个对象了。注意，必须使用spring容器对象调用此方法才有保持bean唯一性的特性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig33.class);</span><br><span class="line">    String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) {</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">    <span class="type">SpringConfig33</span> <span class="variable">springConfig33</span> <span class="operator">=</span> ctx.getBean(<span class="string">"springConfig33"</span>, SpringConfig33.class);</span><br><span class="line">    System.out.println(springConfig33.cat());</span><br><span class="line">    System.out.println(springConfig33.cat());</span><br><span class="line">    System.out.println(springConfig33.cat());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>使用@Import注解一种精准制导的加载方式</p><p>直接指定类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import({Dog.class,DbConfig.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig4</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig4.class);</span><br><span class="line">String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String name : names) {</span><br><span class="line">    System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p>前面介绍的加载bean的方式都是在容器启动阶段完成bean的加载，下面这种方式就比较特殊了，可以在容器初始化完成后手动加载bean。通过这种方式可以实现编程式控制bean的加载。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//此时不能用父类来接收</span></span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">      <span class="comment">//上下文容器对象已经初始化完毕后，手工加载bean</span></span><br><span class="line">      ctx.register(Mouse.class);</span><br><span class="line">      <span class="comment">//后加载的会覆盖前面加载的</span></span><br><span class="line">      ctx.registerBean(<span class="string">"tom"</span>, Cat.class,<span class="number">0</span>);</span><br><span class="line">      ctx.registerBean(<span class="string">"tom"</span>, Cat.class,<span class="number">1</span>);</span><br><span class="line">      ctx.registerBean(<span class="string">"tom"</span>, Cat.class,<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><blockquote><p>容器初始化过程中进行控制</p><p>一种控制bean加载的方式，或者说是选择bean的方式</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) {</span><br><span class="line">        <span class="comment">//各种条件的判定，判定完毕后，决定是否装载指定的bean</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> metadata.hasAnnotation(<span class="string">"org.springframework.context.annotation.Configuration"</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"cn.jyw.bean.Dog"</span>};</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"cn.jyw.bean.Cat"</span>};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(basePackages = "cn.jyw")</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig6</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig6.class);</span><br><span class="line">String[] names = ctx.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String name : names) {</span><br><span class="line">    System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><p>spring中定义了一个叫做BeanDefinition的东西，它才是控制bean初始化加载的核心</p><p>BeanDefinition接口中给出了若干种方法，可以控制bean的相关属性</p><p>说个最简单的，创建的对象是单例还是非单例，在BeanDefinition中定义了scope属性就可以控制这个</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> {</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> </span><br><span class="line">            BeanDefinitionBuilder.rootBeanDefinition(BookServiceImpl2.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"bookService"</span>,beanDefinition);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-8"><p>BeanDefinition意思是bean定义，Registry注册的意思，Post后置，Processor处理器，全称bean定义后处理器</p><p>对容器中的bean进行最终裁定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> </span><br><span class="line">            BeanDefinitionBuilder.rootBeanDefinition(BookServiceImpl4.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"bookService"</span>,beanDefinition);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后面加载的会覆盖前面加载的bean, 但是继承BeanDefinitionRegistryPostProcessor的类有最终裁定权</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import({BookServiceImpl1.class, MyPostProcessor.class, MyRegistrar2.class, MyRegistrar.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig8</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig8.class);</span><br><span class="line"><span class="type">BookSerivce</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(<span class="string">"bookService"</span>, BookSerivce.class);</span><br><span class="line">bookService.check();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>总结</p></blockquote><ol><li>bean的定义由前期xml配置逐步演化成注解配置，本质是一样的，都是通过反射机制加载类名后创建对象，对象就是spring管控的bean</li><li>@Import注解可以指定加载某一个类作为spring管控的bean，如果被加载的类中还具有@Bean相关的定义，会被一同加载</li><li>spring开放出了若干种可编程控制的bean的初始化方式，通过分支语句由固定的加载bean转成了可以选择bean是否加载或者选择加载哪一种bean</li></ol><h2 id="1-2-bean的加载控制"><a href="#1-2-bean的加载控制" class="headerlink" title="1.2 bean的加载控制"></a>1.2 bean的加载控制</h2><p>企业级开发中不可能在spring容器中进行bean的饱和式加载的</p><p>应该是用什么技术就加载什么bean</p><p>所以在spring容器中，通过判定是否加载了某个类来控制某些bean的加载是一种常见操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.itheima.bean.Mouse"</span>);</span><br><span class="line">            <span class="keyword">if</span>(clazz != <span class="literal">null</span>) {<span class="comment">//如果对应于的类存在就加载bean</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"com.itheima.bean.Cat"</span>};</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注解方式</p></blockquote><p>比如可以直接写(.class) 也可以写(name=”全路径名”)</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@ConditionalOnClass</td><td>有某个class才加载bean</td></tr><tr><td>@ConditionalOnMissingClass</td><td>没有哪个class才加载bean</td></tr><tr><td>@ConditionalOnBean</td><td>有这个bean才加载</td></tr><tr><td>@ConditionalOnWebApplication</td><td>是Web环境才加载</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>不是Web环境才加载</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写2个就是2个条件都成立，写多个就是多个条件都成立</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = "cn.jyw.bean.Wolf")</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass("cn.jyw.bean.Mouse")</span></span><br><span class="line"><span class="keyword">public</span> Cat <span class="title function_">tom</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//判定是否加载了指定名称的bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(name="jerry")</span></span><br><span class="line"><span class="keyword">public</span> Cat <span class="title function_">tom</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//判定当前是否加载了mysql的驱动类，如果加载了，就创建一个Druid的数据源对象</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name="com.mysql.jdbc.Driver")</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-bean的依赖属性配置管理"><a href="#1-3-bean的依赖属性配置管理" class="headerlink" title="1.3 bean的依赖属性配置管理"></a>1.3 bean的依赖属性配置管理</h2><p>bean在运行的时候，实现对应的业务逻辑时有可能需要开发者提供一些设置值，有就是属性了</p><p>如果使用构造方法将参数固定，灵活性不足</p><p>需要灵活的配置</p><blockquote><p>先定义配置文件</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cartoon:</span></span><br><span class="line">  <span class="attr">cat:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"图多盖洛"</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">mouse:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"泰菲"</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>定义一个封装属性的专用类，加载配置属性，读取对应前缀相关的属性值</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "cartoon")</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//需要get和set</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartoonProperties</span> {</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在使用的位置注入对应的配置即可</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(CartoonProperties.class)</span><span class="comment">//在使用本类时指定某类加载配置文件</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartoonCatAndMouse</span>{</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CartoonProperties cartoonProperties;</span><br><span class="line"><span class="comment">//如果配置文件指定了就使用配置文件,没有就使用设定的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartoonCatAndMouse</span><span class="params">(CartoonProperties cartoonProperties)</span>{</span><br><span class="line">        <span class="built_in">this</span>.cartoonProperties = cartoonProperties;</span><br><span class="line">        cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.setName(cartoonProperties.getCat()!=<span class="literal">null</span> &amp;&amp; StringUtils.hasText(cartoonProperties.getCat().getName()) ? cartoonProperties.getCat().getName() : <span class="string">"tom"</span>);</span><br><span class="line">        cat.setAge(cartoonProperties.getCat()!=<span class="literal">null</span> &amp;&amp; cartoonProperties.getCat().getAge()!=<span class="literal">null</span> ? cartoonProperties.getCat().getAge() : <span class="number">3</span>);</span><br><span class="line">        mouse = <span class="keyword">new</span> <span class="title class_">Mouse</span>();</span><br><span class="line">        mouse.setName(cartoonProperties.getMouse()!=<span class="literal">null</span> &amp;&amp; StringUtils.hasText(cartoonProperties.getMouse().getName()) ? cartoonProperties.getMouse().getName() : <span class="string">"jerry"</span>);</span><br><span class="line">        mouse.setAge(cartoonProperties.getMouse()!=<span class="literal">null</span> &amp;&amp; cartoonProperties.getMouse().getAge()!=<span class="literal">null</span> ? cartoonProperties.getMouse().getAge() : <span class="number">4</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(cat.getAge()+<span class="string">"岁的"</span>+cat.getName()+<span class="string">"和"</span>+mouse.getAge()+<span class="string">"岁的"</span>+mouse.getName()+<span class="string">"打起来了"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>建议在业务类上使用@EnableConfigurationProperties声明bean，这样在不使用这个类的时候，也不会无故加载专用的属性配置类CartoonProperties，减少spring管控的资源数量。</p><blockquote><p>执行</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(App.class);</span><br><span class="line">        <span class="type">CartoonCatAndMouse</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(CartoonCatAndMouse.class);</span><br><span class="line">        bean.play();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>bean的运行如果需要外部设置值，建议将设置值封装成专用的属性类* * * * Properties</li><li>设置属性类加载指定前缀的配置信息</li><li>在需要使用属性类的位置通过注解@EnableConfigurationProperties加载bean，而不要直接在属性配置类上定义bean，减少资源加载的数量，因需加载而不要饱和式加载。</li></ol><h2 id="1-4-自动配置原理"><a href="#1-4-自动配置原理" class="headerlink" title="1.4 自动配置原理"></a>1.4 自动配置原理</h2><p>整体过程分为2个阶段</p><blockquote><p><strong>阶段一：准备阶段</strong></p></blockquote><ol><li><p>收集Spring开发者的编程习惯，整理开发过程使用的常用技术列表——&gt;(<code>技术集A</code>)</p></li><li><p>收集常用技术(技术集A)的使用参数，整理开发过程中每个技术的常用设置列表——&gt;(<code>设置集B</code>)</p></li></ol><blockquote><p><strong>阶段二：加载阶段</strong></p></blockquote><ol start="3"><li>初始化SpringBoot基础环境，加载用户自定义的bean和导入的其他坐标，形成<code>初始化环境</code></li><li>将<code>技术集A</code>包含的所有技术都定义出来，在Spring/SpringBoot启动时默认全部加载</li><li>将<code>技术集A</code>中具有使用条件的技术约定出来，设置成按条件加载，由开发者决定是否使用该技术（与初始化环境比对 ）</li><li>将<code>设置集B</code>作为默认配置加载（约定大于配置），减少开发者配置工作量</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定配置文件地点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SpringFactoriesLoader</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORIES_RESOURCE_LOCATION</span> <span class="operator">=</span> <span class="string">"META-INF/spring.factories"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>先开发若干种技术的标准实现</li><li>SpringBoot启动时加载所有的技术实现对应的自动配置类</li><li>检测每个配置类的加载条件是否满足并进行对应的初始化</li><li>切记是先加载所有的外部资源，然后根据外部资源进行条件比对</li></ol><h2 id="1-5-变更自动配置"><a href="#1-5-变更自动配置" class="headerlink" title="1.5 变更自动配置"></a>1.5 变更自动配置</h2><blockquote><p>自定义自动配置（META-INF/spring.factories） 自动bean化</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">cn.jyw.bean.CartoonCatAndMouse</span><br></pre></td></tr></tbody></table></figure><blockquote><p>控制SpringBoot内置自动配置类加载</p></blockquote><ol><li>配置文件控制</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">autoconfigure:</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#排除配置类</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>注解控制</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration(excludeName = "",exclude = {})</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>变更自动配置：去除tomcat自动配置（条件激活），添加jetty自动配置（条件激活）</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖，匹配自动配置条件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Jetty起步依赖，匹配自动配置条件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>通过配置文件exclude属性排除自动配置</li><li>通过注解@EnableAutoConfiguration属性排除自动配置项</li><li>启用自动配置只需要满足自动配置条件即可</li><li>可以根据需求开发自定义自动配置项</li></ol><h1 id="2-自定义starter开发"><a href="#2-自定义starter开发" class="headerlink" title="2. 自定义starter开发"></a>2. 自定义starter开发</h1><h2 id="2-1-基本实现"><a href="#2-1-基本实现" class="headerlink" title="2.1 基本实现"></a>2.1 基本实现</h2><blockquote><p>业务功能</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpCountService</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Integer&gt; ipCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//当前的request对象的注入工作由使用当前starter的工程提供自动装配</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest httpServletRequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//每次调用当前操作，就记录当前访问的IP，然后累加访问次数</span></span><br><span class="line">        <span class="comment">//1.获取当前操作的IP地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> httpServletRequest.getRemoteAddr();</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------"</span>+ip);</span><br><span class="line">        <span class="comment">//2.根据IP地址从Map取值，并递增</span></span><br><span class="line">        ipCountMap.merge(ip, <span class="number">1</span>, Integer::sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>自动配置类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IpCountService <span class="title function_">ipCountService</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCountService</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置</p></blockquote><p>在resources/META-INF/spring.factories中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">cn.jyw.autoconfig.IpAutoConfiguration</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用</p></blockquote><p>clean和install之后导入pom依赖即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IpCountService ipCountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/test/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> {</span><br><span class="line">        ipCountService.count();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-开启定时任务功能"><a href="#2-2-开启定时任务功能" class="headerlink" title="2.2 开启定时任务功能"></a>2.2 开启定时任务功能</h2><blockquote><p>在自动配置上加上springBoot的内置定时任务</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IpCountService <span class="title function_">ipCountService</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCountService</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在Service中开始任务</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = "0/5 * * * * ?")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"         IP访问监控"</span>);</span><br><span class="line">    System.out.println(<span class="string">"+-----ip-address-----+--num--+"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : ipCountMap.entrySet()) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        System.out.printf(<span class="string">"|%18s  |%5d  |%n"</span>,key,value);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"+--------------------+-------+"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-启用配置文件"><a href="#2-3-启用配置文件" class="headerlink" title="2.3 启用配置文件"></a>2.3 启用配置文件</h2><blockquote><p>定义配置文件</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义成bean</span></span><br><span class="line"><span class="comment">//因为使用EnableConfigurationProperties会导致注入的bean为全类名冲突</span></span><br><span class="line"><span class="comment">//定时器配置时会用到配置属性</span></span><br><span class="line"><span class="meta">@Component("ipProperties")</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "tools.ip")</span><span class="comment">//记载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpProperties</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志显示周期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">cycle</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否周期内重置数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">cycleReset</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志输出模式  detail：详细模式  simple：极简模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">model</span> <span class="operator">=</span> LogModel.DETAIL.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LogModel</span>{</span><br><span class="line">        DETAIL(<span class="string">"detail"</span>),</span><br><span class="line">        SIMPLE(<span class="string">"simple"</span>);</span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line">        LogModel(String value) {</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCycle</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> cycle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCycle</span><span class="params">(Long cycle)</span> {</span><br><span class="line">        <span class="built_in">this</span>.cycle = cycle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getCycleReset</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> cycleReset;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCycleReset</span><span class="params">(Boolean cycleReset)</span> {</span><br><span class="line">        <span class="built_in">this</span>.cycleReset = cycleReset;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModel</span><span class="params">(String model)</span> {</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>自动配置类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器</span></span><br><span class="line"><span class="comment">//如果不设定定时器可以用下面注解自动配置文件</span></span><br><span class="line"><span class="comment">//@EnableConfigurationProperties(IpProperties.class)</span></span><br><span class="line"><span class="meta">@Import(IpProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IpCountService <span class="title function_">ipCountService</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCountService</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>服务类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IpProperties ipProperties;</span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/5 * * * * ?")</span></span><br><span class="line"><span class="comment">//有就用配置,没有就设定5,但会有bug</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/${tools.ip.cycle:5} * * * * ?")</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = "0/#{ipProperties.cycle} * * * * ?")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ipProperties.getModel().equals(IpProperties.LogModel.DETAIL.getValue())){</span><br><span class="line">            System.out.println(<span class="string">"         IP访问监控"</span>);</span><br><span class="line">            System.out.println(<span class="string">"+-----ip-address-----+--num--+"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : ipCountMap.entrySet()) {</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                System.out.println(String.format(<span class="string">"|%18s  |%5d  |"</span>,key,value));</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"+--------------------+-------+"</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(ipProperties.getModel().equals(IpProperties.LogModel.SIMPLE.getValue())){</span><br><span class="line">            System.out.println(<span class="string">"     IP访问监控"</span>);</span><br><span class="line">            System.out.println(<span class="string">"+-----ip-address-----+"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String key: ipCountMap.keySet()) {</span><br><span class="line">                System.out.println(String.format(<span class="string">"|%18s  |"</span>,key));</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"+--------------------+"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ipProperties.getCycleReset()){</span><br><span class="line">            ipCountMap.clear();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置</p></blockquote><p>定义在要使用的项目中</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tools:</span></span><br><span class="line"> <span class="attr">ip:</span></span><br><span class="line">   <span class="attr">cycle:</span> <span class="number">10</span></span><br><span class="line">   <span class="attr">cycleReset:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">model:</span> <span class="string">"detail"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-配置拦截器"><a href="#2-4-配置拦截器" class="headerlink" title="2.4 配置拦截器"></a>2.4 配置拦截器</h2><blockquote><p>定义拦截器</p><p>在启用start时能对每次访问都执行</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpCountInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IpCountService ipCountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        ipCountService.count();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>开启拦截器</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//单例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> {</span><br><span class="line">        <span class="comment">//添加拦截器,设置拦截路径</span></span><br><span class="line">        registry.addInterceptor(ipCountInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>    <span class="comment">//拦截器实例化</span></span><br><span class="line">    <span class="keyword">public</span> IpCountInterceptor <span class="title function_">ipCountInterceptor</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCountInterceptor</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-辅助功能开发-yml输入提示"><a href="#2-5-辅助功能开发-yml输入提示" class="headerlink" title="2.5 辅助功能开发(yml输入提示)"></a>2.5 辅助功能开发(yml输入提示)</h2><blockquote><p>导入配置处理器坐标</p><p>这个坐标的作用是根据注释生成文件,但部分数据调整仍需手动</p></blockquote><p>获得spring-configuration-metadata.json文件后放入yml同级即可</p><p>上线需要删掉此坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>进行自定义提示功能开发</p></blockquote><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"groups"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"tools.ip"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"cn.itcast.properties.IpProperties"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"sourceType"</span><span class="punctuation">:</span> <span class="string">"cn.itcast.properties.IpProperties"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"properties"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"tools.ip.cycle"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"java.lang.Long"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"日志显示周期"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"sourceType"</span><span class="punctuation">:</span> <span class="string">"cn.itcast.properties.IpProperties"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"defaultValue"</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"tools.ip.cycle-reset"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"java.lang.Boolean"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"是否周期内重置数据"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"sourceType"</span><span class="punctuation">:</span> <span class="string">"cn.itcast.properties.IpProperties"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"defaultValue"</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"tools.ip.model"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"java.lang.String"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"日志输出模式  detail：详细模式  simple：极简模式"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"sourceType"</span><span class="punctuation">:</span> <span class="string">"cn.itcast.properties.IpProperties"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"hints"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"tools.ip.model"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"values"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"detail"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"详细模式."</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"simple"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"极简模式."</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="3-springboot程序启动流程"><a href="#3-springboot程序启动流程" class="headerlink" title="3. springboot程序启动流程"></a>3. springboot程序启动流程</h1><blockquote><p>SpringBoot启动流程</p></blockquote><ol><li>初始化各种属性，加载成对象<ul><li>读取环境属性（Environment）</li><li>系统配置（spring.factories）</li><li>参数（Arguments、application.properties）</li></ul></li><li>创建Spring容器对象ApplicationContext，加载各种配置</li><li>在容器创建前，通过监听器机制，应对不同阶段加载数据、更新数据的需求</li><li>容器初始化过程中追加各种功能，例如统计时间、输出日志等</li></ol><blockquote><p>监听器类型</p></blockquote><ol><li>在应用运行但未进行任何处理时，将发送 ApplicationStartingEvent。</li><li>当Environment被使用，且上下文创建之前，将发送 ApplicationEnvironmentPreparedEvent。</li><li>在开始刷新之前，bean定义被加载之后发送 ApplicationPreparedEvent。</li><li>在上下文刷新之后且所有的应用和命令行运行器被调用之前发送 ApplicationStartedEvent。</li><li>在应用程序和命令行运行器被调用之后，将发出 ApplicationReadyEvent，用于通知应用已经准备处理请求。</li><li>启动时发生异常，将发送 ApplicationFailedEvent。</li></ol><blockquote><p>源码分析</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Springboot30StartupApplication【10】-&gt;SpringApplication.run(Springboot30StartupApplication.class,</span> <span class="string">args);</span></span><br><span class="line">    <span class="string">SpringApplication【1332】-&gt;return</span> <span class="string">run(new</span> <span class="string">Class&lt;?&gt;[]</span> { <span class="string">primarySource</span> }<span class="string">,</span> <span class="string">args);</span></span><br><span class="line">        <span class="string">SpringApplication【1343】-&gt;return</span> <span class="string">new</span> <span class="string">SpringApplication(primarySources).run(args);</span></span><br><span class="line">            <span class="string">SpringApplication【1343】-&gt;SpringApplication(primarySources)</span></span><br><span class="line">            <span class="comment"># 加载各种配置信息，初始化各种配置对象</span></span><br><span class="line">                <span class="string">SpringApplication【266】-&gt;this(null,</span> <span class="string">primarySources);</span></span><br><span class="line">                    <span class="string">SpringApplication【280】-&gt;public</span> <span class="string">SpringApplication(ResourceLoader</span> <span class="string">resourceLoader,</span> <span class="string">Class&lt;?&gt;...</span> <span class="string">primarySources)</span></span><br><span class="line">                        <span class="string">SpringApplication【281】-&gt;this.resourceLoader</span> <span class="string">=</span> <span class="string">resourceLoader;</span></span><br><span class="line">                        <span class="comment"># 初始化资源加载器</span></span><br><span class="line">                        <span class="string">SpringApplication【283】-&gt;this.primarySources</span> <span class="string">=</span> <span class="string">new</span> <span class="string">LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span></span><br><span class="line">                        <span class="comment"># 初始化配置类的类名信息（格式转换）</span></span><br><span class="line">                        <span class="string">SpringApplication【284】-&gt;this.webApplicationType</span> <span class="string">=</span> <span class="string">WebApplicationType.deduceFromClasspath();</span></span><br><span class="line">                        <span class="comment"># 确认当前容器加载的类型</span></span><br><span class="line">                        <span class="string">SpringApplication【285】-&gt;this.bootstrapRegistryInitializers</span> <span class="string">=</span> <span class="string">getBootstrapRegistryInitializersFromSpringFactories();</span></span><br><span class="line">                        <span class="comment"># 获取系统配置引导信息</span></span><br><span class="line">                        <span class="string">SpringApplication【286】-&gt;setInitializers((Collection)</span> <span class="string">getSpringFactoriesInstances(ApplicationContextInitializer.class));</span></span><br><span class="line">                        <span class="comment"># 获取ApplicationContextInitializer.class对应的实例</span></span><br><span class="line">                        <span class="string">SpringApplication【287】-&gt;setListeners((Collection)</span> <span class="string">getSpringFactoriesInstances(ApplicationListener.class));</span></span><br><span class="line">                        <span class="comment"># 初始化监听器，对初始化过程及运行过程进行干预</span></span><br><span class="line">                        <span class="string">SpringApplication【288】-&gt;this.mainApplicationClass</span> <span class="string">=</span> <span class="string">deduceMainApplicationClass();</span></span><br><span class="line">                        <span class="comment"># 初始化了引导类类名信息，备用</span></span><br><span class="line">            <span class="string">SpringApplication【1343】-&gt;new</span> <span class="string">SpringApplication(primarySources).run(args)</span></span><br><span class="line">            <span class="comment"># 初始化容器，得到ApplicationContext对象</span></span><br><span class="line">                <span class="string">SpringApplication【323】-&gt;StopWatch</span> <span class="string">stopWatch</span> <span class="string">=</span> <span class="string">new</span> <span class="string">StopWatch();</span></span><br><span class="line">                <span class="comment"># 设置计时器</span></span><br><span class="line">                <span class="string">SpringApplication【324】-&gt;stopWatch.start();</span></span><br><span class="line">                <span class="comment"># 计时开始</span></span><br><span class="line">                <span class="string">SpringApplication【325】-&gt;DefaultBootstrapContext</span> <span class="string">bootstrapContext</span> <span class="string">=</span> <span class="string">createBootstrapContext();</span></span><br><span class="line">                <span class="comment"># 系统引导信息对应的上下文对象</span></span><br><span class="line">                <span class="string">SpringApplication【327】-&gt;configureHeadlessProperty();</span></span><br><span class="line">                <span class="comment"># 模拟输入输出信号，避免出现因缺少外设导致的信号传输失败，进而引发错误（模拟显示器，键盘，鼠标...）</span></span><br><span class="line">                    <span class="string">java.awt.headless=true</span></span><br><span class="line">                <span class="string">SpringApplication【328】-&gt;SpringApplicationRunListeners</span> <span class="string">listeners</span> <span class="string">=</span> <span class="string">getRunListeners(args);</span></span><br><span class="line">                <span class="comment"># 获取当前注册的所有监听器</span></span><br><span class="line">                <span class="string">SpringApplication【329】-&gt;listeners.starting(bootstrapContext,</span> <span class="string">this.mainApplicationClass);</span></span><br><span class="line">                <span class="comment"># 监听器执行了对应的操作步骤</span></span><br><span class="line">                <span class="string">SpringApplication【331】-&gt;ApplicationArguments</span> <span class="string">applicationArguments</span> <span class="string">=</span> <span class="string">new</span> <span class="string">DefaultApplicationArguments(args);</span></span><br><span class="line">                <span class="comment"># 获取参数</span></span><br><span class="line">                <span class="string">SpringApplication【333】-&gt;ConfigurableEnvironment</span> <span class="string">environment</span> <span class="string">=</span> <span class="string">prepareEnvironment(listeners,</span> <span class="string">bootstrapContext,</span> <span class="string">applicationArguments);</span></span><br><span class="line">                <span class="comment"># 将前期读取的数据加载成了一个环境对象，用来描述信息</span></span><br><span class="line">                <span class="string">SpringApplication【333】-&gt;configureIgnoreBeanInfo(environment);</span></span><br><span class="line">                <span class="comment"># 做了一个配置，备用</span></span><br><span class="line">                <span class="string">SpringApplication【334】-&gt;Banner</span> <span class="string">printedBanner</span> <span class="string">=</span> <span class="string">printBanner(environment);</span></span><br><span class="line">                <span class="comment"># 初始化logo</span></span><br><span class="line">                <span class="string">SpringApplication【335】-&gt;context</span> <span class="string">=</span> <span class="string">createApplicationContext();</span></span><br><span class="line">                <span class="comment"># 创建容器对象，根据前期配置的容器类型进行判定并创建</span></span><br><span class="line">                <span class="string">SpringApplication【363】-&gt;context.setApplicationStartup(this.applicationStartup);</span></span><br><span class="line">                <span class="comment"># 设置启动模式</span></span><br><span class="line">                <span class="string">SpringApplication【337】-&gt;prepareContext(bootstrapContext,</span> <span class="string">context,</span> <span class="string">environment,</span> <span class="string">listeners,</span> <span class="string">applicationArguments,</span> <span class="string">printedBanner);</span></span><br><span class="line">                <span class="comment"># 对容器进行设置，参数来源于前期的设定</span></span><br><span class="line">                <span class="string">SpringApplication【338】-&gt;refreshContext(context);</span></span><br><span class="line">                <span class="comment"># 刷新容器环境</span></span><br><span class="line">                <span class="string">SpringApplication【339】-&gt;afterRefresh(context,</span> <span class="string">applicationArguments);</span></span><br><span class="line">                <span class="comment"># 刷新完毕后做后处理</span></span><br><span class="line">                <span class="string">SpringApplication【340】-&gt;stopWatch.stop();</span></span><br><span class="line">                <span class="comment"># 计时结束</span></span><br><span class="line">                <span class="string">SpringApplication【341】-&gt;if</span> <span class="string">(this.logStartupInfo)</span> {</span><br><span class="line">                <span class="comment"># 判定是否记录启动时间的日志</span></span><br><span class="line">                <span class="string">SpringApplication【342】-&gt;</span>    <span class="string">new</span> <span class="string">StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog()</span>, <span class="string">stopWatch);</span></span><br><span class="line">                <span class="comment"># 创建日志对应的对象，输出日志信息，包含启动时间</span></span><br><span class="line">                <span class="string">SpringApplication【344】-&gt;listeners.started(context);</span></span><br><span class="line">                <span class="comment"># 监听器执行了对应的操作步骤</span></span><br><span class="line">                <span class="string">SpringApplication【345】-&gt;callRunners(context</span>, <span class="string">applicationArguments);</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="string">SpringApplication【353】-&gt;listeners.running(context);</span></span><br><span class="line">                <span class="comment"># 监听器执行了对应的操作步骤</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/javase/gao-ji-ji-zhu/zhu-jie/"/>
      <url>/javase/gao-ji-ji-zhu/zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注解概述"><a href="#1-注解概述" class="headerlink" title="1. 注解概述"></a>1. 注解概述</h1><blockquote><p>注解的概述</p></blockquote><ul><li>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</li><li>Java 语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注。</li></ul><blockquote><p>注解的作用</p></blockquote><ul><li>对Java中类、方法、成员变量做标记，然后进行特殊处理，至于到底做何种处理由业务需求来决定。</li></ul><p>例如：JUnit框架中，标记了注解@Test的方法就可以被当成测试方法执行，而没有标记的就不能当成测试方法执行。</p><h1 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2. 自定义注解"></a>2. 自定义注解</h1><blockquote><p>格式</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 {</span><br><span class="line">    <span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值 ;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyBook {</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    String[] authors();</span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>特殊属性</p></blockquote><p>value属性，如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写!!</p><p>但是如果有多个属性, 且多个属性没有默认值，那么value名称是不能省略的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book {</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>; <span class="comment">// 特殊属性</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> ;</span><br><span class="line">    <span class="comment">//double price() default 9.9;//有默认值也可以省略 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Book(value = "/delete")</span></span><br><span class="line"><span class="comment">// @Book("/delete")</span></span><br></pre></td></tr></tbody></table></figure><h1 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3. 元注解"></a>3. 元注解</h1><p>元注解：就是注解注解的注解</p><p><strong>元注解有两个：</strong></p><p> <strong>@Target</strong>: 约束自定义注解可以标记的范围</p><p> <strong>@Retention</strong>：用来约束自定义注解的存活范围</p><blockquote><p>@Target中可使用的值定义在ElementType枚举类中，常用值如下</p></blockquote><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>TYPE</td><td>类，接口</td></tr><tr><td>FIELD</td><td>成员变量</td></tr><tr><td>METHOD</td><td>成员方法</td></tr><tr><td>PARAMETER</td><td>方法参数</td></tr><tr><td>CONSTRUCTOR</td><td>构造器</td></tr><tr><td>LOCAL_VARIABLE</td><td>局部变量</td></tr></tbody></table><blockquote><p>@Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下</p></blockquote><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SOURCE</td><td>注解只作用在源码阶段，生成的字节码文件中不存在</td></tr><tr><td>CLASS</td><td>注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.</td></tr><tr><td>RUNTIME</td><td>注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.METHOD,ElementType.FIELD})</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 一直活着，在运行阶段这个注解也不消失</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="4-注解解析"><a href="#4-注解解析" class="headerlink" title="4. 注解解析"></a>4. 注解解析</h1><p>注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容。</p><blockquote><p><strong>与注解解析相关的接口</strong></p></blockquote><ul><li>Annotation: 注解的顶级接口，注解都是Annotation类型的对象</li><li>AnnotatedElement:该接口定义了与注解解析相关的解析方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Annotation[]  getDeclaredAnnotations()</td><td>获得当前对象上使用的所有注解，返回注解数组</td></tr><tr><td>T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</td><td>根据注解类型获得对应注解对象</td></tr><tr><td>boolean isAnnotationPresent(Class&lt;Annotation&gt; annotationClass)</td><td>判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false</td></tr></tbody></table><p>所有的类成分Class, Method , Field , Constructor，都实现了AnnotatedElement接口他们都拥有解析注解的能力</p><blockquote><p><strong>解析注解的技巧</strong></p></blockquote><ul><li>注解在哪个成分上，我们就先拿哪个成分对象。</li><li>比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解</li><li>比如注解作用在类上，则要该类的Class对象，再来拿上面的注解</li><li>比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bookk {</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    String[] author();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   目标：完成注解的解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationDemo3</span> {</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">// a.先得到类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> BookStore.class;</span><br><span class="line">        <span class="comment">// b.判断这个类上面是否存在这个注解</span></span><br><span class="line">        <span class="keyword">if</span>(c.isAnnotationPresent(Bookk.class)){</span><br><span class="line">            <span class="comment">//c.直接获取该注解对象</span></span><br><span class="line">            <span class="type">Bookk</span> <span class="variable">book</span> <span class="operator">=</span> (Bookk) c.getDeclaredAnnotation(Bookk.class);</span><br><span class="line">            System.out.println(book.value());</span><br><span class="line">            System.out.println(book.price());</span><br><span class="line">            System.out.println(Arrays.toString(book.author()));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseMethod</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException {</span><br><span class="line">        <span class="comment">// a.先得到类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> BookStore.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// b.判断这个类上面是否存在这个注解</span></span><br><span class="line">        <span class="keyword">if</span>(m.isAnnotationPresent(Bookk.class)){</span><br><span class="line">            <span class="comment">//c.直接获取该注解对象</span></span><br><span class="line">            <span class="type">Bookk</span> <span class="variable">book</span> <span class="operator">=</span> (Bookk) m.getDeclaredAnnotation(Bookk.class);</span><br><span class="line">            System.out.println(book.value());</span><br><span class="line">            System.out.println(book.price());</span><br><span class="line">            System.out.println(Arrays.toString(book.author()));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bookk(value = "《class上注解》", price = 99.9, author = {"a", "b"})</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookStore</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bookk(value = "《test方法上注解》", price = 399.9, author = {"1", "2"})</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
          <category> 高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> JavaSE高级技术 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/javase/gao-ji-ji-zhu/fan-she/"/>
      <url>/javase/gao-ji-ji-zhu/fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="1-反射概述"><a href="#1-反射概述" class="headerlink" title="1 反射概述"></a>1 反射概述</h1><blockquote><p>基本概述</p></blockquote><ol><li><p>反射是指对于任何一个Class类，在”运行的时候”都可以直接得到这个类全部成分。</p></li><li><p>在运行时,可以直接得到这个类的构造器对象：Constructor</p></li><li><p>在运行时,可以直接得到这个类的成员变量对象：Field</p></li><li><p>在运行时,可以直接得到这个类的成员方法对象：Method</p></li><li><p>这种运行时动态获取类信息以及动态调用类中成分的能力称为Java语言的反射机制。</p></li></ol><blockquote><p>反射的关键</p></blockquote><p><strong>反射的第一步都是先得到编译后的Class类对象，然后就可以<code>得到Class的全部成分</code></strong></p><blockquote><p>反射的作用</p></blockquote><ol><li><strong>可以在运行时得到一个类的全部成分然后操作。</strong></li><li><strong>可以破坏封装性。（很突出）</strong></li><li><strong>也可以破坏泛型的约束性。（很突出）</strong></li><li><strong>更重要的用途是适合：做Java高级框架</strong></li><li><strong>基本上主流框架都会基于反射设计一些通用技术功能。</strong></li></ol><h1 id="2-反射获取类对象"><a href="#2-反射获取类对象" class="headerlink" title="2. 反射获取类对象"></a>2. 反射获取类对象</h1><ul><li><p>方式一：Class c1 = <strong>Class.forName(“全类名”)</strong></p></li><li><p>方式二：Class c2 =<strong>类名.class</strong></p></li><li><p>方式三：Class c3 = <strong>对象.getClass();</strong></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   目标：反射的第一步：获取Class对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">// 1、Class类中的一个静态方法：forName(全限名：包名 + 类名)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">"cn.jyw.demo.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、对象.getClass() 获取对象对应类的Class对象。</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-反射获取构造器对象"><a href="#3-反射获取构造器对象" class="headerlink" title="3. 反射获取构造器对象"></a>3. 反射获取构造器对象</h1><h2 id="3-1-使用反射技术获取构造器对象并使用"><a href="#3-1-使用反射技术获取构造器对象并使用" class="headerlink" title="3.1 使用反射技术获取构造器对象并使用"></a>3.1 <strong>使用反射技术获取构造器对象并使用</strong></h2><ol><li><strong>获得class对象</strong></li><li><strong>获得Constructor对象</strong></li><li><strong>创建对象</strong></li></ol><h2 id="3-2-Class类中用于获取构造器的方法"><a href="#3-2-Class类中用于获取构造器的方法" class="headerlink" title="3.2 Class类中用于获取构造器的方法"></a>3.2 Class类中用于获取构造器的方法</h2><table><thead><tr><th align="left">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">Constructor&lt;?&gt;[] getConstructors()</td><td align="center">返回所有构造器对象的数组（只能拿public的）</td></tr><tr><td align="left"><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td><td align="center">返回所有构造器对象的数组，存在就能拿到</td></tr><tr><td align="left">Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)</td><td align="center">返回单个构造器对象（只能拿public的）</td></tr><tr><td align="left"><code>Constructor\&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code></td><td align="center">返回单个构造器对象，存在就能拿到</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. getConstructors:</span></span><br><span class="line"><span class="comment">// 获取全部的构造器：只能获取public修饰的构造器。</span></span><br><span class="line"><span class="comment">// Constructor[] getConstructors()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructors</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">// a.第一步：获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.提取类中的全部的构造器对象(这里只能拿public修饰)</span></span><br><span class="line">    Constructor[] constructors = c.getConstructors();</span><br><span class="line">    <span class="comment">// c.遍历构造器</span></span><br><span class="line">    <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">        System.out.println(constructor.getName() + <span class="string">"===&gt;"</span> + constructor.getParameterCount());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.getDeclaredConstructors():</span></span><br><span class="line"><span class="comment">// 获取全部的构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredConstructors</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">// a.第一步：获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.提取类中的全部的构造器对象</span></span><br><span class="line">    Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">    <span class="comment">// c.遍历构造器</span></span><br><span class="line">    <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">        System.out.println(constructor.getName() + <span class="string">"===&gt;"</span> + constructor.getParameterCount());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.getConstructor(Class... parameterTypes)</span></span><br><span class="line"><span class="comment">// 获取某个构造器：只能拿public修饰的某个构造器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.第一步：获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.定位单个构造器对象 (按照参数定位无参数构造器 只能拿public修饰的某个构造器)</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getConstructor();</span><br><span class="line">    System.out.println(cons.getName() + <span class="string">"===&gt;"</span> + cons.getParameterCount());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.getConstructor(Class... parameterTypes)</span></span><br><span class="line"><span class="comment">// 获取某个构造器：只要你敢写，这里就能拿到，无所谓权限是否可及。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.第一步：获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.定位单个构造器对象 (按照参数定位无参数构造器)</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor();</span><br><span class="line">    System.out.println(cons.getName() + <span class="string">"===&gt;"</span> + cons.getParameterCount());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c.定位某个有参构造器</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">cons1</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">    System.out.println(cons1.getName() + <span class="string">"===&gt;"</span> + cons1.getParameterCount());</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-Constructor类中用于创建对象的方法"><a href="#3-3-Constructor类中用于创建对象的方法" class="headerlink" title="3.3 Constructor类中用于创建对象的方法"></a>3.3 <strong>Constructor类中用于创建对象的方法</strong></h2><ol><li>可以通过定位类的构造器对象。</li><li>如果构造器对象没有访问权限可以通过：void setAccessible(true)打开权限</li><li>构造器可以通过T newInstance(Object… initargs)调用自己，传入参数！</li></ol><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>T newInstance(Object… initargs)</td><td>根据指定的构造器创建对象</td></tr><tr><td>public void setAccessible(boolean flag)</td><td>设置为true,表示取消访问检查，进行暴力反射</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.调用构造器得到一个类的对象返回。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.第一步：获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.定位单个构造器对象 (按照参数定位无参数构造器)</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor();</span><br><span class="line">    System.out.println(cons.getName() + <span class="string">"===&gt;"</span> + cons.getParameterCount());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遇到了私有的构造器，可以暴力反射</span></span><br><span class="line">    cons.setAccessible(<span class="literal">true</span>); <span class="comment">// 权限被打开</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) cons.newInstance();</span><br><span class="line">    System.out.println(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c.定位某个有参构造器</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">cons1</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">    System.out.println(cons1.getName() + <span class="string">"===&gt;"</span> + cons1.getParameterCount());</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) cons1.newInstance(<span class="string">"孙悟空"</span>, <span class="number">1000</span>);</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h2><ol><li>利用反射技术获取构造器对象的方式</li></ol><ul><li><strong>getDeclaredConstructors()</strong></li><li><strong>getDeclaredConstructor (Class&lt;?&gt;…parameterTypes)</strong></li></ul><ol start="2"><li>反射得到的构造器可以做什么？</li></ol><ul><li><p><strong>依然是创建对象的</strong></p><ul><li><strong>public newInstance(Object… initargs)</strong></li></ul></li><li><p><strong>如果是非public的构造器，需要打开权限（暴力反射），然后再创建对象</strong></p><ul><li><strong>setAccessible(boolean)</strong></li><li><strong>反射可以破坏封装性，私有的也可以执行了。</strong></li></ul></li></ul><h1 id="4-反射获取成员变量对象"><a href="#4-反射获取成员变量对象" class="headerlink" title="4. 反射获取成员变量对象"></a>4. 反射获取成员变量对象</h1><h2 id="4-1-使用反射技术获取成员变量对象并使用"><a href="#4-1-使用反射技术获取成员变量对象并使用" class="headerlink" title="4.1 使用反射技术获取成员变量对象并使用"></a>4.1 <strong>使用反射技术获取成员变量对象并使用</strong></h2><ol><li><strong>获得class对象</strong></li><li><strong>获得Field对象</strong></li><li><strong>赋值或者获取值</strong></li></ol><h2 id="4-2-Class类中用于获取成员变量的方法"><a href="#4-2-Class类中用于获取成员变量的方法" class="headerlink" title="4.2 Class类中用于获取成员变量的方法"></a>4.2 <strong>Class类中用于获取成员变量的方法</strong></h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有成员变量对象的数组（只能拿public的）</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组，存在就能拿到</td></tr><tr><td>Field getField(String name)</td><td>返回单个成员变量对象（只能拿public的）</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象，存在就能拿到</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.获取全部的成员变量。</span></span><br><span class="line"><span class="comment"> * Field[] getDeclaredFields();</span></span><br><span class="line"><span class="comment"> *  获得所有的成员变量对应的Field对象，只要申明了就可以得到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredFields</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">// a.定位Class对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.定位全部成员变量</span></span><br><span class="line">    Field[] fields = c.getDeclaredFields();</span><br><span class="line">    <span class="comment">// c.遍历一下</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">        System.out.println(field.getName() + <span class="string">"==&gt;"</span> + field.getType());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    2.获取某个成员变量对象 Field getDeclaredField(String name);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredField</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.定位Class对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.根据名称定位某个成员变量</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">    System.out.println(f.getName() +<span class="string">"===&gt;"</span> + f.getType());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-Field类中用于取值、赋值的方法"><a href="#4-3-Field类中用于取值、赋值的方法" class="headerlink" title="4.3 Field类中用于取值、赋值的方法"></a>4.3 <strong>Field类中用于取值、赋值的方法</strong></h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj, Object value)：</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值。</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setField</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.反射第一步，获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">// b.提取某个成员变量</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">ageF</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    ageF.setAccessible(<span class="literal">true</span>); <span class="comment">// 暴力打开权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// c.赋值</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    ageF.set(s , <span class="number">18</span>);  <span class="comment">// s.setAge(18);</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d、取值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> (<span class="type">int</span>) ageF.get(s);</span><br><span class="line">    System.out.println(age);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h2><ol><li>利用反射技术获取成员变量的方式</li></ol><ul><li><strong>getDeclaredFields()</strong></li><li><strong>getDeclaredField(String name)</strong></li></ul><p>2.反射得到成员变量可以做什么？</p><ul><li><p><strong>依然是在某个对象中取值和赋值。</strong></p><ul><li><strong>void set(Object obj, Object value)</strong></li><li><strong>Object get(Object obj)</strong></li></ul></li><li><p><strong>如果某成员变量是非public的，需要打开权限（暴力反射），然后再取值、赋值</strong></p><ul><li><strong>setAccessible(boolean)</strong></li></ul></li></ul><h1 id="5-反射获取方法对象"><a href="#5-反射获取方法对象" class="headerlink" title="5. 反射获取方法对象"></a>5. 反射获取方法对象</h1><h2 id="5-1-使用反射技术获取方法对象并使用"><a href="#5-1-使用反射技术获取方法对象并使用" class="headerlink" title="5.1 使用反射技术获取方法对象并使用"></a>5.1 <strong>使用反射技术获取方法对象并使用</strong></h2><ol><li>获得class对象</li><li>获得Method对象</li><li>运行方法</li></ol><h2 id="5-2-Class类中用于获取成员方法的方法"><a href="#5-2-Class类中用于获取成员方法的方法" class="headerlink" title="5.2 Class类中用于获取成员方法的方法"></a>5.2 Class类中用于获取成员方法的方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有成员方法对象的数组（只能拿public的）</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，存在就能拿到</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象（只能拿public的）</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象，存在就能拿到</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.获得类中的所有成员方法对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclaredMethods</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">// a.获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Dog.class;</span><br><span class="line">    <span class="comment">// b.提取全部方法；包括私有的</span></span><br><span class="line">    Method[] methods = c.getDeclaredMethods();</span><br><span class="line">    <span class="comment">// c.遍历全部方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">        System.out.println(method.getName() +<span class="string">" 返回值类型："</span> + method.getReturnType() + <span class="string">" 参数个数："</span> + method.getParameterCount());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-Method类中用于触发执行的方法"><a href="#5-3-Method类中用于触发执行的方法" class="headerlink" title="5.3 Method类中用于触发执行的方法"></a>5.3 Method类中用于触发执行的方法</h2><p><strong>Object invoke(Object obj, Object… args)</strong></p><p>运行方法</p><p>参数一：用obj对象调用该方法<br>参数二：调用方法的传递的参数（如果没有就不写）<br>返回值：方法的返回值（如果没有就不写）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2. 获取某个方法对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDeclardMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// a.获取类对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Dog.class;</span><br><span class="line">    <span class="comment">// b.提取单个方法对象</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">"eat"</span>);</span><br><span class="line">    <span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">"eat"</span>, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力打开权限了</span></span><br><span class="line">    m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    m2.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c.触发方法的执行</span></span><br><span class="line">    <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    <span class="comment">// 注意：方法如果是没有结果回来的，那么返回的是null.</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> m.invoke(d);</span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result2</span> <span class="operator">=</span> m2.invoke(d, <span class="string">"骨头"</span>);</span><br><span class="line">    System.out.println(result2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h2><ol><li>利用反射技术获取成员方法对象的方式</li></ol><p><strong>获取类中成员方法对象</strong></p><p><strong>getDeclaredMethods()</strong></p><p><strong>getDeclaredMethod (String name, Class&lt;?&gt;… parameterTypes)</strong> </p><ol start="2"><li>反射得到成员方法可以做什么？</li></ol><p><strong>依然是在某个对象中触发该方法执行。</strong></p><p><strong>Object invoke(Object obj, Object… args)</strong></p><p><strong>如果某成员方法是非public的，需要打开权限（暴力反射），然后再触发执行</strong></p><p><strong>setAccessible(boolean)</strong></p><h1 id="6-反射的作用-绕过编译阶段为集合添加数据"><a href="#6-反射的作用-绕过编译阶段为集合添加数据" class="headerlink" title="6. 反射的作用-绕过编译阶段为集合添加数据"></a>6. 反射的作用-绕过编译阶段为集合添加数据</h1><blockquote><p>反射是作用在运行时的技术，此时集合的泛型将不能产生约束了，此时是可以<code>为集合存入其他任意类型的元素</code></p></blockquote><p>泛型只是在编译阶段可以约束集合只能操作某种数据类型，在编译成Class文件进入运行阶段的时候，其真实类型都是ArrayList了，泛型相当于被擦除了</p><ul><li><code>编译成Class文件进入运行阶段</code>的时候，<code>泛型会自动擦除</code></li><li>反射是作用在运行时的技术，此时不存在泛型了</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 需求：反射实现泛型擦除后，加入其他类型的元素</span></span><br><span class="line">    ArrayList&lt;String&gt; lists1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Integer&gt; lists2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    System.out.println(lists1.getClass());</span><br><span class="line">    System.out.println(lists2.getClass());</span><br><span class="line"></span><br><span class="line">    System.out.println(lists1.getClass() ==  lists2.getClass());  <span class="comment">// ArrayList.class</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">    ArrayList&lt;Integer&gt; lists3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    lists3.add(<span class="number">23</span>);</span><br><span class="line">    lists3.add(<span class="number">22</span>);</span><br><span class="line">    <span class="comment">// lists3.add("黑马");</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> lists3.getClass(); <span class="comment">// ArrayList.class  ===&gt; public boolean add(E e)</span></span><br><span class="line">    <span class="comment">// 定位c类中的add方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">add</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rs</span> <span class="operator">=</span> (<span class="type">boolean</span>) add.invoke(lists3, <span class="string">"黑马"</span>);</span><br><span class="line">    System.out.println(rs);</span><br><span class="line"></span><br><span class="line">    System.out.println(lists3);</span><br><span class="line"></span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">list4</span> <span class="operator">=</span> lists3;</span><br><span class="line">    list4.add(<span class="string">"白马"</span>);</span><br><span class="line">    list4.add(<span class="literal">false</span>);</span><br><span class="line">    System.out.println(lists3);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="7-反射的作用-通用框架的底层原理"><a href="#7-反射的作用-通用框架的底层原理" class="headerlink" title="7. 反射的作用-通用框架的底层原理"></a>7. 反射的作用-通用框架的底层原理</h1><blockquote><p>需求</p></blockquote><p>给你任意一个对象，在不清楚对象字段的情况可以，可以把对象的字段名称和对应值存储到文件中去</p><blockquote><p>分析</p></blockquote><ol><li>定义一个方法，可以接收任意类的对象。</li><li>每次收到一个对象后，需要解析这个对象的全部成员变量名称。</li><li>这个对象可能是任意的，那么怎么样才可以知道这个对象的全部成员变量名称呢？</li><li>使用反射获取对象的Class类对象，然后获取全部成员变量信息。</li><li>遍历成员变量信息，然后提取本成员变量在对象中的具体值</li><li>存入成员变量名称和值到文件中去即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
          <category> 高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> JavaSE高级技术 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST风格</title>
      <link href="/javaee/spring/utils/rest-feng-ge/"/>
      <url>/javaee/spring/utils/rest-feng-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="1-REST简介"><a href="#1-REST简介" class="headerlink" title="1. REST简介"></a>1. REST简介</h1><blockquote><p><code>REST</code>(Representational State Transfer)，表现形式转换</p></blockquote><ul><li><p>传统风格资源描述形式</p><p>localhost/user/<code>get</code>ById?id=1</p><p>localhost/user/<code>save</code>User</p></li><li><p>REST风格描述形式</p><p>localhost/users/1</p><p>localhost/user/users</p></li></ul><blockquote><p>优点</p></blockquote><ol><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操纵</li><li>书写简化</li></ol><h1 id="2-约定方式"><a href="#2-约定方式" class="headerlink" title="2. 约定方式"></a>2. 约定方式</h1><table><thead><tr><th align="center">请求路径</th><th align="center">行为动作</th><th align="center">请求方法</th></tr></thead><tbody><tr><td align="center">localhost/users</td><td align="center">查询全部用户信息</td><td align="center">GET（查询）</td></tr><tr><td align="center">localhost/users/1</td><td align="center">查询指定用户信息</td><td align="center">GET（查询）</td></tr><tr><td align="center">localhost/users</td><td align="center">添加用户信息</td><td align="center">POST（新增/保存）</td></tr><tr><td align="center">localhost/users</td><td align="center">修改用户信息</td><td align="center">PUT（修改/更新）</td></tr><tr><td align="center">localhost/users/1</td><td align="center">删除用户信息</td><td align="center">DELETE（删除）</td></tr></tbody></table><blockquote><p>注意事项</p></blockquote><p>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范</p><p>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源<br>例如: users、 books、accounts….</p><h1 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3. 入门案例"></a>3. 入门案例</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@RessponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user save...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user save'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@RessponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user delete...."</span> + id)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user delete'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@RessponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user update...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user update'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@RessponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user getById...."</span> + id)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user getById'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@RessponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"user getAll...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user getAll'}"</span></span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>@RequestBody    @RequestParam    @PathVariable</p></blockquote><p>区别</p><ul><li>@RequestBody用于接收json数据</li><li>@RequestParam用于接收url地址传参或表单传参</li><li>@PathVariable用于接收路径参数，使用（参数名称）描述路径参数</li></ul><p>应用</p><ul><li>后期开发中，发送请求参数超过1个时，以json格式为主, @RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量， 通常用于传递id值</li></ul><h1 id="4-快速开发"><a href="#4-快速开发" class="headerlink" title="4. 快速开发"></a>4. 快速开发</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user save...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user save'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user delete...."</span> + id)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user delete'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user update...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user update'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        System.out.println(<span class="string">"user getById...."</span> + id)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user getById'}"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"user getAll...."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"{'mpdule':'user getAll'}"</span></span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>名称: @GetMapping @PostMapping @PutMapping @DeleteMapping</li><li>类型:方法注解</li><li>位置:基于SpringMVC的RESTful1开发控制器方法定义上方</li><li>作用:设置当前控制器方法请求访问路径与请求动作,每种对应-个请求动作, 例如@GetMapping对应GET请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot(一) 基础篇</title>
      <link href="/javaee/spring/springboot/springboot-yi-ji-chu-pian/"/>
      <url>/javaee/spring/springboot/springboot-yi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h1><h2 id="1-1-基础配置"><a href="#1-1-基础配置" class="headerlink" title="1.1 基础配置"></a>1.1 基础配置</h2><blockquote><p>最简SpringBoot程序所包含的基础文件</p></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml文件</button></li><li class="tab"><button type="button" data-href="#1-2">Application类</button></li><li class="tab"><button type="button" data-href="#1-3">测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo04<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Application</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(Demo01Application.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> {</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"springboot is running..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot is running..."</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Spring程序与SpringBoot程序对比</p></blockquote><table><thead><tr><th align="center">类/配置文件</th><th align="center">Spring</th><th align="center">SpringBoot</th></tr></thead><tbody><tr><td align="center">pom文件中的坐标</td><td align="center">手工添加</td><td align="center">勾选添加</td></tr><tr><td align="center">web3.0配置类</td><td align="center">手工制作</td><td align="center">无</td></tr><tr><td align="center">Spring/SpringMVC配置类</td><td align="center">手工制作</td><td align="center">无</td></tr><tr><td align="center">控制器</td><td align="center">手工制作</td><td align="center">手工制作</td></tr></tbody></table><h2 id="1-2-SpringBoot简介"><a href="#1-2-SpringBoot简介" class="headerlink" title="1.2 SpringBoot简介"></a>1.2 SpringBoot简介</h2><p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来<code>简化</code>Spring应用的<code>初始搭建</code>以及<code>开发过程</code></p><ul><li>Spring程序缺点 <ul><li>依赖设置繁琐</li><li>配置繁琐</li></ul></li><li>SpringBoot程序优点<ul><li>起步依赖（简化依赖配置）</li><li>自动配置（简化常用工程相关配置）</li><li>辅助功能（内置服务器，……）</li></ul></li></ul><h2 id="1-3-入门pom解析"><a href="#1-3-入门pom解析" class="headerlink" title="1.3 入门pom解析"></a>1.3 入门pom解析</h2><blockquote><p>parent</p></blockquote><ol><li>开发SpringBoot程序要继承spring-boot-starter-parent</li><li>spring-boot-starter-parent中定义了若干个依赖管理</li><li>继承parent模块可以<code>避免</code>多个依赖使用相同技术时出现<code>依赖</code>版本冲突</li><li>继承parent的形式也可以采用引入依赖的形式实现效果</li></ol><blockquote><p>starter</p></blockquote><p>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</p><ol><li>开发SpringBoot程序需要导入坐标时通常导入对应的starter</li><li>每个不同的starter根据功能不同，通常包含多个依赖坐标</li><li>使用starter可以实现快速配置的效果，达到简化配置的目的</li></ol><p>对比parent</p><ul><li>starter<ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</li></ul></li><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li><li>spring-boot-starter-parent各版本间存在着诸多坐标版本不同</li></ul></li><li>实际开发</li><li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V</li><li>如发生坐标错误，再指定Version（要小心版本冲突）</li></ul><blockquote><p>引导类</p></blockquote><ul><li>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</li><li>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</li></ul><blockquote><p>内嵌tomcat</p></blockquote><ol><li>内嵌Tomcat服务器是SpringBoot辅助功能之一</li><li>内嵌Tomcat工作原理是将Tomcat服务器作为对象运行，并 将该对象交给Spring容器管理</li><li>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</li></ol><ul><li>使用maven依赖管理变更起步依赖项</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat），谷歌应用引擎（GAE）已经全面切换为Jetty</li></ul><blockquote><p>内置服务器</p></blockquote><p>tomcat(默认)        apache出品，粉丝多，<code>应用面广</code>，负载了若干较重的组件</p><p>jetty                       <code>更轻量级</code>，负载性能远不及tomcat</p><p>undertow             undertow，负载性能<code>勉强</code>跑赢tomcat</p><h1 id="2-基础配置"><a href="#2-基础配置" class="headerlink" title="2. 基础配置"></a>2. 基础配置</h1><h2 id="2-1-application-properties"><a href="#2-1-application-properties" class="headerlink" title="2.1 application.properties"></a>2.1 application.properties</h2><blockquote><p>修改配置 application.properties</p></blockquote><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改服务器端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#关闭运行日志图标（banner）</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置日志相关</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>SpringBoot内置属性查询</p></blockquote><ul><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p></li><li><p>官方文档中参考文档第一项：Application Properties</p></li></ul><blockquote><p>注意</p></blockquote><ol><li>SpringBoot中导入对应starter后，提供对应配置属性</li><li>书写SpringBoot配置采用关键字+提示形式书写</li></ol><h2 id="2-2-3种配置文件的格式"><a href="#2-2-3种配置文件的格式" class="headerlink" title="2.2 3种配置文件的格式"></a>2.2 3种配置文件的格式</h2><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></tbody></table></figure><ul><li>application.yml(主流)</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>SpringBoot配置文件加载顺序</p></blockquote><p> application.properties &gt; application.yml &gt; application.yaml</p><blockquote><p>注意</p></blockquote><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</p><h2 id="2-3-yaml"><a href="#2-3-yaml" class="headerlink" title="2.3 yaml"></a>2.3 yaml</h2><h3 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h3><p> YAML（YAML Ain’t Markup Language），一种数据序列化格式 </p><p>优点：</p><ol><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ol><p>YAML文件扩展名</p><ol><li>.yml（主流）</li><li>.yaml</li></ol><h3 id="2-3-2-yaml语法规则"><a href="#2-3-2-yaml语法规则" class="headerlink" title="2.3.2 yaml语法规则"></a>2.3.2 yaml语法规则</h3><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li># 表示注释</li><li>核心规则：数据前面要加空格与冒号隔开</li></ul><blockquote><p>字面值表示方式</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span>                       <span class="comment">#TRUE,true,True,FALSE,false，False均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span>                         <span class="comment">#6.8523015e+5 #支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span>                            <span class="comment">#0b1010_0111_0100_1010_1110 #支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span>                             <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">HelloWorld</span>                  <span class="comment">#字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">"Hello World"</span>              <span class="comment">#可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-02-17</span>                    <span class="comment">#日期必须使用yyyy-MM-dd格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2018-02-17T15:02:31+08:00</span> <span class="comment">#时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>数组表示方式：在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [<span class="string">王者荣耀</span>,<span class="string">刺激战场</span>] <span class="comment">#数组书写缩略格式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式二</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users2:</span> [ { <span class="string">name:Tom</span> , <span class="string">age:4</span> } , { <span class="string">name:Jerry</span> , <span class="string">age:5</span> } ]  <span class="comment">#对象数组缩略格式</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-3-yaml数据读取"><a href="#2-3-3-yaml数据读取" class="headerlink" title="2.3.3 yaml数据读取"></a>2.3.3 yaml数据读取</h3><blockquote><p>在配置文件中</p></blockquote><p>使用属性名引用方式引用属性</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">/usr/local/fire</span></span><br><span class="line"><span class="attr">center:</span></span><br><span class="line">  <span class="attr">dataDir:</span> <span class="string">${baseDir}/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lesson:</span> <span class="string">"Spring\tboot\nlesson"</span>  <span class="comment">#属性值中如果出现转义字符，需要使用双引号包裹</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在java 文件中</p></blockquote><ol><li><p>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</p></li><li><p>封装全部数据到Environment对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用自动装配注入Environment对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象的getProperty</span></span><br><span class="line">System.out.println(env.getProperty(<span class="string">"age"</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">"enterprise.name"</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">"enterprise.subject[0]"</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><p>自定义对象封装指定数据的作用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//要启用spring的管理才能实现</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "enterprise")</span><span class="comment">//读取配置文件中前缀为enterprise的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="3-整合第三方技术"><a href="#3-整合第三方技术" class="headerlink" title="3. 整合第三方技术"></a>3. 整合第三方技术</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">整合Junit</button></li><li class="tab"><button type="button" data-href="#1-2">整合MyBatis</button></li><li class="tab"><button type="button" data-href="#1-3">整合MyBatis-Plus 或者 通用Mapper</button></li><li class="tab"><button type="button" data-href="#1-4">整合Druid</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>@SpringBootTest(测试类注解)</p></blockquote><p>位置：测试类定义上方</p><p>作用：设置JUnit加载的SpringBoot启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = SpringbootJUnitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootJUnitApplicationTests</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意</p></blockquote><ol><li>测试类如果存在于引导类所在包或子包中无需指定引导类</li><li>测试类如果不存在于引导类所在的包或子包中需要通过classes 属性指定引导类</li><li>如果测试类在SpringBoot启动类的包或子包中，可以省略启动类的设置，也就是省略classes的设定</li></ol><blockquote><p>整合方法</p></blockquote><ol><li>导入测试对应的starter</li><li>测试类使用@SpringBootTest修饰</li><li>使用自动装配的形式添加要测试的对象</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><ol><li>勾选MyBatis技术，也就是导入MyBatis对应的starter</li><li>数据库连接相关信息转换成配置</li><li>数据库SQL映射需要添加@Mapper被容器识别到</li></ol><blockquote><ol><li>引入依赖</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>配置信息</li></ol><p>注意:SpringBoot版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区</p><p>jdbc:mysql://localhost:3306/kangan?serverTimezone=UTC</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///kangan</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>定义数据层接口与映射配置</li></ol></blockquote><p>需要在引导启动类上面规定mapper空间</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan("cn.jyw.demo03.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(Demo03Application.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>或者</p><p>在mapper接口层上添加@Mapper注解</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper {</span><br><span class="line">    User findById(Integer id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><ol><li>手工添加对应的starter</li><li>数据层接口使用BaseMapper简化开发</li><li>需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标</li></ol><blockquote><ol><li>手动添加坐标,引入依赖</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>定义数据接口与映射配置,继承<code>BaseMapper</code></li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>在实体类上添加@Table 注解标注是数据库里的那一张表</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name = "t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> Date birthday;</span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String remark;</span><br><span class="line">  <span class="keyword">private</span> String station;</span><br><span class="line">  <span class="keyword">private</span> String telephone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> {</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> birthday;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> {</span><br><span class="line">    <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> gender;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> {</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> {</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> {</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getRemark</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> remark;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemark</span><span class="params">(String remark)</span> {</span><br><span class="line">    <span class="built_in">this</span>.remark = remark;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getStation</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> station;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStation</span><span class="params">(String station)</span> {</span><br><span class="line">    <span class="built_in">this</span>.station = station;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTelephone</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> telephone;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTelephone</span><span class="params">(String telephone)</span> {</span><br><span class="line">    <span class="built_in">this</span>.telephone = telephone;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他同MyBatis</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><ol><li>整合Druid需要导入Druid对应的starter</li><li>根据Druid提供的配置方式进行配置</li></ol><blockquote><ol><li>手动添加坐标,引入依赖</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变更Druid的配置方式 ()</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span> </span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///kangan</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment">#指定数据源类型 不推荐</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///kangan</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>整合第三方技术通用方式</p><ul><li>导入对应的starter</li><li>根据提供的配置格式，配置非默认值对应的配置项</li></ul><h1 id="4-基于SpringBoot的SSMP整合"><a href="#4-基于SpringBoot的SSMP整合" class="headerlink" title="4. 基于SpringBoot的SSMP整合"></a>4. 基于SpringBoot的SSMP整合</h1><h2 id="4-1-模块创建"><a href="#4-1-模块创建" class="headerlink" title="4.1 模块创建"></a>4.1 模块创建</h2><ol><li>勾选SpringMVC与MySQL坐标</li><li>修改配置文件为yml格式</li><li>设置端口为80方便访问</li></ol><h2 id="4-2-实体类的开发"><a href="#4-2-实体类的开发" class="headerlink" title="4.2 实体类的开发"></a>4.2 实体类的开发</h2><blockquote><p>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发(可以在创建模块的时候勾选上)</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>常用注解：@Data</p><p>为当前实体类在编译期设置对应的get/set方法，toString方法，hashCode方法，equals方法等</p><p><code>但是构造方法不在@Data内</code></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> {</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-数据层开发"><a href="#4-3-数据层开发" class="headerlink" title="4.3 数据层开发"></a>4.3 数据层开发</h2><ol><li>导入MyBatisPlus与Druid对应的starter</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>配置数据源与MyBatisPlus对应的基础配置</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?servierTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为方便调试可以开启MyBatisPlus的日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span> <span class="comment">#手动添加前缀 方便后面不用写前缀</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#id生成策略使用数据库自增策略</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#为方便调试可以开启MyBatisPlus的日志</span></span><br></pre></td></tr></tbody></table></figure><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">分页功能</button></li><li class="tab"><button type="button" data-href="#1-2">条件查询功能</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>MyBatisPlus拦截器实现</p></blockquote><p>分页操作是在MyBatisPlus的常规操作基础上增强得到，内部是动态的拼写SQL语句，因此需要增强对应的功能， 使用MyBatisPlus拦截器实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//1.定义Mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加具体的拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>分页操作需要设定分页对象IPage</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">5</span>);<span class="comment">//在MP里已经有IPage对象了</span></span><br><span class="line">    bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getCurrent());<span class="comment">//当前页码值</span></span><br><span class="line">    System.out.println(page.getSize());<span class="comment">//每页数据总量</span></span><br><span class="line">    System.out.println(page.getTotal());<span class="comment">//数据总量</span></span><br><span class="line">    System.out.println(page.getPages());<span class="comment">//最大页码值</span></span><br><span class="line">    System.out.println(page.getRecords());<span class="comment">//数据</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>使用QueryWrapper对象封装查询条件，推荐使用LambdaQueryWrapper对象，所有查询操作封装成方法调用</p><blockquote><p>支持动态拼写查询条件</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByCondition</span><span class="params">()</span>{</span><br><span class="line">    String name=<span class="string">"Spring"</span>;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    <span class="comment">//like操作 判断拼接条件 对应的字段名称 条件</span></span><br><span class="line">    lqw.like(Strings.isNotEmpty(name),Book::getName,name);</span><br><span class="line">    bookDao.selectPage(page,lqw);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>QueryWrapper 也可以这样做 但是没有 LambdaQueryWrapper安全</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByCondition</span><span class="params">()</span>{</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    qw.like(<span class="string">"name"</span>,<span class="string">"Spring"</span>);</span><br><span class="line">    bookDao.selectList(qw);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-4-业务层开发"><a href="#4-4-业务层开发" class="headerlink" title="4.4 业务层开发"></a>4.4 业务层开发</h2><h3 id="4-4-1-基本开发"><a href="#4-4-1-基本开发" class="headerlink" title="4.4.1 基本开发"></a>4.4.1 基本开发</h3><blockquote><p>定义接口</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> {</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getByPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现类定义</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(Book book)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book book)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getByPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> {</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>&lt;Book&gt;(currentPage,pageSize);</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-2-业务层开发————快速开发"><a href="#4-4-2-业务层开发————快速开发" class="headerlink" title="4.4.2 业务层开发————快速开发"></a>4.4.2 业务层开发————快速开发</h3><blockquote><p>快速开发方案</p></blockquote><ul><li>使用MyBatisPlus提供有业务层通用接口（ISerivce）与业务层通用实现类（ServiceImpl）</li><li>使用通用接口（ISerivce&lt;T&gt;）快速开发Service</li><li>使用通用实现类（ServiceImpl&lt;M,T&gt;）快速开发ServiceImpl</li><li>在通用类基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ul><blockquote><p>接口定义</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>\&lt;book&gt; {</span><br><span class="line">    <span class="comment">//追加的操作与原始操作通过名称区分，功能类似</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    Boolean <span class="title function_">insert</span><span class="params">(Book book)</span>; </span><br><span class="line">    Boolean <span class="title function_">modify</span><span class="params">(Book book)</span>;</span><br><span class="line">    Book <span class="title function_">get</span><span class="params">(Integer id)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现类追加功能</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl2</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao,Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">insert</span><span class="params">(Book book)</span> {</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">modify</span><span class="params">(Book book)</span> {</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> {</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">get</span><span class="params">(Integer id)</span> {</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-5-表现层开发"><a href="#4-5-表现层开发" class="headerlink" title="4.5 表现层开发"></a>4.5 表现层开发</h2><h3 id="4-5-1-基本开发"><a href="#4-5-1-基本开发" class="headerlink" title="4.5.1 基本开发"></a>4.5.1 基本开发</h3><ol><li>基于Restful制作表现层接口<ul><li>新增：POST</li><li>删除：DELETE</li><li>修改：PUT</li><li>查询：GET</li></ul></li><li>接收参数<ul><li>实体数据：@RequestBody</li><li>路径变量：@PathVariable</li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.insert(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/{currentPage}/{pageSize}")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage,<span class="meta">@PathVariable</span> Integer pageSize,Book book)</span>{</span><br><span class="line">        IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize,book);</span><br><span class="line">        <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">        <span class="keyword">if</span>( currentPage &gt; page.getPages()){</span><br><span class="line">            page = bookService.getPage((<span class="type">int</span>)page.getPages(), pageSize,book);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-2-表现层消息一致性处理"><a href="#4-5-2-表现层消息一致性处理" class="headerlink" title="4.5.2 表现层消息一致性处理"></a>4.5.2 表现层消息一致性处理</h3><blockquote><p>设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>{</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,Object data,String msg)</span>{</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>可以在表现层Controller中进行消息统一处理</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.insert(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(flag ,<span class="literal">null</span>, flag ? <span class="string">"添加成功^_^"</span> : <span class="string">"添加失败-_-!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>页面消息处理，没有传递消息加载默认消息，传递消息后加载指定消息</p></blockquote><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//添加</span><br><span class="line"><span class="title">handleAdd</span> () {</span><br><span class="line">    //发送ajax请求</span><br><span class="line">    axios.post(<span class="string">"/books"</span>,this.formData).<span class="keyword">then</span>((res)=&gt;{</span><br><span class="line">    //如果操作成功，关闭弹层，显示数据</span><br><span class="line">    <span class="keyword">if</span>(res.data.flag){</span><br><span class="line">        this.dialogFormVisible = false;</span><br><span class="line">        this.$message.success(res.data.msg);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">    this.$message.error(res.data.msg);</span><br><span class="line">    }</span><br><span class="line">    }).finally(()=&gt;{</span><br><span class="line">    this.getAll();</span><br><span class="line">    });</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 删除</span><br><span class="line"><span class="title">handleDelete</span>(row) {</span><br><span class="line">    //<span class="number">1.</span>弹出提示框</span><br><span class="line">    this.$confirm(<span class="string">"此操作永久删除当前数据，是否继续？"</span>,<span class="string">"提示"</span>,{</span><br><span class="line">    <span class="keyword">type</span>:'info'</span><br><span class="line">    }).<span class="keyword">then</span>(()=&gt;{</span><br><span class="line">    //<span class="number">2.</span>做删除业务</span><br><span class="line">    axios.delete(<span class="string">"/books/"</span>+row.id).<span class="keyword">then</span>((res)=&gt;{</span><br><span class="line">    //如果操作成功，关闭弹层，显示数据</span><br><span class="line">    <span class="keyword">if</span>(res.data.flag){</span><br><span class="line">        this.dialogFormVisible = false;</span><br><span class="line">        this.$message.success(res.data.msg);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">    this.$message.error(res.data.msg);</span><br><span class="line">    }</span><br><span class="line">    }).finally(()=&gt;{</span><br><span class="line">    this.getAll();</span><br><span class="line">    });</span><br><span class="line">    }).catch(()=&gt;{</span><br><span class="line">        //<span class="number">3.</span>取消删除</span><br><span class="line">        this.$message.info(<span class="string">"取消删除操作"</span>);</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//弹出编辑窗口</span><br><span class="line"><span class="title">handleUpdate</span>(row) {</span><br><span class="line">    axios.get(<span class="string">"/books/"</span>+row.id).<span class="keyword">then</span>((res)=&gt;{</span><br><span class="line">        <span class="keyword">if</span>(res.data.flag &amp;&amp; res.data.data != null ){</span><br><span class="line">            this.dialogFormVisible4Edit = true;</span><br><span class="line">            this.formData = res.data.data;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            this.$message.error(res.data.msg);</span><br><span class="line">        }</span><br><span class="line">    }).finally(()=&gt;{</span><br><span class="line">        //<span class="number">2.</span>重新加载数据</span><br><span class="line">        this.getAll();</span><br><span class="line">    });</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">//修改</span><br><span class="line"><span class="title">handleEdit</span>() {</span><br><span class="line">    axios.put(<span class="string">"/books"</span>,this.formData).<span class="keyword">then</span>((res)=&gt;{</span><br><span class="line">        //判断当前操作是否成功</span><br><span class="line">        <span class="keyword">if</span>(res.data.flag){</span><br><span class="line">            //<span class="number">1.</span>关闭弹层</span><br><span class="line">            this.dialogFormVisible4Edit = false;</span><br><span class="line">            this.$message.success(res.data.msg);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            this.$message.error(res.data.msg);</span><br><span class="line">        }</span><br><span class="line">    }).finally(()=&gt;{</span><br><span class="line">        //<span class="number">2.</span>重新加载数据</span><br><span class="line">        this.getAll();</span><br><span class="line">    });</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-3-分页条件查询"><a href="#4-5-3-分页条件查询" class="headerlink" title="4.5.3 分页条件查询"></a>4.5.3 分页条件查询</h3><blockquote><p>条件封装</p></blockquote><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pagination</span>: { //分页相关模型数据</span><br><span class="line">    currentPage: <span class="number">1</span>, //当前页码</span><br><span class="line">    pageSize:<span class="number">10</span>, //每页显示的记录数</span><br><span class="line">    total:<span class="number">0</span>, //总记录数</span><br><span class="line">    name: <span class="string">""</span>,</span><br><span class="line">    <span class="keyword">type</span>: "",</span><br><span class="line">    description: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>页面数据模型绑定</p></blockquote><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"filter-container"</span>&gt;</span><br><span class="line">    &lt;el-input placeholder=<span class="string">"图书类别"</span> v-model=<span class="string">"pagination.type"</span> class=<span class="string">"filter-item"</span>/&gt;</span><br><span class="line">    &lt;el-input placeholder=<span class="string">"图书名称"</span> v-model=<span class="string">"pagination.name"</span> class=<span class="string">"filter-item"</span>/&gt;</span><br><span class="line">    &lt;el-input placeholder=<span class="string">"图书描述"</span> v-model=<span class="string">"pagination.description"</span> class=<span class="string">"filter-item"</span>/&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"getAll()"</span> class=<span class="string">"dalfBut"</span>&gt;查询&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button <span class="keyword">type</span>="primary" class="butT" @click="handleCreate()"&gt;新建&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>组织数据成为get请求发送的数据</p></blockquote><figure class="highlight elm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">getAll</span>() {</span><br><span class="line">    //<span class="number">1.</span>获取查询条件,拼接查询条件</span><br><span class="line">    param = <span class="string">"?name="</span>+this.pagination.name;</span><br><span class="line">    param += <span class="string">"&amp;type="</span>+this.pagination.<span class="keyword">type</span>;</span><br><span class="line">    param += <span class="string">"&amp;description="</span>+this.pagination.description;</span><br><span class="line">    console.log(<span class="string">"-----------------"</span>+ param);</span><br><span class="line">    axios.get(<span class="string">"/books/"</span>+this.pagination.currentPage+<span class="string">"/"</span>+this.pagination.pageSize+param)</span><br><span class="line">    .<span class="keyword">then</span>((res) =&gt; {</span><br><span class="line">        this.pagination.total = res.data.data.total;</span><br><span class="line">        this.pagination.currentPage = res.data.data.current;</span><br><span class="line">        this.pagination.pagesize = res.data.data.size;</span><br><span class="line">        this.dataList = res.data.data.records;</span><br><span class="line">    });</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Controller接收参数</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/{currentPage}/{pageSize}")</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage,<span class="meta">@PathVariable</span> Integer pageSize,Book book)</span>{</span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize,book);</span><br><span class="line">    <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span>( currentPage &gt; page.getPages()){</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>)page.getPages(), pageSize,book);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>业务层接口功能开发</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl2</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao,Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> {</span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(Integer currentPage,Integer pageSize,Book queryBook)</span>{</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getName()),Book::getName,queryBook.getName());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getType()),Book::getType,queryBook.getType());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getDescription()),</span><br><span class="line">        Book::getDescription,queryBook.getDescription());</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectPage(page,lqw);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-4-异常处理"><a href="#4-5-4-异常处理" class="headerlink" title="4.5.4 异常处理"></a>4.5.4 异常处理</h3><ol><li>使用注解@RestControllerAdvice定义SpringMVC异常处理 器用来处理异常的</li><li>异常处理器必须被扫描加载，否则无法生效</li><li>表现层返回结果的模型类中添加消息属性用来传递消息到页面</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> {</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>{</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">false</span>,<span class="literal">null</span>,<span class="string">"系统错误，请稍后再试！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(五) 集群</title>
      <link href="/redis/redis-wu-ji-qun/"/>
      <url>/redis/redis-wu-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1. 主从复制"></a>1. 主从复制</h1><p>目的:保证互联网”三高”架构(高并发,高性能,高可用)中的<font color="red"><strong>高可用</strong></font></p><h2 id="1-1-单机redis的风险与问题"><a href="#1-1-单机redis的风险与问题" class="headerlink" title="1.1 单机redis的风险与问题"></a>1.1 单机redis的风险与问题</h2><ul><li><p>问题1.机器故障</p><ul><li>现象：硬盘故障、系统崩溃</li><li>本质：数据丢失，很可能对业务造成灾难性打击</li><li>结论：基本上会放弃使用redis.</li></ul></li><li><p>问题2.容量瓶颈</p><ul><li>现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存</li><li>本质：穷，硬件条件跟不上</li><li>结论：放弃使用redis</li></ul></li><li><p>结论： </p><p>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服 务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续 提供服务，实现Redis的高可用，同时实现数据冗余备份。</p></li></ul><h2 id="1-2-多台服务器连接方案"><a href="#1-2-多台服务器连接方案" class="headerlink" title="1.2 多台服务器连接方案"></a>1.2 多台服务器连接方案</h2><ul><li><p>提供数据方：master</p><p>主服务器，主节点，主库</p><p>主客户端</p></li><li><p>接收数据方：slave</p><p>从服务器，从节点，从库</p><p>从客户端</p></li><li><p>需要解决的问题： 数据同步</p></li><li><p>核心工作： master的数据复制到slave中</p></li></ul><h2 id="1-3-主从复制简介"><a href="#1-3-主从复制简介" class="headerlink" title="1.3 主从复制简介"></a>1.3 主从复制简介</h2><p>主从复制即将master中的数据即时、有效的复制到slave中</p><blockquote><p>特征：一个master可以拥有多个slave，一个slave只对应一个master</p></blockquote><p> master: </p><ul><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave读数据（可忽略）</li></ul><p> slave:</p><ul><li>读数据</li><li>写数据（禁止）</li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" alt="主从复制"></p><h2 id="1-4-主从复制工作流程"><a href="#1-4-主从复制工作流程" class="headerlink" title="1.4 主从复制工作流程"></a>1.4 主从复制工作流程</h2><h3 id="1-4-1-阶段一：建立连接阶段"><a href="#1-4-1-阶段一：建立连接阶段" class="headerlink" title="1.4.1 阶段一：建立连接阶段"></a>1.4.1 阶段一：建立连接阶段</h3><blockquote><p>建立slave到master的连接，使master能够识别slave，并保存slave端口号</p></blockquote><p>步骤1：设置master的地址和端口，保存master信息</p><p>步骤2：建立socket连接</p><p>步骤3：发送ping命令（定时器任务）</p><p>步骤4：身份验证</p><p>步骤5：发送slave端口信息</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E9%98%B6%E6%AE%B5%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="建立连接阶段工作流程)"></p><p>状态：</p><ul><li><p>slave：</p><p>保存master的地址与端口</p></li><li><p>master：保存slave的端口</p></li></ul><p>总体：</p><p>之间创建了连接的socket</p><blockquote><p>主从连接（slave连接master）</p></blockquote><ul><li><p>方式一：客户端发送命令</p><p><strong>slaveof</strong>  &lt;masterip&gt; &lt;msaterport&gt;</p></li><li><p>方式二：启动服务器参数</p><p>redis-server <strong>-slaveof</strong>  &lt;masterip&gt; &lt;msaterport&gt;</p></li><li><p>方式三：服务器配置</p></li></ul><p>  <strong>slaveof</strong>  &lt;masterip&gt; &lt;msaterport&gt;</p><blockquote><p>主从断开连接</p></blockquote><ul><li><p>客户端发送命令</p><p><strong>slaveof</strong> no one</p></li><li><p>说明：</p></li></ul><p>  slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</p><blockquote><p>授权访问</p></blockquote><ul><li><p>master客户端发送命令设置密码</p><p>requirepass &lt;password&gt;</p></li><li><p>master配置文件设置密码</p><p><strong>config set</strong> requirepass &lt;password&gt;</p><p><strong>config get</strong> requirepass</p></li><li><p>slave客户端发送命令设置密码</p><p><strong>auth</strong> &lt;password&gt;</p></li><li><p>slave配置文件设置密码</p><p><strong>masterauth</strong> &lt;password&gt;</p></li><li><p>slave启动服务器设置密码</p></li></ul><p>  <strong>redis-server</strong> –a &lt;password&gt;</p><h3 id="1-4-2-阶段二：数据同步阶段"><a href="#1-4-2-阶段二：数据同步阶段" class="headerlink" title="1.4.2 阶段二：数据同步阶段"></a>1.4.2 阶段二：数据同步阶段</h3><blockquote><p>数据同步阶段工作流程</p></blockquote><ol><li>请求同步数据</li><li>创建RDB同步数据</li><li>恢复RDB同步数据</li><li>请求部分同步数据</li><li>恢复部分同步数据</li></ol><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Redis数据同步工作流程"></p><p>状态：</p><ul><li>slave：具有master端全部数据，包含RDB过程接收的数据</li><li>master：保存slave当前数据同步的位置</li><li>总体：之间完成了数据克隆</li></ul><blockquote><p>数据同步阶段master说明</p></blockquote><ol><li><p>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已 经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。’’</p><blockquote><p><strong>repl-backlog-size</strong> 1mb</p></blockquote></li><li><p>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执行bgsave命令和创建复制缓冲区</p></li></ol><blockquote><p>数据同步阶段slave说明</p></blockquote><ol><li><p>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</p><blockquote><p><strong>slave-serve-stale-data</strong> yes|no</p></blockquote></li><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p></li><li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟 较大，数据一致性变差，应谨慎选择</p></li></ol><h3 id="1-4-3-阶段三：命令传播阶段"><a href="#1-4-3-阶段三：命令传播阶段" class="headerlink" title="1.4.3 阶段三：命令传播阶段"></a>1.4.3 阶段三：命令传播阶段</h3><blockquote><p>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</p><p>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</p></blockquote><ol><li>命令传播阶段的部分复制</li></ol><ul><li><p>命令传播阶段出现了断网现象</p><ul><li>网络闪断闪连                忽略</li><li>短时间网络中断            部分复制</li><li>长时间网络中断            全量复制</li></ul></li><li><p>部分复制的三个核心要素</p><ul><li>服务器的运行 id（run id）</li><li>主服务器的复制积压缓冲区</li><li>主从服务器的复制偏移量</li></ul></li></ul><blockquote><p>服务器运行ID（runid）</p></blockquote><ul><li><code>概念</code>：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</li><li><code>组成</code>：运行id由40位字符组成，是一个随机的十六进制字符<br>例如fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</li><li><code>作用</code>：运行id被用于在服务器间进行传输，识别身份<br>如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</li><li><code>实现方式</code>：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li></ul><blockquote><p>复制缓冲区</p></blockquote><ul><li><p><code>概念</code>：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命 令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</p><ul><li>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</li></ul></li><li><p>由来：每台服务器启动时，如果开启有AOF或被连接成为master节点，即创建复制缓冲区</p></li><li><p>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</p></li><li><p>数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</p></li></ul><blockquote><p>主从服务器复制偏移量（offset）</p></blockquote><ul><li><p>概念：一个数字，描述复制缓冲区中的指令字节位置</p></li><li><p>分类：</p><ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul></li><li><p>数据来源：</p><ul><li><p>master端：发送一次记录一次</p></li><li><p>slave端：接收一次记录一次</p></li></ul></li><li><p>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p></li></ul><h3 id="1-4-4-数据同步-命令传播阶段工作流程"><a href="#1-4-4-数据同步-命令传播阶段工作流程" class="headerlink" title="1.4.4 数据同步+命令传播阶段工作流程"></a>1.4.4 数据同步+命令传播阶段工作流程</h3><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%91%BD%E4%BB%A4%E4%BC%A0%E6%92%AD.png" alt=" Redis数据同步与命令传播"></p><h2 id="1-5-心跳机制"><a href="#1-5-心跳机制" class="headerlink" title="1.5 心跳机制"></a>1.5 心跳机制</h2><blockquote><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线 </p></blockquote><ul><li>master心跳：<ul><li>指令：PING</li><li>周期：由repl-ping-slave-period决定，默认10秒</li><li>作用：判断slave是否在线</li><li>查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</li></ul></li><li>slave心跳任务<ul><li>指令：REPLCONF ACK {offset}</li><li>周期：1秒</li><li>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li><li>作用2：判断master是否在线</li></ul></li></ul><blockquote><p>心跳阶段注意事项</p></blockquote><p> 当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作</p><blockquote><p><strong>min-slaves-to-write</strong> 2 </p><p><strong>min-slaves-max-lag</strong> 10</p></blockquote><p>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</p><ul><li>slave数量由slave发送REPLCONF ACK命令做确认</li><li>slave延迟由slave发送REPLCONF ACK命令做确认</li></ul><h2 id="1-6主从复制常见问题"><a href="#1-6主从复制常见问题" class="headerlink" title="1.6主从复制常见问题"></a>1.6主从复制常见问题</h2><h3 id="1-6-1-频繁的全量复制（master重启）"><a href="#1-6-1-频繁的全量复制（master重启）" class="headerlink" title="1.6.1 频繁的全量复制（master重启）"></a>1.6.1 频繁的全量复制（master重启）</h3><blockquote><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</p></blockquote><p>内部优化调整方案：</p><ol><li>master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</li><li>在master关闭时执行命令 shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中<ul><li>repl-id repl-offset</li><li>通过redis-check-rdb命令可以查看该信息</li></ul></li><li>master重启后加载RDB文件，恢复数据<br>重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中<ul><li>master_repl_id = repl master_repl_offset = repl-offset</li><li>通过info命令可以查看该信息</li></ul></li></ol><p>作用： 本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</p><h3 id="1-6-2-频繁的全量复制（网络中断）"><a href="#1-6-2-频繁的全量复制（网络中断）" class="headerlink" title="1.6.2 频繁的全量复制（网络中断）"></a>1.6.2 频繁的全量复制（网络中断）</h3><ul><li><p>问题现象</p><p>网络环境不佳，出现网络中断，slave不提供服务</p></li><li><p>问题原因</p><p>复制缓冲区过小，断网后slave的offset越界，触发全量复制</p></li><li><p>最终结果</p><p>slave反复进行全量复制</p></li><li><p>解决方案</p><p>修改复制缓冲区大小</p><p><code>repl-backlog-size</code></p></li></ul><p>建议设置如下：</p><ol><li>测算从master到slave的重连平均时长second</li><li>获取master平均每秒产生写命令数据总量write_size_per_second</li><li>最优复制缓冲区空间 = 2 * second * write_size_per_second</li></ol><h3 id="1-6-3-频繁的网络中断"><a href="#1-6-3-频繁的网络中断" class="headerlink" title="1.6.3 频繁的网络中断"></a>1.6.3 频繁的网络中断</h3><ul><li><p>问题现象</p><p>master的CPU占用高或 slave频繁断开连接</p></li><li><p>问题原因</p><ul><li>slave每1秒发送REPLCONF ACK命令到master</li><li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li></ul></li><li><p>最终结果</p><p>master各种资源（输出缓冲区、带宽、连接等）被严重占用</p></li><li><p>解决方案</p><p>通过设置合理的超时时间，确认是否释放slave</p><p><code>repl-timeout </code></p><p>该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</p></li></ul><h3 id="1-6-4-频繁的网络中断（2）"><a href="#1-6-4-频繁的网络中断（2）" class="headerlink" title="1.6.4 频繁的网络中断（2）"></a>1.6.4 频繁的网络中断（2）</h3><ul><li><p>问题现象</p><p>slave与master连接断开</p></li><li><p>问题原因</p><ul><li>master发送ping指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul></li><li><p>解决方案</p><p>提高ping指令发送的频度</p><p><code>repl-ping-slave-period</code></p><p>超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时</p></li></ul><h3 id="1-6-5-数据不一致"><a href="#1-6-5-数据不一致" class="headerlink" title="1.6.5 数据不一致"></a>1.6.5 数据不一致</h3><ul><li><p>问题现象</p><p>多个slave获取相同数据不同步</p></li><li><p>问题原因</p><p>网络信息不同步，数据发送有延迟</p></li><li><p>解决方案</p><ul><li>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象</li><li>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问</li></ul><p><strong>slave-serve-stale-data</strong> yes|no</p><p>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</p></li></ul><h1 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2. 哨兵模式"></a>2. 哨兵模式</h1><h2 id="2-1-哨兵简介"><a href="#2-1-哨兵简介" class="headerlink" title="2.1 哨兵简介"></a>2.1 哨兵简介</h2><blockquote><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行<code>监控</code>，当出现故障时通过投票机制选择<code>新的</code>master并将所有slave连接到新的master。</p></blockquote><ul><li><p>监控</p><p>不断的检查master和slave是否正常运行。</p><p>master存活检测、master与slave运行情况检测</p></li><li><p>通知（提醒）</p><p>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</p></li><li><p>自动故障转移</p><p>断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服 务器地址</p></li><li><p>注意： 哨兵也是一台redis服务器，只是不提供数据服务 通常哨兵配置数量为单数</p></li></ul><h2 id="2-2-启用哨兵模式"><a href="#2-2-启用哨兵模式" class="headerlink" title="2.2 启用哨兵模式"></a>2.2 启用哨兵模式</h2><p>配置一拖二的主从结构</p><p>配置三个哨兵（配置相同，端口不同） 参看sentinel.conf</p><p>启动哨兵</p><p><strong>redis-sentinel</strong> sentinel-端口号.conf</p><h2 id="2-3-哨兵工作原理"><a href="#2-3-哨兵工作原理" class="headerlink" title="2.3 哨兵工作原理"></a>2.3 哨兵工作原理</h2>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(四) 删除策略 核心配置 高级数据类型</title>
      <link href="/redis/redis-si-shan-chu-ce-lue-he-xin-pei-zhi-gao-ji-shu-ju-lei-xing/"/>
      <url>/redis/redis-si-shan-chu-ce-lue-he-xin-pei-zhi-gao-ji-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-删除策略"><a href="#1-删除策略" class="headerlink" title="1. 删除策略"></a>1. 删除策略</h1><h2 id="1-1-过期数据"><a href="#1-1-过期数据" class="headerlink" title="1.1 过期数据"></a>1.1 过期数据</h2><blockquote><p>Redis中的数据特征</p></blockquote><p>Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><ul><li>XX ：具有时效性的数据</li><li>-1 ：永久有效的数据</li><li>-2 ：已经过期的数据 或 被删除的数据 或 未定义的数据</li></ul><h2 id="1-2-数据删除策略"><a href="#1-2-数据删除策略" class="headerlink" title="1.2 数据删除策略"></a>1.2 数据删除策略</h2><h3 id="1-2-1-定时删除"><a href="#1-2-1-定时删除" class="headerlink" title="1.2.1 定时删除"></a>1.2.1 定时删除</h3><blockquote><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p></blockquote><ul><li><strong>优点</strong>：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li><strong>缺点</strong>：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li></ul><p>总结：用处理器性能换取存储空间（拿时间换空间）</p><h2 id="1-2-2-惰性删除"><a href="#1-2-2-惰性删除" class="headerlink" title="1.2.2 惰性删除"></a>1.2.2 惰性删除</h2><blockquote><p>数据到达过期时间，不做处理。等下次访问该数据时</p><ul><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ul></blockquote><ul><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li></ul><p>总结：用存储空间换取处理器性能（拿空间换时间）</p><h3 id="1-2-3-定期删除"><a href="#1-2-3-定期删除" class="headerlink" title="1.2.3 定期删除"></a>1.2.3 定期删除</h3><blockquote><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p></blockquote><ul><li>特点1：CPU性能占用设置有峰值，检测频度可自定义设置</li><li>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</li></ul><p>总结：周期性抽查存储空间（随机抽查，重点抽查）</p><blockquote><p>执行流程</p></blockquote><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10 </p><ul><li>每秒钟执行server.hz次<strong>serverCron()</strong> -&gt;databasesCron()-&gt;activeExpireCycle()</li><li>**activeExpireCycle()**对每个expires[*]逐一进行检测，每次执行250ms/server.hz </li><li>对某个expires[*]检测时，随机挑选W个key检测<ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程</li><li>如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环</li><li>W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul></li><li>参数current_db用于记录<strong>activeExpireCycle()</strong> 进入哪个expires[*] 执行</li><li>如果**activeExpireCycle()**执行时间到期，下次从current_db继续向下执行</li></ul><h3 id="1-2-4-删除策略比对"><a href="#1-2-4-删除策略比对" class="headerlink" title="1.2.4 删除策略比对"></a>1.2.4 删除策略比对</h3><table><thead><tr><th align="center">删除策略</th><th align="center">内存</th><th align="center">CUP</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">定时删除</td><td align="center">节约内存,无占用</td><td align="center">不分时段占用CPU资源，频度高</td><td align="center">拿时间换空间</td></tr><tr><td align="center">惰性删除</td><td align="center">内存占用严重</td><td align="center">延时执行，CPU利用率高</td><td align="center">拿空间换时间</td></tr><tr><td align="center">定期删除</td><td align="center">内存定期随机清理</td><td align="center">每秒花费固定的CPU资源维护内存</td><td align="center">随机抽查，重点抽查</td></tr></tbody></table><h2 id="1-3-逐出算法"><a href="#1-3-逐出算法" class="headerlink" title="1.3 逐出算法"></a>1.3 逐出算法</h2><blockquote><p>当新数据进入redis时，如果内存不足</p></blockquote><ul><li>Redis使用内存存储数据，在执行每一个命令前，会调用freeMemoryIfNeeded()检测内存是否充足。如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</li><li>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。</li></ul><blockquote><p>影响数据逐出的相关配置</p></blockquote><ul><li>最大可使用内存<br><strong>maxmemory</strong><br>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</li><li>每次选取待删除数据的个数<br><strong>maxmemory-samples</strong><br>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</li><li>删除策略<br><strong>maxmemory-policy</strong><br>达到最大内存后的，对被挑选出来的数据进行删除的策略</li></ul><blockquote><p>删除策略</p></blockquote><ul><li>检测易失数据（可能会过期的数据集server.db[i].expires ）<ol><li>volatile-lru：挑选最近最少使用的数据淘汰</li><li>volatile-lfu：挑选最近使用次数最少的数据淘汰</li><li>volatile-ttl：挑选将要过期的数据淘汰</li><li>volatile-random：任意选择数据淘汰</li></ol></li><li>检测全库数据（所有数据集server.db[i].dict ）<ol><li>allkeys-lru：挑选最近最少使用的数据淘汰</li><li>allkeys-lfu：挑选最近使用次数最少的数据淘汰</li><li>allkeys-random：任意选择数据淘汰</li></ol></li><li>放弃数据驱逐<ol><li>no-enviction（驱逐）：禁止驱逐数据（redis4.0中默认策略），会引发错误OOM（Out Of Memory）</li></ol></li></ul><h2 id="2-核心配置"><a href="#2-核心配置" class="headerlink" title="2. 核心配置"></a>2. 核心配置</h2><h2 id="2-1-服务器端设定"><a href="#2-1-服务器端设定" class="headerlink" title="2.1 服务器端设定"></a>2.1 服务器端设定</h2><blockquote><p>设置服务器以守护进程的方式运行 </p></blockquote><p><strong>daemonize</strong> yes|no</p><blockquote><p>绑定主机地址</p></blockquote><p><strong>bind</strong> 127.0.0.1</p><blockquote><p>设置服务器端口号</p></blockquote><p><strong>port</strong> 6379</p><blockquote><p>设置数据库数量</p></blockquote><p><strong>databases</strong> 16</p><h2 id="2-2-日志配置"><a href="#2-2-日志配置" class="headerlink" title="2.2 日志配置"></a>2.2 日志配置</h2><blockquote><p>设置服务器以指定日志记录级别</p></blockquote><p><strong>loglevel</strong> debug|verbose|notice|warning</p><blockquote><p>日志记录文件名</p></blockquote><p><strong>logfile</strong> 端口号.log</p><p>注意：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度  </p><h2 id="2-3-客户端配置"><a href="#2-3-客户端配置" class="headerlink" title="2.3 客户端配置"></a>2.3 客户端配置</h2><blockquote><p>设置同一时间最大客户端连接数，默认无限制。当客户端连接到达上限，Redis会关闭新的连接</p></blockquote><p><strong>maxclients</strong> 0</p><blockquote><p>客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭该功能，设置为 0</p></blockquote><p><strong>timeout</strong> 300</p><h2 id="2-4-多服务器快捷配置"><a href="#2-4-多服务器快捷配置" class="headerlink" title="2.4 多服务器快捷配置"></a>2.4 多服务器快捷配置</h2><blockquote><p>导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护</p></blockquote><p><strong>include</strong> /path/server-端口号.conf</p><h1 id="3-高级数据类型"><a href="#3-高级数据类型" class="headerlink" title="3. 高级数据类型"></a>3. 高级数据类型</h1><h2 id="3-1-Bitmaps-记录0-1"><a href="#3-1-Bitmaps-记录0-1" class="headerlink" title="3.1 Bitmaps(记录0,1)"></a>3.1 Bitmaps(记录0,1)</h2><h3 id="3-1-1-Bitmaps类型的基础操作"><a href="#3-1-1-Bitmaps类型的基础操作" class="headerlink" title="3.1.1 Bitmaps类型的基础操作"></a>3.1.1 Bitmaps类型的基础操作</h3><blockquote><p>获取指定key对应偏移量上的bit值</p></blockquote><p><strong>getbit</strong> key offset</p><blockquote><p>设置指定key对应偏移量上的bit值，value只能是1或0</p></blockquote><p><strong>setbit</strong> key offset value</p><h3 id="3-1-2-Bitmaps类型的扩展操作"><a href="#3-1-2-Bitmaps类型的扩展操作" class="headerlink" title="3.1.2 Bitmaps类型的扩展操作"></a>3.1.2 Bitmaps类型的扩展操作</h3><blockquote><p>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</p></blockquote><p><strong>bitop</strong> op destKey key1 [key2…]</p><ul><li>and：交</li><li>or：并</li><li>not：非</li><li>xor：异或</li></ul><blockquote><p>统计指定key中1的数量</p></blockquote><p>bitcount key [start end]</p><h2 id="3-2-HyperLogLog-统计UV"><a href="#3-2-HyperLogLog-统计UV" class="headerlink" title="3.2 HyperLogLog(统计UV)"></a>3.2 HyperLogLog(统计UV)</h2><h3 id="3-2-1-HyperLogLog类型的基本操作"><a href="#3-2-1-HyperLogLog类型的基本操作" class="headerlink" title="3.2.1 HyperLogLog类型的基本操作"></a>3.2.1 HyperLogLog类型的基本操作</h3><blockquote><p>添加数据</p></blockquote><p><strong>pfadd</strong> key element [element …] </p><blockquote><p>统计数据</p></blockquote><p><strong>pfcount</strong> key [key …]</p><blockquote><p>合并数据</p></blockquote><p><strong>pfmerge</strong> destkey sourcekey [sourcekey…]</p><h3 id="3-2-2-相关说明"><a href="#3-2-2-相关说明" class="headerlink" title="3.2.2 相关说明"></a>3.2.2 相关说明</h3><ul><li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据</li><li>核心是基数估算算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值</li><li>耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li>pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大</li><li>Pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量多少</li></ul><h2 id="3-3-GEO-坐标"><a href="#3-3-GEO-坐标" class="headerlink" title="3.3 GEO(坐标)"></a>3.3 GEO(坐标)</h2><h3 id="3-3-1-GEO类型的基本操作"><a href="#3-3-1-GEO类型的基本操作" class="headerlink" title="3.3.1 GEO类型的基本操作"></a>3.3.1 GEO类型的基本操作</h3><blockquote><p>添加坐标点</p></blockquote><p><strong>geoadd</strong> key longitude latitude member [longitude latitude member …]</p><blockquote><p>获取坐标点</p></blockquote><p><strong>geopos</strong> key member [member …]</p><blockquote><p>计算坐标点距离</p></blockquote><p><strong>geodist</strong> key member1 member2 [unit]</p><blockquote><p>添加坐标点</p></blockquote><p><strong>georadius</strong> key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</p><blockquote><p>获取坐标点</p></blockquote><p><strong>georadiusbymember</strong> key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</p><blockquote><p>计算经纬度</p></blockquote><p><strong>geohash</strong> key member [member …]</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(三) 持久化与事务</title>
      <link href="/redis/redis-san-chi-jiu-hua-yu-shi-wu/"/>
      <url>/redis/redis-san-chi-jiu-hua-yu-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-持久化简介"><a href="#1-持久化简介" class="headerlink" title="1.持久化简介"></a>1.持久化简介</h1><h2 id="1-1-什么是持久化"><a href="#1-1-什么是持久化" class="headerlink" title="1.1 什么是持久化"></a>1.1 什么是持久化</h2><blockquote><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为<code>持久化</code></p></blockquote><h2 id="1-2-为什么要进行持久化"><a href="#1-2-为什么要进行持久化" class="headerlink" title="1.2 为什么要进行持久化"></a>1.2 为什么要进行持久化</h2><blockquote><p>防止数据的意外丢失，确保数据安全性</p></blockquote><h2 id="1-3-持久化过程保存什么"><a href="#1-3-持久化过程保存什么" class="headerlink" title="1.3 持久化过程保存什么"></a>1.3 持久化过程保存什么</h2><blockquote><p>RDB</p></blockquote><ul><li><p>快照复制</p><p>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</p></li></ul><blockquote><p>AOF</p></blockquote><ul><li><p>记录操作</p><p>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</p></li></ul><h1 id="2-RDB"><a href="#2-RDB" class="headerlink" title="2. RDB"></a>2. RDB</h1><h2 id="2-1-RDB启动方式——-save指令"><a href="#2-1-RDB启动方式——-save指令" class="headerlink" title="2.1 RDB启动方式—— save指令"></a>2.1 RDB启动方式—— save指令</h2><ul><li>命令</li></ul><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save</span><br></pre></td></tr></tbody></table></figure><ul><li><p>作用</p><p>手动执行一次保存操作</p></li></ul><h2 id="2-2-RDB启动方式-——-save指令相关配置"><a href="#2-2-RDB启动方式-——-save指令相关配置" class="headerlink" title="2.2 RDB启动方式 —— save指令相关配置"></a>2.2 RDB启动方式 —— save指令相关配置</h2><ul><li><p><code>dbfilename</code> dump.rdb</p><p>说明：设置本地数据库文件名，默认值为 <strong>dump.rdb</strong></p><p>经验：通常设置为<strong>dump</strong>-<code>端口号</code>.<strong>rdb</strong></p></li><li><p><code>dir</code> </p><p>说明：设置存储.rdb文件的路径</p><p>经验：通常设置成存储空间较大的目录中，目录名称<code>data</code></p></li><li><p><code>rdbcompression</code> yes</p><p>说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩</p><p>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</p></li><li><p><code>rdbchecksum</code> yes</p><p>说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行</p><p>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</p></li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20RDB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="Redis RDB执行顺序"></p><blockquote><p><code>注意</code>：save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，<code>线上环境不建议使用</code></p></blockquote><h2 id="2-3-RDB启动方式-——-bgsave指令"><a href="#2-3-RDB启动方式-——-bgsave指令" class="headerlink" title="2.3 RDB启动方式 —— bgsave指令"></a>2.3 RDB启动方式 —— bgsave指令</h2><ul><li>命令</li></ul><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgsave</span><br></pre></td></tr></tbody></table></figure><ul><li><p>作用</p><p>手动启动后台保存操作，但不是立即执行</p></li></ul><h2 id="2-4-RDB启动方式-——-bgsave指令工作原理"><a href="#2-4-RDB启动方式-——-bgsave指令工作原理" class="headerlink" title="2.4 RDB启动方式 —— bgsave指令工作原理"></a>2.4 RDB启动方式 —— bgsave指令工作原理</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20bgsave%E6%8C%87%E4%BB%A4%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="Reids bgsave指令工作原理"></p><blockquote><p><code>注意</code>： bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用</p></blockquote><h2 id="2-5-RDB启动方式-——-bgsave指令相关配置"><a href="#2-5-RDB启动方式-——-bgsave指令相关配置" class="headerlink" title="2.5 RDB启动方式 —— bgsave指令相关配置"></a>2.5 RDB启动方式 —— bgsave指令相关配置</h2><ul><li><p>dbfilename dump.rdb</p></li><li><p>dir</p></li><li><p>rdbcompression yes</p></li><li><p>rdbchecksum yes</p></li><li><p>stop-writes-on-bgsave-error yes</p><p>说明：后台存储过程中如果出现错误现象，是否停止保存操作</p><p>经验：通常默认为开启状态</p></li></ul><h2 id="2-6-RDB启动方式-——save配置"><a href="#2-6-RDB启动方式-——save配置" class="headerlink" title="2.6 RDB启动方式 ——save配置"></a>2.6 RDB启动方式 ——save配置</h2><ul><li><p>配置</p><p><code>save</code> second changes</p></li><li><p>作用 满足限定时间范围内key的变化数量达到指定数量即进行持久化</p></li><li><p>参数 second：监控时间范围 changes：监控key的变化量</p></li><li><p>位置 在conf文件中进行配置</p></li><li><p>范例  </p><p>save 900 1</p><p>save 300 10</p><p>save 60 10000</p></li></ul><h2 id="2-6-RDB启动方式-——save配置原理"><a href="#2-6-RDB启动方式-——save配置原理" class="headerlink" title="2.6 RDB启动方式 ——save配置原理"></a>2.6 RDB启动方式 ——save配置原理</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20save%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86.png" alt="Redis save配置原理"></p><blockquote><p><code>注意</code>： save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的 save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系 save配置启动后执行的是bgsave操作</p></blockquote><h2 id="2-7-RDB三种启动方式对比"><a href="#2-7-RDB三种启动方式对比" class="headerlink" title="2.7 RDB三种启动方式对比"></a>2.7 RDB三种启动方式对比</h2><table><thead><tr><th align="center">方式</th><th align="center">save指令</th><th align="center">bgssave指令</th></tr></thead><tbody><tr><td align="center">读写</td><td align="center">同步</td><td align="center">异步</td></tr><tr><td align="center">阻塞客户端指令</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">额外内存消耗</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">启动新进程</td><td align="center">否</td><td align="center">是</td></tr></tbody></table><h2 id="2-8-RDB特殊启动形式"><a href="#2-8-RDB特殊启动形式" class="headerlink" title="2.8 RDB特殊启动形式"></a>2.8 RDB特殊启动形式</h2><ul><li><p>全量复制</p><p>在主从复制中详细讲解</p></li><li><p>服务器运行过程中重启</p><p><code>debug</code> reload</p></li><li><p>关闭服务器时指定保存数据</p><p><code>shutdown</code> save</p></li></ul><blockquote><p>默认情况下执行shutdown命令时，自动执行 bgsave(如果没有开启AOF持久化功能)</p></blockquote><h2 id="2-9-RDB的优缺点"><a href="#2-9-RDB的优缺点" class="headerlink" title="2.9 RDB的优缺点"></a>2.9 RDB的优缺点</h2><blockquote><p>RDB优点</p></blockquote><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复</li></ul><blockquote><p>RDB缺点 </p><p>数据大时效率低  数据丢失风险 大数据下IO性能低</p></blockquote><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h1 id="3-AOF"><a href="#3-AOF" class="headerlink" title="3. AOF"></a>3. AOF</h1><h2 id="3-1-AOF概念"><a href="#3-1-AOF概念" class="headerlink" title="3.1 AOF概念"></a>3.1 AOF概念</h2><ul><li>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的<br>与RDB相比可以简单描述为<code>改记录数据为记录数据产生的过程 </code></li><li>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</li></ul><blockquote><p>AOF写数据过程</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20AOF%E5%86%99%E6%95%B0%E6%8D%AE%E8%BF%87%E7%A8%8B.png" alt="AOF写数据过程"></p><h2 id="3-2-AOF写数据三种策略-appendfsync"><a href="#3-2-AOF写数据三种策略-appendfsync" class="headerlink" title="3.2 AOF写数据三种策略(appendfsync)"></a>3.2 AOF写数据三种策略(appendfsync)</h2><ul><li><p>always(每次）</p><p>每次写入操作均同步到AOF文件中，<code>数据零误差，性能较低</code></p></li><li><p>everysec（每秒）</p><p>每秒将缓冲区中的指令同步到AOF文件中，数据<code>准确性较高，性能较高</code><br>在系统突然宕机的情况下丢失1秒内的数据</p></li><li><p>no（系统控制）</p><p>由操作系统控制每次同步到AOF文件的周期，整体过程<code>不可控</code></p></li></ul><h2 id="3-3-AOF的相关配置"><a href="#3-3-AOF的相关配置" class="headerlink" title="3.3 AOF的相关配置"></a>3.3 AOF的相关配置</h2><ul><li><p><code>appendonly</code> yes|no</p><p>是否开启AOF持久化功能，默认为不开启状态</p></li><li><p><code>appendfsync</code> always|everysec|no</p><p>AOF写数据策略</p></li><li><p><code>appendfilename</code> filename</p><p>AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</p></li><li><p><code>dir</code></p><p>AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p></li></ul><h2 id="3-4-AOF的重写"><a href="#3-4-AOF的重写" class="headerlink" title="3.4 AOF的重写"></a>3.4 AOF的重写</h2><blockquote><p>功能由来</p></blockquote><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积<br>AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程<br>简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录</p><blockquote><p>AOF重写作用</p></blockquote><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><blockquote><p>AOF重写规则</p></blockquote><ul><li><p>进程内已超时的数据不再写入文件</p></li><li><p>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令</p></li><li><p>如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</p></li><li><p>对同一数据的多条写命令合并为一条命令</p><p>如lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c</p><p>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</p></li></ul><h2 id="3-5-AOF重写方式"><a href="#3-5-AOF重写方式" class="headerlink" title="3.5 AOF重写方式"></a>3.5 AOF重写方式</h2><ul><li><p>手动重写</p><p><code>bgrewriteaof</code></p></li><li><p>自动重写</p><p><code>auto-aof-rewrite-min-size</code> size</p><p><code>auto-aof-rewrite-percentage</code> percentage</p></li><li><p>自动重写触发比对参数</p><p><code>aof_current_size</code> aof当前大小</p><p><code>aof_base_size</code> aof基础大小</p></li><li><p>自动重写触发条件</p></li></ul><p>  aof当前大小 &gt; <code>auto-aof-rewrite-min-size</code> </p><p>  (aof当前大小-aof基础大小)/aof基础大小 &gt;= <code>auto-aof-rewrite-percentage</code> </p><h2 id="3-6-AOF工作流程"><a href="#3-6-AOF工作流程" class="headerlink" title="3.6 AOF工作流程"></a>3.6 AOF工作流程</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20AOF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="AOF工作流程"></p><blockquote><p>AOF重写操作流程</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20AOF%E9%87%8D%E5%86%99%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%20.png" alt="AOF重写工作流程"></p><h1 id="4-RDB与AOF区别"><a href="#4-RDB与AOF区别" class="headerlink" title="4. RDB与AOF区别"></a>4. RDB与AOF区别</h1><h2 id="4-1-持久化方式区别"><a href="#4-1-持久化方式区别" class="headerlink" title="4.1 持久化方式区别"></a>4.1 持久化方式区别</h2><table><thead><tr><th align="center">持久化方式</th><th align="center">RDB</th><th align="center">AOF</th></tr></thead><tbody><tr><td align="center">占用存储空间</td><td align="center">小（数据级：压缩）</td><td align="center">大（指令级：重写）</td></tr><tr><td align="center">存储速度</td><td align="center">慢</td><td align="center">快</td></tr><tr><td align="center">恢复速度</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">数据安全性</td><td align="center">会丢失数据</td><td align="center">依据策略决定</td></tr><tr><td align="center">资源消耗</td><td align="center">高/重量级</td><td align="center">低/轻量级</td></tr><tr><td align="center">启动优先级</td><td align="center">低</td><td align="center">高</td></tr></tbody></table><h2 id="4-2-RDB与AOF的选择"><a href="#4-2-RDB与AOF的选择" class="headerlink" title="4.2 RDB与AOF的选择"></a>4.2 RDB与AOF的选择</h2><blockquote><p>对数据非常敏感，建议使用默认的AOF持久化方案</p></blockquote><ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次<br>该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据</li><li><code>注意</code>：由于AOF文件存储体积较大，且恢复速度较慢</li></ul><blockquote><p>数据呈现阶段有效性，建议使用RDB持久化方案</p></blockquote><ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案</li><li><code>注意</code>：利用RDB实现紧凑的数据持久化会使Redis降的很低</li></ul><h2 id="4-3-综合比对"><a href="#4-3-综合比对" class="headerlink" title="4.3 综合比对"></a>4.3 综合比对</h2><ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB 和 AOF，重启后，<code>Redis优先使用 AOF 来恢复数据</code>，降低丢失数据的量</li></ul><h1 id="5-Redis事务"><a href="#5-Redis事务" class="headerlink" title="5. Redis事务"></a>5. Redis事务</h1><h2 id="5-1-什么是事务"><a href="#5-1-什么是事务" class="headerlink" title="5.1 什么是事务"></a>5.1 什么是事务</h2><blockquote><p>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）<br>当执行时，一次性 按照添加顺序依次执行，中间不会被打断或者干扰<br>一个队列中，一次性、顺序性、排他性的执行一系列命令</p></blockquote><h2 id="5-2-事务的基本操作"><a href="#5-2-事务的基本操作" class="headerlink" title="5.2 事务的基本操作"></a>5.2 事务的基本操作</h2><p><strong>开启事务 : multi</strong><br>作用 : 设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</p><p><strong>执行事务: exec</strong><br>作用:设定事务的结束位置，同时执行事务。与multi成对出现，成对使用</p><blockquote><p>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</p></blockquote><h2 id="5-3-事务的工作流程"><a href="#5-3-事务的工作流程" class="headerlink" title="5.3 事务的工作流程"></a>5.3 事务的工作流程</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Redis%20%E4%BA%8B%E5%8A%A1%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Redis 事务工作流程"></p><h2 id="5-4-事务的注意事项"><a href="#5-4-事务的注意事项" class="headerlink" title="5.4 事务的注意事项"></a>5.4 事务的注意事项</h2><blockquote><p>命令格式输入错误</p></blockquote><p>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。</p><blockquote><p>命令执行出现错误</p></blockquote><p>能够正确运行的命令会执行，运行错误的命令不会被执行</p><blockquote><p>注意：已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</p></blockquote><h2 id="5-5-手动进行事务回滚"><a href="#5-5-手动进行事务回滚" class="headerlink" title="5.5 手动进行事务回滚"></a>5.5 手动进行事务回滚</h2><p>记录操作过程中被影响的数据之前的状态</p><ul><li>单数据：string</li><li>多数据：hash、list、set、zset</li></ul><p>设置指令恢复所有的被修改的项</p><ul><li>单数据：直接set（注意周边属性，例如时效）</li><li>多数据：修改对应值或整体克隆复制</li></ul><h1 id="6-锁"><a href="#6-锁" class="headerlink" title="6. 锁"></a>6. 锁</h1><blockquote><p>使用场景</p></blockquote><ul><li>多个客户端有可能同时操作同一组数据，并且该数据一旦被操作修改后，将不适用于继续操作</li><li>在操作之前锁定要操作的数据，一旦发生变化，终止当前操作</li></ul><h2 id="6-1-锁"><a href="#6-1-锁" class="headerlink" title="6.1 锁"></a>6.1 锁</h2><blockquote><p>对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行</p></blockquote><ul><li><strong>watch</strong> key1 [key2……]</li></ul><blockquote><p>取消对所有 key 的监视 </p></blockquote><ul><li><strong>unwatch</strong></li></ul><h2 id="6-2-分布式锁"><a href="#6-2-分布式锁" class="headerlink" title="6.2 分布式锁"></a>6.2 分布式锁</h2><blockquote><p>虽然redis是单线程的，但是多个客户端对同一数据同时进行操作时，如何避免不被同时修改</p></blockquote><ul><li>使用 setnx 设置一个公共锁</li></ul><blockquote><p><strong>setnx</strong> lock-key value</p></blockquote><p>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</p><ul><li><p>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</p></li><li><p>对于返回设置失败的，不具有控制权，排队或等待</p><p>操作完毕通过del操作释放锁</p></li></ul><blockquote><p>注意：上述解决方案是一种设计概念，依赖规范保障，具有风险性</p></blockquote><h2 id="6-3-分布式锁改良"><a href="#6-3-分布式锁改良" class="headerlink" title="6.3 分布式锁改良"></a>6.3 分布式锁改良</h2><ul><li>由于锁操作由用户控制加锁解锁，必定会存在加锁后未解锁的风险</li><li>需要解锁操作不能仅依赖用户控制，系统级别要给出对应的保底处理方案</li></ul><blockquote><p>使用 expire 为锁key添加时间限定，到时不释放，放弃锁</p><p><strong>expire</strong> lock-key second<br><strong>pexpire</strong> lock-key milliseconds</p></blockquote><p>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。</p><ul><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时</li><li>锁时间设定推荐：最大耗时*120%+平均网络延迟*110%</li><li>如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(二) 指令操作</title>
      <link href="/redis/redis-er-zhi-ling-cao-zuo/"/>
      <url>/redis/redis-er-zhi-ling-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常用指令"><a href="#1-常用指令" class="headerlink" title="1. 常用指令"></a>1. 常用指令</h1><h2 id="1-1-key-基本操作"><a href="#1-1-key-基本操作" class="headerlink" title="1.1 key 基本操作"></a>1.1 key 基本操作</h2><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>del</code> key</td><td align="center">删除指定key</td></tr><tr><td align="center"><code>exists</code> key</td><td align="center">获取key是否存在</td></tr><tr><td align="center"><code>type</code> key</td><td align="center">获取key的类型</td></tr><tr><td align="center"><code>expire</code> key seconds<br><code>pexpire</code> key milliseconds<br><code>expireat</code> key timestamp<br><code>pexpireat</code> key milliseconds-timestamp</td><td align="center">为指定key设置有效期</td></tr><tr><td align="center"><code>ttl</code> key<br><code>pttl</code> key</td><td align="center">获取key的有效时间</td></tr><tr><td align="center"><code>persist</code> key</td><td align="center">切换key从时效性转换为永久性</td></tr><tr><td align="center"><code>rename</code> key newkey<br><code>renamenx</code> key newkey</td><td align="center">为key改名</td></tr><tr><td align="center"><code>sort</code></td><td align="center">对所有key排序</td></tr><tr><td align="center">help @generic</td><td align="center">其他key通用操作</td></tr><tr><td align="center"><code>keys</code> pattern</td><td align="center">查询key</td></tr></tbody></table><blockquote><p>查询模式规则</p><p>* 匹配任意数量的任意符号 ? 配合一个任意符号 [] 匹配一个指定符</p></blockquote><table><thead><tr><th>例子</th><th>解释</th></tr></thead><tbody><tr><td>keys *</td><td>查询所有</td></tr><tr><td>keys it*</td><td>查询所有以it开头</td></tr><tr><td>keys *heima</td><td>查询所有以heima结尾</td></tr><tr><td>keys ??heima</td><td>查询所有前面两个字符任意，后面以heima结尾</td></tr><tr><td>keys user:?</td><td>查询所有以user:开头，最后一个字符任意</td></tr><tr><td>keys u[st]er:1</td><td>查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</td></tr></tbody></table><h2 id="1-2数据库通用指令"><a href="#1-2数据库通用指令" class="headerlink" title="1.2数据库通用指令"></a>1.2数据库通用指令</h2><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>select</code> index</td><td align="center">切换数据库</td></tr><tr><td align="center"><code>quit</code><br><code>ping</code><br><code>echo</code> message</td><td align="center">其他操作</td></tr><tr><td align="center"><code>move</code> key db</td><td align="center">数据移动</td></tr><tr><td align="center"><code>dbsize</code><br><code>flushdb</code><br><code>flushall</code></td><td align="center">数据清除</td></tr></tbody></table><h1 id="2-全部指令"><a href="#2-全部指令" class="headerlink" title="2. 全部指令"></a>2. 全部指令</h1><h2 id="2-1-String"><a href="#2-1-String" class="headerlink" title="2.1 String"></a>2.1 String</h2><table><thead><tr><th align="center">操作指令</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center"><code>set</code> key value</td><td align="center">将字符串值 <code>value</code> 关联到 <code>key</code></td><td align="center">如果 <code>key</code> 已经持有其他值， <code>SET</code> 就覆写旧值， 无视类型<br>当 <code>SET</code> 命令对一个带有生存时间（TTL）的键进行设置之后， 该键原有的 TTL 将被清除</td><td align="center"><code>SET</code> 命令只在设置操作成功完成时才返回 <code>OK</code></td></tr><tr><td align="center"><code>setnx</code> key value</td><td align="center">只在键 <code>key</code> 不存在的情况下， 将键 <code>key</code> 的值设置为 <code>value</code></td><td align="center">若键 <code>key</code> 已经存在， 则 <code>SETNX</code> 命令不做任何动作</td><td align="center">命令在设置成功时返回 <code>1</code> ， 设置失败时返回 <code>0</code></td></tr><tr><td align="center"><code>setex</code> key value</td><td align="center">将键 <code>key</code> 的值设置为 <code>value</code> ， 并将键 <code>key</code> 的生存时间设置为 <code>seconds</code> 秒钟</td><td align="center">如果键 <code>key</code> 已经存在， 那么 <code>SETEX</code> 命令将覆盖已有的值</td><td align="center">命令在设置成功时返回 <code>OK</code> <br> 当 <code>seconds</code> 参数不合法时， 命令将返回一个错误</td></tr><tr><td align="center"><code>pestex</code> key value</td><td align="center">它以<code>毫秒</code>为单位设置 <code>key</code> 的生存时间</td><td align="center">这个命令和 <code>SETEX</code> 命令相似， 但不是像 <code>SETEX</code> 命令那样以秒为单位进行设置</td><td align="center">命令在设置成功时返回 <code>OK</code></td></tr><tr><td align="center"><code>get</code> key</td><td align="center">返回与键 <code>key</code> 相关联的字符串值</td><td align="center">如果键 <code>key</code> 不存在， 那么返回特殊值 <code>nil</code> ； 否则， 返回键 <code>key</code> 的值</td><td align="center">与键 <code>key</code> 相关联的字符串值</td></tr><tr><td align="center"><code>getset</code> key value</td><td align="center">将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值</td><td align="center">如果键 <code>key</code> 没有旧值， 也即是说， 键 <code>key</code> 在被设置之前并不存在， 那么命令返回 <code>nil</code></td><td align="center">给定键 <code>key</code> 的旧值</td></tr><tr><td align="center"><code>strlen</code> key</td><td align="center">返回键 <code>key</code> 储存的字符串值的长度</td><td align="center">当键 <code>key</code> 不存在时， 命令返回 <code>0</code></td><td align="center">字符串值的长度</td></tr><tr><td align="center"><code>append</code> key value</td><td align="center">如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾</td><td align="center">如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样</td><td align="center">追加 <code>value</code> 之后， 键 <code>key</code> 的值的长度</td></tr><tr><td align="center"><code>setrange </code> key offset value</td><td align="center">从偏移量 <code>offset</code> 开始， 用 <code>value</code> 参数覆写(overwrite)键 <code>key</code> 储存的字符串值</td><td align="center">不存在的键 <code>key</code> 当作空白字符串处理</td><td align="center">被修改之后， 字符串值的长度</td></tr><tr><td align="center"><code>getrange</code> key start end</td><td align="center">返回键 <code>key</code> 储存的字符串值的指定部分， 字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> 在内)</td><td align="center">负数偏移量表示从字符串的末尾开始计数， <code>-1</code> 表示最后一个字符， <code>-2</code> 表示倒数第二个字符， 以此类推<br><code>GETRANGE</code> 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求</td><td align="center"><code>GETRANGE</code> 命令会返回字符串值的指定部分</td></tr><tr><td align="center"><code>incr</code> key</td><td align="center">为键 <code>key</code> 储存的数字值加上一</td><td align="center">如果键 <code>key</code> 不存在， 那么它的值会先被初始化为 <code>0</code> ， 然后再执行 <code>INCR</code> 命令</td><td align="center">执行加一操作之后的值</td></tr><tr><td align="center"><code>incrby</code> key increment</td><td align="center">为键 <code>key</code> 储存的数字值加上增量 <code>increment</code></td><td align="center">如果键 <code>key</code> 不存在， 那么键 <code>key</code> 的值会先被初始化为 <code>0</code> ， 然后再执行 <code>INCRBY</code> 命令</td><td align="center">在加上增量 <code>increment</code> 之后， 键 <code>key</code> 当前的值</td></tr><tr><td align="center"><code>incrbyfloat</code> key increment</td><td align="center">为键 <code>key</code> 储存的值加上浮点数增量 <code>increment</code></td><td align="center">如果键 <code>key</code> 不存在， 那么 <code>INCRBYFLOAT</code> 会先将键 <code>key</code> 的值设为 <code>0</code> ， 然后再执行加法操做</td><td align="center">在加上增量 <code>increment</code> 之后， 键 <code>key</code> 的值</td></tr><tr><td align="center"><code>decr</code> key</td><td align="center">为键 <code>key</code> 储存的数字值减去一</td><td align="center">如果键 <code>key</code> 不存在， 那么键 <code>key</code> 的值会先被初始化为 <code>0</code> ， 然后再执行 <code>DECR</code> 操作</td><td align="center">执行减一操作之后的值</td></tr><tr><td align="center"><code>decrby</code> key increment</td><td align="center">将键 <code>key</code> 储存的整数值减去减量 <code>decrement</code></td><td align="center">如果键 <code>key</code> 不存在， 那么键 <code>key</code> 的值会先被初始化为 <code>0</code> ， 然后再执行 <code>DECRBY</code> 命令</td><td align="center">执行减法操作之后的值</td></tr><tr><td align="center"><code>mset</code> key1 value1 key2 value2</td><td align="center">同时为多个键设置值</td><td align="center"><code>MSET</code> 是一个原子性(atomic)操作，会覆盖已有value</td><td align="center">总是返回 <code>OK</code></td></tr><tr><td align="center"><code>msetnx</code> key1 value1 key2 value2</td><td align="center">当且仅当所有给定键都不存在时， 为所有给定键设置值</td><td align="center"><code>MSETNX</code> 是一个原子性(atomic)操作， 所有给定键要么就全部都被设置， 要么就全部都不设置， 不可能出现第三种状态</td><td align="center">成功 <code>1</code> <br>失败<code>0</code></td></tr><tr><td align="center"><code>mget</code> key1 key2</td><td align="center">返回给定的一个或多个字符串键的值</td><td align="center">如果给定的字符串键里面， 有某个键不存在， 那么这个键的值将以特殊值 <code>nil</code> 表示</td><td align="center">一个列表， 列表中包含了所有给定键的值</td></tr></tbody></table><blockquote><p>tips:</p></blockquote><ul><li><p><code>get</code> 只能获取字符串 其他类型的用get就会报错</p></li><li><p>数字的加减只能用于数字 带有字符的字符串会报错</p></li></ul><h2 id="2-2-hash"><a href="#2-2-hash" class="headerlink" title="2.2 hash"></a>2.2 hash</h2><table><thead><tr><th align="center">操作指令</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center"><code>hset</code> hash field value</td><td align="center">将哈希表 <code>hash</code> 中域 <code>field</code> 的值设置为 <code>value</code></td><td align="center"><code>field</code>不存在就创建<code>field</code>域并设置<br>存在就覆盖</td><td align="center">新创建 <code>field</code> 域并成功为它设置值时， 命令返回 <code>1</code> <br>成功使用新值覆盖了它的旧值， 那么命令返回 <code>0</code></td></tr><tr><td align="center"><code>hsetnx</code> hash field value</td><td align="center">当且仅当域 <code>field</code> 尚未存在于哈希表的情况下， 将它的值设置为 <code>value</code></td><td align="center">如果给定域已经存在于哈希表当中， 那么命令将放弃执行设置操作</td><td align="center">设置成功时返回 <code>1</code> ， 在给定域已经存在而放弃执行设置操作时返回 <code>0</code></td></tr><tr><td align="center"><code>hget</code> hash field</td><td align="center">返回哈希表中给定域的值</td><td align="center">如果给定域不存在于哈希表中， 又或者给定的哈希表并不存在， 那么命令返回 <code>nil</code></td><td align="center"><code>HGET</code> 命令在默认情况下返回给定域的值</td></tr><tr><td align="center"><code>hexists</code> hash field</td><td align="center">检查给定域 <code>field</code> 是否存在于哈希表 <code>hash</code> 当中</td><td align="center"></td><td align="center"><code>HEXISTS</code> 命令在给定域存在时返回 <code>1</code> ， 在给定域不存在时返回 <code>0</code></td></tr><tr><td align="center"><code>hdel</code> key [field]</td><td align="center">删除哈希表 <code>key</code> 中的一个或多个指定域，不存在的域将被忽略</td><td align="center"></td><td align="center">被成功移除的域的数量，不包括被忽略的域</td></tr><tr><td align="center"><code>hlen</code> key</td><td align="center">返回哈希表 <code>key</code> 中域的数量</td><td align="center">当 <code>key</code> 不存在时，返回 <code>0</code></td><td align="center">哈希表中域的数量</td></tr><tr><td align="center"><code>hstrlen</code> key field</td><td align="center">返回哈希表 <code>key</code> 中， 与给定域 <code>field</code> 相关联的值的字符串长度（string length）</td><td align="center">如果给定的键或者域不存在， 那么命令返回 <code>0</code></td><td align="center">一个整数</td></tr><tr><td align="center"><code>hincrby</code> key field increment</td><td align="center">为哈希表 <code>key</code> 中的域 <code>field</code> 的值加上增量 <code>increment</code></td><td align="center">如果 <code>key</code> 不存在，一个新的哈希表被创建并执行 <br>如果域 <code>field</code> 不存在，那么在执行命令前，域的值被初始化为 <code>0</code></td><td align="center">执行命令之后，哈希表 <code>key</code> 中域 <code>field</code> 的值</td></tr><tr><td align="center"><code>hincrbyfloat</code> key field increment</td><td align="center">哈希表 <code>key</code> 中的域 <code>field</code> 加上浮点数增量 <code>increment</code></td><td align="center">同上</td><td align="center">执行加法操作之后 <code>field</code> 域的值</td></tr><tr><td align="center"><code>hmset</code> key [field value]</td><td align="center">同时将多个 <code>field-value</code> (域-值)对设置到哈希表 <code>key</code> 中</td><td align="center">此命令会覆盖哈希表中已存在的域<br>如果 <code>key</code> 不存在，一个空哈希表被创建并执行</td><td align="center">如果命令执行成功，返回 <code>OK</code> <br>当 <code>key</code> 不是哈希表(hash)类型时，返回一个错误</td></tr><tr><td align="center"><code>hmget key [field]</code></td><td align="center">返回哈希表 <code>key</code> 中，一个或多个给定域的值</td><td align="center">如果给定的域不存在于哈希表，那么返回一个 <code>nil</code> 值</td><td align="center">一个包含多个给定域的关联值的表，表值的排列顺序和给定域参数的请求顺序一样</td></tr><tr><td align="center"><code>hkeys</code> key</td><td align="center">返回哈希表 <code>key</code> 中的所有域</td><td align="center">当 <code>key</code> 不存在时，返回一个空表</td><td align="center">一个包含哈希表中所有域的表</td></tr><tr><td align="center"><code>hvals</code> key</td><td align="center">返回哈希表 <code>key</code> 中所有域的值</td><td align="center">当 <code>key</code> 不存在时，返回一个空表</td><td align="center">一个包含哈希表中所有值的表</td></tr><tr><td align="center"><code>hgetall</code> key</td><td align="center">返回哈希表 <code>key</code> 中，所有的域和值</td><td align="center">若 <code>key</code> 不存在，返回空列表</td><td align="center">以列表形式返回哈希表的域和域的值</td></tr></tbody></table><h2 id="2-3-list"><a href="#2-3-list" class="headerlink" title="2.3 list"></a>2.3 list</h2><table><thead><tr><th align="center">操作指令</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center"><code>lpush</code> key [value]</td><td align="center">将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表头</td><td align="center"><code>value</code> 值按从左到右的顺序依次插入到表头<br>如果 <code>key</code> 不存在，一个空列表会被创建并执行</td><td align="center">列表的长度</td></tr><tr><td align="center"><code>lpushx</code> key value</td><td align="center">将值 <code>value</code> 插入到列表 <code>key</code> 的表头，当且仅当 <code>key</code> 存在并且是一个列表</td><td align="center">当 <code>key</code> 不存在时，什么也不做</td><td align="center">命令执行之后，表的长度</td></tr><tr><td align="center"><code>rpush</code> key [value]</td><td align="center">将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表尾(最右边)</td><td align="center"><code>value</code> 值按从左到右的顺序依次插入到表尾<br>如果 <code>key</code> 不存在，一个空列表会被创建并执行</td><td align="center">命令执行之后，表的长度</td></tr><tr><td align="center"><code>rpushx</code> key value</td><td align="center">将值 <code>value</code> 插入到列表 <code>key</code> 的表尾，当且仅当 <code>key</code> 存在并且是一个列表</td><td align="center">当 <code>key</code> 不存在时，什么也不做</td><td align="center">命令执行之后，表的长度</td></tr><tr><td align="center"><code>lpop</code> key</td><td align="center">移除并返回列表 <code>key</code> 的头元素</td><td align="center">当 <code>key</code> 不存在时，返回 <code>nil</code></td><td align="center">列表的头元素</td></tr><tr><td align="center"><code>rpop</code> key</td><td align="center">移除并返回列表 <code>key</code> 的尾元素</td><td align="center">当 <code>key</code> 不存在时，返回 <code>nil</code></td><td align="center">列表的尾元素</td></tr><tr><td align="center"><code>rpoplpush</code> source destination</td><td align="center">将 <code>source</code> 弹出的元素插入到列表 <code>destination</code> ，作为 <code>destination</code> 列表的的头元素</td><td align="center">如果 <code>source</code> 不存在，值 <code>nil</code> 被返回，并且不执行其他动作</td><td align="center">被弹出的元素</td></tr><tr><td align="center"><code>lrem</code> key count value</td><td align="center">根据参数 <code>count</code> 的值，移除列表中与参数 <code>value</code> 相等的元素</td><td align="center"><code>count &gt; 0</code> : 从表头开始向表尾搜索，数量为 <code>count</code><br><code>count = 0</code> : 移除表中所有与 <code>value</code> 相等的值</td><td align="center">被移除元素的数量</td></tr><tr><td align="center"><code>llen</code> key</td><td align="center">返回列表 <code>key</code> 的长度</td><td align="center">如果 <code>key</code> 不存在，则 <code>key</code> 被解释为一个空列表，返回 <code>0</code></td><td align="center">列表 <code>key</code> 的长度</td></tr><tr><td align="center"><code>lindex</code> key index</td><td align="center">返回列表 <code>key</code> 中，下标为 <code>index</code> 的元素</td><td align="center">你也可以使用负数下标，以 <code>-1</code> 表示列表的最后一个元素<br><code>关于下表都可以试试负数</code></td><td align="center">列表中下标为 <code>index</code> 的元素<br>如果 <code>index</code> 参数的值不在列表的区间范围内，返回 <code>nil</code></td></tr><tr><td align="center"><code>linsert</code> key <code>before</code></td><td align="center"><code>after</code> pivot value</td><td align="center">将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后</td><td align="center">当 <code>pivot</code> 不存在于列表 <code>key</code> 或者不存在<code>key</code>，不执行任何操作</td></tr><tr><td align="center"><code>lset</code> key index value</td><td align="center">将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code></td><td align="center">当 <code>index</code> 参数超出范围，或对一个空列表( <code>key</code> 不存在)进行时，返回一个错误</td><td align="center">操作成功返回 <code>ok</code> ，否则返回错误信息</td></tr><tr><td align="center"><code>lrange</code> key start stop</td><td align="center">返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定</td><td align="center">包含<code>stop</code>元素<br>如果 <code>stop</code> 下标比 <code>end</code> 下标还要大，Redis将 <code>stop</code> 的值设置为 <code>end</code></td><td align="center">包含指定区间内的元素<br>如果 <code>start</code> 大于<code>list</code>长度就返回空一个列表</td></tr><tr><td align="center"><code>ltrlm</code> key start stop</td><td align="center">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</td><td align="center">包含<code>stop</code>元素<br>如果 <code>stop</code> 下标比 <code>end</code> 下标还要大，Redis将 <code>stop</code> 的值设置为 <code>end</code></td><td align="center">包含指定区间内的元素<br>如果 <code>start</code> 大于<code>list</code>长度就返回空一个列表</td></tr><tr><td align="center"><code>blpop</code> [key] timeout</td><td align="center">当给定多个 <code>key</code> 参数时，按参数 <code>key</code> 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素</td><td align="center">如果列表为空，返回一个 <code>nil</code></td><td align="center">返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 <code>key</code> ，第二个元素是被弹出元素的值</td></tr><tr><td align="center"><code>brpop</code> [key] timeout</td><td align="center">当给定多个 <code>key</code> 参数时，按参数 <code>key</code> 的先后顺序依次检查各个列表，弹出第一个非空列表的尾部元素。</td><td align="center">假如在指定时间内没有任何元素被弹出，则返回一个 <code>nil</code> 和等待时长</td><td align="center">返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 <code>key</code> ，第二个元素是被弹出元素的值</td></tr><tr><td align="center"><code>brpoplpush</code> source destination timeout</td><td align="center">超时参数 <code>timeout</code> 接受一个以秒为单位的数字作为值。超时参数设为 <code>0</code> 表示阻塞时间可以无限期延长(block indefinitely)</td><td align="center">假如在指定时间内没有任何元素被弹出，则返回一个 <code>nil</code> 和等待时长</td><td align="center">反回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(一) 入门与Redis数据类型</title>
      <link href="/redis/redis-yi-ru-men-yu-redis-shu-ju-lei-xing/"/>
      <url>/redis/redis-yi-ru-men-yu-redis-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><h2 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h2><blockquote><p>问题现象</p></blockquote><ul><li>海量用户</li><li>高并发</li></ul><blockquote><p>罪魁祸首——关系型数据库</p></blockquote><ul><li>性能瓶颈：磁盘IO性能低下</li><li>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</li></ul><blockquote><p>解决思路  <code>Nosql</code></p></blockquote><ul><li>降低磁盘IO次数，越低越好 —— 内存存储 </li><li>去除数据间关系，越简单越好—— 不存储关系，仅存储数据</li></ul><h2 id="1-2-Nosql"><a href="#1-2-Nosql" class="headerlink" title="1.2 Nosql"></a>1.2 Nosql</h2><p>NoSQL：即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充<br>Nosql 作用：应对基于海量用户和海量数据前提下的数据处理问题</p><p>特征：</p><ul><li>可扩容，可伸缩</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见 Nosql 数据库：</p><ul><li>Redis</li><li>memcache</li><li>HBase</li><li>MongoDB</li></ul><h2 id="1-3-解决方案（电商场景）"><a href="#1-3-解决方案（电商场景）" class="headerlink" title="1.3 解决方案（电商场景）"></a>1.3 解决方案（电商场景）</h2><blockquote><p>数量小， 变化小   MySQL</p></blockquote><p>商品基本信息：名称、价格、厂商</p><blockquote><p>文档处理   MongoDB</p></blockquote><p>商品附加信息：描述、详情、评论</p><blockquote><p>图片信息   分布式文件系统</p></blockquote><blockquote><p>搜索关键字   ES、Lucene、solr</p></blockquote><blockquote><p><code>热点信息   Redis</code>、memcache、tair</p></blockquote><p><code>高频、波段性</code></p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8.png" alt="基本信息存储"></p><h1 id="2-Redis简介"><a href="#2-Redis简介" class="headerlink" title="2. Redis简介"></a>2. Redis简介</h1><h2 id="2-1-Redis"><a href="#2-1-Redis" class="headerlink" title="2.1 Redis"></a>2.1 Redis</h2><p>概念：*Redis (<strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver)* 是用 C 语言开发的一个开源的高性能键值对（<code>key-value</code>）数据库</p><p>Redis 特征：</p><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s</li><li>多数据类型支持<ul><li>字符串类型     string</li><li>列表类型         list</li><li>散列类型         hash</li><li>集合类型         set</li><li>有序集合类型 sorted_set</li></ul></li><li>持久化支持。可以进行数据灾难恢复</li></ol><h2 id="2-2-Redis-的应用"><a href="#2-2-Redis-的应用" class="headerlink" title="2.2 Redis 的应用"></a>2.2 Redis 的应用</h2><ul><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session 分离</li><li>消息队列</li><li>分布式锁</li></ul><h1 id="3-Redis-的基本操作"><a href="#3-Redis-的基本操作" class="headerlink" title="3. Redis 的基本操作"></a>3. Redis 的基本操作</h1><h2 id="3-1启动"><a href="#3-1启动" class="headerlink" title="3.1启动"></a>3.1启动</h2><p>启动</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis6379.conf</span><br></pre></td></tr></tbody></table></figure><p>登录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-功能性命令"><a href="#3-2-功能性命令" class="headerlink" title="3.2 功能性命令"></a>3.2 功能性命令</h2><blockquote><p>信息添加</p><p>功能：设置 key，value 数据</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> name windandstill</span><br></pre></td></tr></tbody></table></figure><blockquote><p>信息查询</p><p>功能：根据 key 查询对应的 value，如果不存在，返回空（nil）</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br><span class="line"></span><br><span class="line">get name</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-清除屏幕信息"><a href="#3-3-清除屏幕信息" class="headerlink" title="3.3 清除屏幕信息"></a>3.3 清除屏幕信息</h2><blockquote><p>功能：清除屏幕中的信息</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clear</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-帮助信息查阅"><a href="#3-4-帮助信息查阅" class="headerlink" title="3.4 帮助信息查阅"></a>3.4 帮助信息查阅</h2><blockquote><p>功能：获取命令帮助文档，获取组中所有命令信息名称</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help 命令名称</span><br><span class="line">help <span class="selector-tag">@</span>组名</span><br></pre></td></tr></tbody></table></figure><h2 id="3-5-退出指令"><a href="#3-5-退出指令" class="headerlink" title="3.5 退出指令"></a>3.5 退出指令</h2><blockquote><p>退出客户端命令行模式</p><p>功能：退出客户端</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">&lt;ESC&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-6-关闭客户端"><a href="#3-6-关闭客户端" class="headerlink" title="3.6 关闭客户端"></a>3.6 关闭客户端</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></tbody></table></figure><h1 id="4-数据存储类型介绍"><a href="#4-数据存储类型介绍" class="headerlink" title="4. 数据存储类型介绍"></a>4. 数据存储类型介绍</h1><h2 id="4-1-redis-数据存储格式"><a href="#4-1-redis-数据存储格式" class="headerlink" title="4.1 redis 数据存储格式"></a>4.1 redis 数据存储格式</h2><ul><li>redis 自身是一个 Map，其中所有的数据都是采用 <code>key : value</code> 的形式存储</li><li>数据类型指的是存储的数据的类型，也就是 <code>value 部分的类型</code>，<code>key 部分永远都是字符串</code></li></ul><h2 id="4-2-string"><a href="#4-2-string" class="headerlink" title="4.2 string"></a>4.2 string</h2><ul><li><code>存储的数据</code>：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</li><li><code>存储数据的格式</code>：一个存储空间保存一个数据</li><li><code>存储内容</code>：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</li></ul><p>设置数值数据增加指定范围的值</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//设置数值数据减少指定范围的值</span><br><span class="line">incr key</span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br><span class="line">//设置数值数据减少指定范围的值</span><br><span class="line">decr key</span><br><span class="line">decrby key increment</span><br></pre></td></tr></tbody></table></figure><blockquote><p>string 作为数值操作</p></blockquote><ul><li>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</li><li>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响</li><li><code>注意</code>：按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis 数值上限范围，将报错<br> 9223372036854775807（java中long型数据最大值，Long.MAX_VALUE）</li></ul><p>redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性<br>此方案适用于所有数据库，且支持数据库集群</p><blockquote><p>常用操作</p></blockquote><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>set</code> key value</td><td>添加/修改数据</td></tr><tr><td><code>get</code> key</td><td>获取数据</td></tr><tr><td><code>del</code> key</td><td>删除数据</td></tr><tr><td><code>mset</code> key1 value1 key2 value2</td><td>添加/修改多个数据</td></tr><tr><td><code>mget</code> key1 key2</td><td>获取多个数据</td></tr><tr><td><code>strlen</code> key</td><td>获取数据字符个数（字符串长度）</td></tr><tr><td><code>append</code> key value</td><td>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</td></tr></tbody></table><blockquote><p>设置数据具有指定的生命周期</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds value</span><br><span class="line">psetex key milliseconds value</span><br></pre></td></tr></tbody></table></figure><p>redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</p><blockquote><p>注意事项</p></blockquote><ul><li><p>数据操作不成功的反馈与数据正常操作之间的差异</p><p>① 表示运行结果是否成功<br>(integer) 0 → false 失败<br>(integer) 1 → true 成功</p><p>② 表示运行结果值<br>(integer) 3 → 3 3个<br>(integer) 1 → 1 1个<br>数据未获取到 （nil）等同于null</p></li><li><p>数据最大存储量 512MB</p></li><li><p>数值计算最大范围（java中的long的最大值）9223372036854775807</p></li></ul><blockquote><p>使用案例</p></blockquote><p><strong>需求</strong>   :主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量</p><p><strong>解决方案</strong></p><ul><li><p>在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可</p><p>eg: user:id :3506728370:fans → 12210947</p><p>eg: user:id :3506728370:blogs → 6164</p><p>eg: user:id :3506728370:focuss → 83</p></li><li><p>在redis中以json格式存储大V用户信息，定时刷新（也可以使用hash类型）</p></li></ul><p>  eg: user:id :3506728370 → {“id”:3506728370,”name”:”春晚”,”fans”:12210862,”blogs”:6164, “focus”:83}</p><blockquote><p>string 类型应用场景</p></blockquote><ul><li>redis应用于各种结构型和非结构型高热度数据访问加速</li><li>blog数量粉丝数等</li><li>定时投票</li></ul><blockquote><p>key 的设置约定</p></blockquote><p>数据库中的热点数据key命名惯例</p><p>表名:主键名:主键值:字段名</p><h2 id="4-3-hash"><a href="#4-3-hash" class="headerlink" title="4.3 hash"></a>4.3 hash</h2><ul><li><code>新的存储需求</code>：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li><code>需要的存储结构</code>：一个存储空间保存多个键值对数据</li><li><code>hash类型</code>：底层使用哈希表结构实现数据存储</li></ul><blockquote><p>hash的存储模式为    key hash空间   hash空间里有 filed 和 value</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/redis%20hash%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="redis hash存储结构"></p><p>hash存储结构优化</p><ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>如果field数量较多，存储结构使用HashMap结构</li></ul><blockquote><p>常用指令</p></blockquote><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>hset</code> key field value</td><td>添加/修改数据</td></tr><tr><td><code>hget</code> key field<br><code>hgetall</code> key</td><td>获取数据</td></tr><tr><td><code>hdel</code> key field1 [field2]</td><td>删除数据</td></tr><tr><td><code>hmset</code> key field1 value1 field2 value2</td><td>添加/修改多个数据</td></tr><tr><td><code>hmget</code> key field1 field2</td><td>获取多个数据</td></tr><tr><td><code>hlen</code> key</td><td>获取哈希表中字段的数量</td></tr><tr><td><code>hexists</code> key field</td><td>获取哈希表中是否存在指定的字段</td></tr><tr><td><code>hkeys</code> key<br><code>hvals</code> key</td><td>获取哈希表中所有的字段名或字段值</td></tr><tr><td><code>hincrby</code> key field increment<br><code>hincrbyfloat</code> key field increment</td><td>设置指定字段的数值数据增加指定范围的值</td></tr></tbody></table><blockquote><p>hash 类型数据操作的注意事项</p></blockquote><ul><li>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）</li><li>每个 hash 可以存储 2^32 - 1 个键值对</li><li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性<br>但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</li><li>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈</li></ul><blockquote><p>hash 类型应用场景</p></blockquote><ul><li>购物车数据存储设计</li><li>抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li><li>string存储对象（json）与hash存储对象</li></ul><h2 id="4-4-list"><a href="#4-4-list" class="headerlink" title="4.4 list"></a>4.4 list</h2><ul><li><code>数据存储需求</code>：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li><code>需要的存储结构</code>：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li><code>list类型</code>：保存多个数据，底层使用双向链表存储结构实现</li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/redis%20list%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="redis list存储结构"></p><blockquote><p>常用指令</p></blockquote><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>lpush</code> key [value1]<br><code>rpush</code> key [value1]</td><td align="center">添加/修改数据</td></tr><tr><td align="center"><code>lrange</code> key start stop<br><code>lindex</code> key index<br><code>llen</code> key</td><td align="center">获取数据</td></tr><tr><td align="center"><code>lpop</code> key<br><code>rpop</code> key</td><td align="center">获取并移除数据</td></tr><tr><td align="center"><code>blpop</code> [key1] timeout<br><code>brpop</code> [key1] timeout<br><code>brpoplpush</code> source destination timeout</td><td align="center">规定时间内获取并移除数据</td></tr><tr><td align="center"><code>lrem</code> key count value</td><td align="center">移除指定数据</td></tr></tbody></table><blockquote><p>list 类型数据操作注意事项</p></blockquote><ul><li>list中保存的数据都是string类型的，数据总容量是有限的，最多2 32 - 1 个元素 (4294967295)</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</li><li>获取全部数据操作结束索引设置为-1</li><li>list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</li></ul><blockquote><p>list 类型应用场景</p></blockquote><ul><li>关注列表</li><li>点赞</li><li>资讯</li></ul><h2 id="4-5-set"><a href="#4-5-set" class="headerlink" title="4.5 set"></a>4.5 set</h2><ul><li><code>新的存储需求</code>：存储大量的数据，在查询方面提供更高的效率</li><li><code>需要的存储结构</code>：能够保存大量的数据，高效的内部存储机制，便于查询</li><li><code>set类型</code>：<code>与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</code></li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/redis%20set%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="redis set存储结构"></p><blockquote><p>常用指令</p></blockquote><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>sadd</code> key [member1]</td><td align="center">添加数据</td></tr><tr><td align="center"><code>smembers</code> key</td><td align="center">获取全部数据</td></tr><tr><td align="center"><code>srem</code> key [member1]</td><td align="center">删除数据</td></tr><tr><td align="center"><code>scard</code> key</td><td align="center">获取集合数据总量</td></tr><tr><td align="center"><code>sismember</code> key member</td><td align="center">判断集合中是否包含指定数据</td></tr><tr><td align="center"><code>srandmember</code> key [count]</td><td align="center">随机获取集合中指定数量的数据</td></tr><tr><td align="center"><code>spop</code> key [count]</td><td align="center">随机获取集合中的某个数据并将该数据移出集合</td></tr><tr><td align="center"><code>sinter</code> [key1]<br><code>sunion</code> [key1]<br><code>sdiff</code> [key1]</td><td align="center">求两个集合的交、并、差集</td></tr><tr><td align="center"><code>sinterstore</code> destination [key1]<br><code>sunionstore</code> destination [key1]<br><code>sdiffstore</code> destination [key1]</td><td align="center">求两个集合的交、并、差集并存储到指定集合中</td></tr><tr><td align="center"><code>smove</code> source destination member</td><td align="center">将指定数据从原始集合中移动到目标集合中</td></tr></tbody></table><blockquote><p>注意事项</p></blockquote><ul><li>set 类型不允许数据重复，如果添加的数据在 set 中已经存在，将只保留一份</li><li>set 虽然与hash的存储结构相同，但是无法启用hash中存储值的空间</li></ul><blockquote><p>set 类型应用场景</p></blockquote><ul><li><p>随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐， 大V推荐等</p></li><li><p>redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</p><ul><li>显示共同关注（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li></ul></li><li><p>统计网站的PV（访问量）,UV（独立访客）,IP（独立IP）</p><ul><li>PV：网站被访问次数，可通过刷新页面提高访问量<br>建立string类型数据，利用incr统计日访问量（PV）</li><li>UV：网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变<br> 建立set模型，记录不同cookie数量（UV）</li><li>IP：网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问，IP不变<br> 建立set模型，记录不同IP数量（IP）</li></ul></li><li><p>黑白名单</p><ul><li>基于经营战略设定问题用户发现、鉴别规则</li><li>周期性更新满足规则的用户黑名单，加入set集合</li><li>用户行为信息达到后与黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li></ul></li></ul><h2 id="4-6-sorted-set"><a href="#4-6-sorted-set" class="headerlink" title="4.6 sorted_set"></a>4.6 sorted_set</h2><ul><li><code>新的存储需求</code>：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li><code>需要的存储结构</code>：新的存储模型，可以保存可排序的数据</li><li><code>sorted_set类型</code>：在set的存储结构基础上添加可排序字段</li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/sorted_ser%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="sorted_ser存储结构"></p><blockquote><p>常用指令</p></blockquote><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>zadd</code> key [score1 member1]</td><td align="center">添加数据</td></tr><tr><td align="center"><code>zrange</code> key start stop [WITHSCORES]<br><code>zrevrange</code> key start stop [WITHSCORES]</td><td align="center">获取全部数据</td></tr><tr><td align="center"><code>zrem</code> key [member …]</td><td align="center">删除数据</td></tr><tr><td align="center"><code>zrangebyscore</code> key min max [WITHSCORES] [LIMIT]<br><code>zrevrangebyscore</code> key max min [WITHSCORES]</td><td align="center">按条件获取数据</td></tr><tr><td align="center"><code>zremrangebyrank</code> key start stop<br><code>zremrangebyscore</code> key min max</td><td align="center">条件删除数据</td></tr><tr><td align="center"><code>zcard</code> key<br><code>zcount</code> key min max</td><td align="center">获取集合数据总量</td></tr><tr><td align="center"><code>zinterstore</code> destination numkeys [key …]<br><code>zunionstore</code> destination numkeys [key …]</td><td align="center">集合交、并操作</td></tr><tr><td align="center"><code>zrank</code> key member<br><code>zrevrank</code> key member</td><td align="center">获取数据对应的索引（排名）</td></tr><tr><td align="center"><code>zscore</code> key member<br><code>zincrby</code> key increment member</td><td align="center">score值获取与修改</td></tr></tbody></table><ul><li><code>min与max用于限定搜索查询的条件</code></li><li><code>start与stop用于限定查询范围，作用于索引，表示开始和结束索引</code></li><li><code>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</code></li></ul><blockquote><p>sorted_set 类型数据操作的注意事项</p></blockquote><ul><li>score保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992</li><li>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时候要慎重</li><li>sorted_set 底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，score值将被反复覆盖，保留最后一次修改的结果</li></ul><blockquote><p>sorted_set 应用场景</p></blockquote><p>redis 应用于计数器组合排序功能对应的<code>排名</code></p><p>redis 应用于定时任务<code>执行顺序管理</code>或<code>任务过期管理</code></p><h1 id="5-案例"><a href="#5-案例" class="headerlink" title="5 案例"></a>5 案例</h1><h2 id="5-1-限次数限时间"><a href="#5-1-限次数限时间" class="headerlink" title="5.1 限次数限时间"></a>5.1 限次数限时间</h2><p>试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><blockquote><p>解决方案</p></blockquote><ul><li>设计计数器，记录调用次数，用于控制业务执行次数<br>以用户id作为key，使用次数作为value</li><li>在调用前获取次数，判断是否超过限定次数<br>不超过次数的情况下，每次调用计数+1 业务调用失败，计数-1</li><li>为计数器设置生命周期为指定周期，例如1秒/分钟，自动清空周期内使用次数</li></ul><blockquote><p>改良</p></blockquote><ul><li>取消最大值的判定，利用incr操作超过最大值抛出异常的形式替代每次判断是否大于最大值</li><li>判断是否为nil<br>如果是，设置为Max-次数<br>如果不是，计数+1 业务调用失败，计数-1</li><li>遇到异常即+操作超过上限，视为使用达到上限</li></ul><h2 id="5-2-消息提醒"><a href="#5-2-消息提醒" class="headerlink" title="5.2 消息提醒"></a>5.2 消息提醒</h2><p>指定消息 消息的显示先后顺序</p><blockquote><p>解决方案</p></blockquote><ul><li>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用</li><li>对置顶与普通会话分别创建独立的list分别管理</li><li>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧）</li><li>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当前id对应的消息，先删除对应id</li><li>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据</li><li>消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北斗卫星实时位置的计算与精度分析</title>
      <link href="/bei-dou-wei-xing-shi-shi-wei-zhi-de-ji-suan-yu-jing-du-fen-xi/"/>
      <url>/bei-dou-wei-xing-shi-shi-wei-zhi-de-ji-suan-yu-jing-du-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-导航电文格式解读"><a href="#1-导航电文格式解读" class="headerlink" title="1. 导航电文格式解读"></a>1. 导航电文格式解读</h1><p>C01 2021 12 01 00 00 00-0.392390531488E-03 0.396518373691E-10 0.000000000000E+00<br>     0.100000000000E+01 0.923312500000E+03-0.175864468318E-08 0.562177079103E-01<br>     0.299839302897E-04 0.664370250888E-03 0.300258398056E-05 0.649344501495E+04<br>     0.259200000000E+06-0.103842467070E-06-0.306687686883E+01-0.428408384323E-07<br>     0.803862571188E-01-0.865156250000E+02-0.697794080599E+00 0.264403870625E-08<br>    -0.402159608705E-09 0.160000000000E+02 0.830000000000E+03 0.000000000000E+00<br>     0.200000000000E+01 0.000000000000E+00-0.560000000000E-08-0.104000000000E-07<br>     0.259200000000E+06 0.000000000000E+00</p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">第一行</button></li><li class="tab"><button type="button" data-href="#1-2">第二行</button></li><li class="tab"><button type="button" data-href="#1-3">第三行</button></li><li class="tab"><button type="button" data-href="#1-4">第四行</button></li><li class="tab"><button type="button" data-href="#1-5">第五行</button></li><li class="tab"><button type="button" data-href="#1-6">第六行</button></li><li class="tab"><button type="button" data-href="#1-7">第七行</button></li><li class="tab"><button type="button" data-href="#1-8">第八行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>卫星系统</td><td>C</td></tr><tr><td>卫星编号(PRN)</td><td>01</td></tr><tr><td>BDT时间的年</td><td>2021</td></tr><tr><td>月、日、时、分、秒</td><td>12 01 00 00 00</td></tr><tr><td>卫星时钟偏差钟差(S)</td><td>-0.392390531488E-03</td></tr><tr><td>卫星时钟漂移(S/S)</td><td>0.396518373691E-10</td></tr><tr><td>卫星时钟漂移率(S/$S^2$)</td><td>0.000000000000E+00</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>星历数据的有效龄期</td><td>0.100000000000E+01</td></tr><tr><td>Crs轨道半径正弦改正项</td><td>0.923312500000E+03</td></tr><tr><td>△n平均运动修正量</td><td>-0.175864468318E-08</td></tr><tr><td>$M_0$ toe时的平近点角</td><td>0.562177079103E-01</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>Cuc 纬度幅角余弦改正项</td><td>0.299839302897E-04</td></tr><tr><td>e 卫星轨道偏心率</td><td>0.664370250888E-03</td></tr><tr><td>Cus 纬度幅角正弦改正项</td><td>0.300258398056E-05</td></tr><tr><td>$\sqrt A$ 轨道长半径平根</td><td>0.649344501495E+04</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>toe 星历的基准时间</td><td>0.259200000000E+06</td></tr><tr><td>Cic 轨道倾角余弦调和项</td><td>-0.103842467070E-06</td></tr><tr><td>Ω 升交点赤经</td><td>-0.306687686883E+01</td></tr><tr><td>Cis 轨道倾角正弦项</td><td>-0.428408384323E-07</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>I 轨道倾角</td><td>0.803862571188E-01</td></tr><tr><td>Crc 轨道半径余弦调和项</td><td>-0.865156250000E+02</td></tr><tr><td>ω 近地点角距</td><td>-0.697794080599E+00</td></tr><tr><td>$Ω_{dot}$ 升交点赤经变率</td><td>0.264403870625E-08</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>$I_{dot}$ 轨道倾角变化率</td><td>-0.402159608705E-09</td></tr><tr><td>L2</td><td>0.160000000000E+02</td></tr><tr><td>GPS星期数（TOE）</td><td>0.830000000000E+03</td></tr><tr><td>L2P数据标志</td><td>0.000000000000E+00</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>卫星精度（m）</td><td>0.200000000000E+01</td></tr><tr><td>卫星健康（MSB）</td><td>0.000000000000E+00</td></tr><tr><td>TGD单频机延迟改正数</td><td>-0.560000000000E-08</td></tr><tr><td>IODC时钟数据有效期</td><td>-0.104000000000E-07</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-8"><table><thead><tr><th>名称</th><th>对应数值</th></tr></thead><tbody><tr><td>电文发送时间</td><td>0.259200000000E+06</td></tr><tr><td>拟合区间（h）</td><td>0.000000000000E+00</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-代码部分"><a href="#2-代码部分" class="headerlink" title="2. 代码部分"></a>2. 代码部分</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">对广播星历的处理计算</button></li><li class="tab"><button type="button" data-href="#1-2">对精密星历的处理</button></li><li class="tab"><button type="button" data-href="#1-3">卫星实体类</button></li><li class="tab"><button type="button" data-href="#1-4">对比精度分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Read</span> {</span><br><span class="line">    <span class="keyword">public</span>  List&lt;SatelliteData&gt; <span class="title function_">ReadB</span><span class="params">(String fileName)</span>  {</span><br><span class="line">        <span class="comment">//BDT起始时间 2006年1月1日0时0分0秒 星期日</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">time0Sec</span> <span class="operator">=</span> dateToSec(<span class="number">2006</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        List&lt;SatelliteData&gt; SatelliteDataList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            SatelliteDataList = ReadN(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"..\\Data\\21b\\"</span> +<span class="string">"tarc"</span>+fileName+<span class="string">"0.21b"</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            System.out.println(<span class="string">"文件读取错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//StringBuilder resultOutput = new StringBuilder();</span></span><br><span class="line">        <span class="keyword">for</span> (SatelliteData satelliteData : SatelliteDataList) {</span><br><span class="line">            <span class="type">Long</span> <span class="variable">timeSec</span> <span class="operator">=</span> dateToSec(satelliteData.year, satelliteData.month, satelliteData.day, satelliteData.hour, satelliteData.min, satelliteData.sec);</span><br><span class="line">            <span class="comment">//求toc 时钟时间 周内时间</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">toc</span> <span class="operator">=</span> ((timeSec - time0Sec) / <span class="number">1000</span>) % (<span class="number">604800</span>);</span><br><span class="line">            <span class="comment">//由于 ＢＤＳ和 ＧＰＳ的时间系统不统一，需要把归化时间减去１４ｓ来纳入 ＧＰＳ时</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">t0</span> <span class="operator">=</span> toc-<span class="number">14</span>;</span><br><span class="line">            <span class="type">Double</span> <span class="variable">dt</span> <span class="operator">=</span> satelliteData.clockDeviation + satelliteData.clockDrift * (t0 - toc) + satelliteData.clockDriftRate * Math.pow((t0 - toc), <span class="number">2</span>);</span><br><span class="line">            <span class="type">Double</span> <span class="variable">t</span> <span class="operator">=</span> t0 - dt;</span><br><span class="line">            <span class="comment">//LocalDateTime time = LocalDateTime.of(satelliteData.year, satelliteData.month, satelliteData.day, satelliteData.hour, satelliteData.min, satelliteData.sec);</span></span><br><span class="line">            <span class="comment">/*String resultData = */</span>calculateLocation(satelliteData, t);</span><br><span class="line">            <span class="comment">//String result = "时间" + time + "\n" + resultData + "\n";</span></span><br><span class="line">            <span class="comment">//System.out.print(result);</span></span><br><span class="line">            <span class="comment">//resultOutput.append(result);</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//String output=resultOutput.toString();</span></span><br><span class="line">        <span class="comment">//File outFile = new File("..\\Result\\" + filename + ".txt");</span></span><br><span class="line">        <span class="comment">//FileWriter fileWriter = new FileWriter(outFile, true);</span></span><br><span class="line">        <span class="comment">//BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);</span></span><br><span class="line">        <span class="comment">//bufferedWriter.write(output);</span></span><br><span class="line">        <span class="comment">//bufferedWriter.flush();</span></span><br><span class="line">        <span class="comment">//fileWriter.close();</span></span><br><span class="line">        <span class="comment">//bufferedWriter.close();</span></span><br><span class="line">        <span class="keyword">return</span> SatelliteDataList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;SatelliteData&gt; <span class="title function_">ReadN</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//打开导航电文文件 windows文件地址手动输 复制会产生空格</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">        <span class="comment">//头文件结束的标志</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">header</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化读取行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;SatelliteData&gt; satelliteDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (line.equals(<span class="string">""</span>)){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (header == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">switch</span> (row) {</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SatelliteData</span>();</span><br><span class="line">                        satelliteDataList.add(satelliteData);</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData1</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData1.PRN = Integer.parseInt(line.substring(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">                        satelliteData1.year = Integer.parseInt(line.substring(<span class="number">4</span>, <span class="number">8</span>));</span><br><span class="line">                        satelliteData1.month = Integer.parseInt(line.substring(<span class="number">9</span>, <span class="number">11</span>));</span><br><span class="line">                        satelliteData1.day = Integer.parseInt(line.substring(<span class="number">12</span>, <span class="number">14</span>));</span><br><span class="line">                        satelliteData1.hour = Integer.parseInt(line.substring(<span class="number">15</span>, <span class="number">17</span>));</span><br><span class="line">                        satelliteData1.min = Integer.parseInt(line.substring(<span class="number">18</span>, <span class="number">20</span>));</span><br><span class="line">                        satelliteData1.sec = Integer.parseInt(line.substring(<span class="number">21</span>, <span class="number">23</span>));</span><br><span class="line">                        satelliteData1.clockDeviation = Double.parseDouble(line.substring(<span class="number">23</span>, <span class="number">42</span>).trim());</span><br><span class="line">                        satelliteData1.clockDrift = Double.parseDouble(line.substring(<span class="number">42</span>, <span class="number">61</span>).trim());</span><br><span class="line">                        satelliteData1.clockDriftRate = Double.parseDouble(line.substring(<span class="number">61</span>, <span class="number">80</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">2</span>):</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData2</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData2.effectiveAge = Double.parseDouble(line.substring(<span class="number">4</span>, <span class="number">23</span>).trim());</span><br><span class="line">                        satelliteData2.Crs = Double.parseDouble(line.substring(<span class="number">23</span>, <span class="number">42</span>).trim());</span><br><span class="line">                        satelliteData2.delta_n = Double.parseDouble(line.substring(<span class="number">42</span>, <span class="number">61</span>).trim());</span><br><span class="line">                        satelliteData2.M0 = Double.parseDouble(line.substring(<span class="number">61</span>, <span class="number">80</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">3</span>):</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData3</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData3.Cuc = Double.parseDouble(line.substring(<span class="number">4</span>, <span class="number">23</span>).trim());</span><br><span class="line">                        satelliteData3.e = Double.parseDouble(line.substring(<span class="number">23</span>, <span class="number">42</span>).trim());</span><br><span class="line">                        satelliteData3.Cus = Double.parseDouble(line.substring(<span class="number">42</span>, <span class="number">61</span>).trim());</span><br><span class="line">                        satelliteData3.sqrt_a = Double.parseDouble(line.substring(<span class="number">61</span>, <span class="number">80</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">4</span>):</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData4</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData4.toe = Double.parseDouble(line.substring(<span class="number">4</span>, <span class="number">23</span>).trim());</span><br><span class="line">                        satelliteData4.Cic = Double.parseDouble(line.substring(<span class="number">23</span>, <span class="number">42</span>).trim());</span><br><span class="line">                        satelliteData4.OMG0 = Double.parseDouble(line.substring(<span class="number">42</span>, <span class="number">61</span>).trim());</span><br><span class="line">                        satelliteData4.Cis = Double.parseDouble(line.substring(<span class="number">61</span>, <span class="number">80</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">5</span>):</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData5</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData5.I = Double.parseDouble(line.substring(<span class="number">4</span>, <span class="number">23</span>).trim());</span><br><span class="line">                        satelliteData5.Crc = Double.parseDouble(line.substring(<span class="number">23</span>, <span class="number">42</span>).trim());</span><br><span class="line">                        satelliteData5.omg = Double.parseDouble(line.substring(<span class="number">42</span>, <span class="number">61</span>).trim());</span><br><span class="line">                        satelliteData5.OMG0_DOT = Double.parseDouble(line.substring(<span class="number">61</span>, <span class="number">80</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">6</span>):</span><br><span class="line">                        <span class="type">SatelliteData</span> <span class="variable">satelliteData6</span> <span class="operator">=</span> satelliteDataList.get(i);</span><br><span class="line">                        satelliteData6.I_dot = Double.parseDouble(line.substring(<span class="number">4</span>, <span class="number">23</span>).trim());</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">7</span>):</span><br><span class="line">                        row++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> (<span class="number">8</span>):</span><br><span class="line">                        i++;</span><br><span class="line">                        row = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">"END OF HEADER"</span>)) {</span><br><span class="line">                header = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="keyword">return</span> satelliteDataList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">dateToSec</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day, <span class="type">int</span> hour, <span class="type">int</span> min, <span class="type">int</span> sec)</span> {</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.of(year, month, day, hour, min, sec);</span><br><span class="line">        java.util.<span class="type">Date</span> <span class="variable">dtTime</span> <span class="operator">=</span> java.util.Date.from(time.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">        <span class="keyword">return</span> dtTime.getTime();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">calculateLocation</span><span class="params">(SatelliteData satelliteData, Double t)</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//长半径</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">A</span> <span class="operator">=</span> Math.pow(satelliteData.sqrt_a, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//地球重力常数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">constGM</span> <span class="operator">=</span> <span class="number">3.986004418e14</span>;</span><br><span class="line">        <span class="comment">//平均角速度</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">n0</span> <span class="operator">=</span> Math.sqrt(constGM / Math.pow(A, <span class="number">3</span>));</span><br><span class="line">        <span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> n0 + satelliteData.delta_n;</span><br><span class="line">        <span class="comment">//计算归化时间</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">tk</span> <span class="operator">=</span> t - satelliteData.toe;</span><br><span class="line">        <span class="comment">//平近点角</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">Mk</span> <span class="operator">=</span> satelliteData.M0 + n * tk;</span><br><span class="line">        <span class="comment">//偏近点角</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">Ek0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">Ek1</span> <span class="operator">=</span> Mk;</span><br><span class="line">        <span class="keyword">while</span> (Math.abs(Ek1 - Ek0) &gt; <span class="number">10e-12</span>) {</span><br><span class="line">            Ek0 = Ek1;</span><br><span class="line">            Ek1 = Mk + satelliteData.e * Math.sin(Ek0);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">double</span> <span class="variable">Ek</span> <span class="operator">=</span> Ek0;</span><br><span class="line">        <span class="comment">//真近点角 纬度幅角参数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">vk</span> <span class="operator">=</span> Math.atan(Math.sqrt(<span class="number">1</span>-Math.pow(satelliteData.e,<span class="number">2</span>))*Math.sin(Ek)/(Math.cos(Ek)-satelliteData.e));</span><br><span class="line">         <span class="comment">//vk=2*Math.atan((Math.sqrt((1+satelliteData.e)/(1-satelliteData.e))*tan(Ek/2)));</span></span><br><span class="line">        <span class="comment">//升交角距</span></span><br><span class="line">        <span class="comment">//vk=2*Math.atan((Math.sqrt((1+satelliteData.e)/(1-satelliteData.e))*Math.tan(Ek/2))); //\\</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">phi_k</span> <span class="operator">=</span> vk + satelliteData.omg;</span><br><span class="line">        <span class="comment">//扰动改正</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">delta_uk</span> <span class="operator">=</span> satelliteData.Cuc * Math.cos(<span class="number">2</span> * phi_k) + satelliteData.Cus * Math.sin(<span class="number">2</span> * phi_k);</span><br><span class="line">        <span class="type">double</span> <span class="variable">delta_rk</span> <span class="operator">=</span> satelliteData.Crc * Math.cos(<span class="number">2</span> * phi_k) + satelliteData.Crs * Math.sin(<span class="number">2</span> * phi_k);</span><br><span class="line">        <span class="type">double</span> <span class="variable">delta_ik</span> <span class="operator">=</span> satelliteData.Cic * Math.cos(<span class="number">2</span> * phi_k) + satelliteData.Cis * Math.sin(<span class="number">2</span> * phi_k);</span><br><span class="line">        <span class="comment">//赤经 半径 轨道倾角改正</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">uk</span> <span class="operator">=</span> phi_k + delta_uk;</span><br><span class="line">        <span class="type">double</span> <span class="variable">rk</span> <span class="operator">=</span> A * (<span class="number">1</span> - satelliteData.e * Math.cos(Ek)) + delta_rk;</span><br><span class="line">        <span class="type">double</span> <span class="variable">ik</span> <span class="operator">=</span> satelliteData.I + satelliteData.I_dot*tk+delta_ik;</span><br><span class="line">        <span class="comment">//卫星在轨道上的位置</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">xk</span> <span class="operator">=</span> rk * Math.cos(uk);</span><br><span class="line">        <span class="type">double</span> <span class="variable">yk</span> <span class="operator">=</span> rk * Math.sin(uk);</span><br><span class="line">        <span class="comment">//地球自转角速度</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">OMGe</span> <span class="operator">=</span> <span class="number">7.292115e-5</span>;</span><br><span class="line">        <span class="comment">//PRN&gt;5 的为ＭＥＯ／ＩＧＳＯ 卫星在 ＣＧＣＳ２０００坐标系中的坐标</span></span><br><span class="line">        <span class="keyword">if</span> (satelliteData.PRN &gt; <span class="number">5</span>) {</span><br><span class="line">            <span class="comment">//历元t升交点的赤赤经</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">OMGk</span> <span class="operator">=</span> satelliteData.OMG0 + (satelliteData.OMG0_DOT - OMGe) * tk - OMGe * satelliteData.toe;</span><br><span class="line">            <span class="comment">//卫星在地心地固坐标系中的位置</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">x_E</span> <span class="operator">=</span> xk * Math.cos(OMGk) - yk * Math.cos(ik) * Math.sin(OMGk);</span><br><span class="line">            <span class="type">double</span> <span class="variable">y_E</span> <span class="operator">=</span> xk * Math.sin(OMGk) + yk * Math.cos(ik) * Math.cos(OMGk);</span><br><span class="line">            <span class="type">double</span> <span class="variable">z_E</span> <span class="operator">=</span> yk * Math.sin(ik);</span><br><span class="line">            satelliteData.X = x_E;</span><br><span class="line">            satelliteData.Y = y_E;</span><br><span class="line">            satelliteData.Z = z_E;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//历元t升交点的赤经</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">OMGk</span> <span class="operator">=</span> satelliteData.OMG0 + satelliteData.OMG0_DOT * tk - OMGe * satelliteData.toe;</span><br><span class="line">            <span class="comment">//计算 ＧＥＯ 卫星在自定义坐标系系中的坐标</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">x_E</span> <span class="operator">=</span> xk * Math.cos(OMGk) - yk * Math.cos(ik) * Math.sin(OMGk);</span><br><span class="line">            <span class="type">double</span> <span class="variable">y_E</span> <span class="operator">=</span> xk * Math.sin(OMGk) + yk * Math.cos(ik) * Math.cos(OMGk);</span><br><span class="line">            <span class="type">double</span> <span class="variable">z_E</span> <span class="operator">=</span> yk * Math.sin(ik);</span><br><span class="line">            <span class="comment">//计算 ＧＥＯ卫星在ＣＧＣＳ２０００坐标系中的坐标</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> Math.toRadians(-<span class="number">5</span>);</span><br><span class="line">            <span class="type">double</span>[][] rx = {{<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>}, {<span class="number">0</span>, Math.cos(v), Math.sin(v)}, {<span class="number">0</span>, -Math.sin(v), Math.cos(v)}};</span><br><span class="line">            <span class="type">double</span>[][] rz = {{Math.cos(OMGe * tk), Math.sin(OMGe * tk), <span class="number">0</span>}, {-Math.sin(OMGe * tk), Math.cos(OMGe * tk), <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line">            <span class="type">double</span>[][] location = {{x_E}, {y_E}, {z_E}};</span><br><span class="line">            <span class="type">double</span>[][] d1 = MatrixMultiply(rz, rx);</span><br><span class="line">            <span class="type">double</span>[][] d = MatrixMultiply(d1, location);</span><br><span class="line">            satelliteData.X = d[<span class="number">0</span>][<span class="number">0</span>] ;</span><br><span class="line">            satelliteData.Y = d[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            satelliteData.Z = d[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"卫星："</span> + satelliteData.PRN + <span class="comment">/*",长半径：" + A + "，平均角速度：" + n0</span></span><br><span class="line"><span class="comment">                    + "，\n偏近点角：" + Ek + "，真近点角" + vk + ",升交角距：" + phi_k</span></span><br><span class="line"><span class="comment">                    + "，\n改正赤经：" + uk + "，改正半径：" + rk + "，改正轨道倾角：" + ik</span></span><br><span class="line"><span class="comment">                    + "，\n卫星在轨道上的位置(" + xk + "," + yk + ")，赤纬：" + lambda</span></span><br><span class="line"><span class="comment">                    + */</span><span class="string">"，\n卫星在地心地固坐标系中的位置：("</span> + satelliteData.X + <span class="string">","</span> + satelliteData.Y + <span class="string">","</span> + satelliteData.Z + <span class="string">")\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span>[][] MatrixMultiply(<span class="type">double</span>[][] m1,<span class="type">double</span>[][] m2){</span><br><span class="line">        <span class="keyword">if</span>(m1==<span class="literal">null</span>||m2==<span class="literal">null</span>||m1[<span class="number">0</span>].length!=m2.length) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span>[][] m=<span class="keyword">new</span> <span class="title class_">double</span>[m1.length][m2[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m1.length;++i){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m2[<span class="number">0</span>].length;++j){</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;m1[i].length;++k){</span><br><span class="line">                    m[i][j]+=m1[i][k]*m2[k][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadSp3</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;SatelliteData&gt; <span class="title function_">ReadSp3</span><span class="params">(String fileName)</span> {</span><br><span class="line">        List&lt;SatelliteData&gt; satelliteDataSP3List = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            satelliteDataSP3List = ReadSP3(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"..\\Data\\SP3\\"</span> +<span class="string">"GBM0MGXRAP_2021"</span>+fileName+<span class="string">"0000_01D_05M_ORB.SP3"</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            System.out.println(<span class="string">"读取错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//for (SatelliteData satelliteDataSP3 : satelliteDataSP3List) {</span></span><br><span class="line">        <span class="comment">//    LocalDateTime time = LocalDateTime.of(satelliteDataSP3.year, satelliteDataSP3.month, satelliteDataSP3.day, satelliteDataSP3.hour, satelliteDataSP3.min, satelliteDataSP3.sec);</span></span><br><span class="line">        <span class="comment">//    System.out.println(time);</span></span><br><span class="line">        <span class="comment">//    System.out.println("卫星:" + satelliteDataSP3.PRN +</span></span><br><span class="line">        <span class="comment">//            "，\n卫星在地心地固坐标系中的位置：(" + satelliteDataSP3.X + "," + satelliteDataSP3.Y + "," + satelliteDataSP3.Z + ")\n");</span></span><br><span class="line">        <span class="comment">//}</span></span><br><span class="line">        <span class="keyword">return</span> satelliteDataSP3List;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;SatelliteData&gt; <span class="title function_">ReadSP3</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        List&lt;SatelliteData&gt; satelliteDataSP3List = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">        <span class="type">SatelliteData</span> <span class="variable">satelliteData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SatelliteData</span>();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (line.charAt(<span class="number">0</span>) == <span class="string">'*'</span>) {</span><br><span class="line">                satelliteData.year = Integer.parseInt(line.substring(<span class="number">3</span>, <span class="number">7</span>));</span><br><span class="line">                satelliteData.month = Integer.parseInt(line.substring(<span class="number">8</span>, <span class="number">10</span>).trim());</span><br><span class="line">                satelliteData.day = Integer.parseInt(line.substring(<span class="number">11</span>, <span class="number">13</span>).trim());</span><br><span class="line">                satelliteData.hour = Integer.parseInt(line.substring(<span class="number">14</span>, <span class="number">16</span>).trim());</span><br><span class="line">                satelliteData.min = Integer.parseInt(line.substring(<span class="number">17</span>, <span class="number">19</span>).trim());</span><br><span class="line">                satelliteData.sec = Integer.parseInt(line.substring(<span class="number">20</span>, <span class="number">22</span>).trim());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (line.substring(<span class="number">0</span>, <span class="number">2</span>).equals(<span class="string">"PC"</span>)) {</span><br><span class="line">                <span class="type">SatelliteData</span> <span class="variable">satelliteDataSP3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SatelliteData</span>();</span><br><span class="line">                satelliteDataSP3.setYear(satelliteData.year);</span><br><span class="line">                satelliteDataSP3.setMonth(satelliteData.month);</span><br><span class="line">                satelliteDataSP3.setDay(satelliteData.day);</span><br><span class="line">                satelliteDataSP3.setHour(satelliteData.hour);</span><br><span class="line">                satelliteDataSP3.setMin(satelliteData.min);</span><br><span class="line">                satelliteDataSP3.setSec(satelliteData.sec);</span><br><span class="line">                satelliteDataSP3.PRN = Integer.parseInt(line.substring(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">                satelliteDataSP3.X = Double.parseDouble(line.substring(<span class="number">5</span>, <span class="number">18</span>).trim())*<span class="number">1000</span>;</span><br><span class="line">                satelliteDataSP3.Y = Double.parseDouble(line.substring(<span class="number">19</span>, <span class="number">32</span>).trim())*<span class="number">1000</span>;</span><br><span class="line">                satelliteDataSP3.Z = Double.parseDouble(line.substring(<span class="number">33</span>, <span class="number">46</span>).trim())*<span class="number">1000</span>;</span><br><span class="line">                satelliteDataSP3List.add(satelliteDataSP3);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> satelliteDataSP3List;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SatelliteData</span> {</span><br><span class="line">    Integer PRN;<span class="comment">//卫星的PRN码</span></span><br><span class="line">    <span class="comment">//卫星时间</span></span><br><span class="line">    Integer year;</span><br><span class="line">    Integer month;</span><br><span class="line">    Integer day;</span><br><span class="line">    Integer hour;</span><br><span class="line">    Integer min;</span><br><span class="line">    Integer sec;</span><br><span class="line">    <span class="comment">//卫星时钟参数</span></span><br><span class="line">    Double clockDeviation;<span class="comment">//卫星时钟偏差钟差</span></span><br><span class="line">    Double clockDrift;<span class="comment">//卫星时钟漂移</span></span><br><span class="line">    Double clockDriftRate;<span class="comment">//卫星时钟漂移率</span></span><br><span class="line"></span><br><span class="line">    Double effectiveAge;<span class="comment">//星历数据的有效龄期</span></span><br><span class="line">    Double Crs;<span class="comment">// 轨道半径正弦改正项</span></span><br><span class="line">    Double delta_n;<span class="comment">//平均运动修正量</span></span><br><span class="line">    Double M0;<span class="comment">//toe 时的平近点角</span></span><br><span class="line"></span><br><span class="line">    Double Cuc;<span class="comment">//纬度幅角余弦改正项</span></span><br><span class="line">    Double e;<span class="comment">//卫星轨道偏心率</span></span><br><span class="line">    Double Cus;<span class="comment">//纬度幅角正弦改正项</span></span><br><span class="line">    Double sqrt_a;<span class="comment">//轨道长半径平根</span></span><br><span class="line"></span><br><span class="line">    Double toe;<span class="comment">//星历的基准时间</span></span><br><span class="line">    Double Cic;<span class="comment">//轨道倾角余弦调和项</span></span><br><span class="line">    Double OMG0;<span class="comment">//升交点赤经</span></span><br><span class="line">    Double Cis;<span class="comment">//轨道倾角正弦项</span></span><br><span class="line"></span><br><span class="line">    Double I;<span class="comment">//轨道倾角</span></span><br><span class="line">    Double Crc;<span class="comment">//轨道半径余弦调和项</span></span><br><span class="line">    Double omg;<span class="comment">//近地点角距</span></span><br><span class="line">    Double OMG0_DOT;<span class="comment">//升交点赤经变率</span></span><br><span class="line"></span><br><span class="line">    Double I_dot;<span class="comment">//轨道倾角变化率</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SatelliteData{"</span> +</span><br><span class="line">                <span class="string">"PRN="</span> + PRN +</span><br><span class="line">                <span class="string">", year="</span> + year +</span><br><span class="line">                <span class="string">", month="</span> + month +</span><br><span class="line">                <span class="string">", day="</span> + day +</span><br><span class="line">                <span class="string">", hour="</span> + hour +</span><br><span class="line">                <span class="string">", min="</span> + min +</span><br><span class="line">                <span class="string">", sec="</span> + sec +</span><br><span class="line">                <span class="string">", clockDeviation="</span> + clockDeviation +</span><br><span class="line">                <span class="string">", clockDrift="</span> + clockDrift +</span><br><span class="line">                <span class="string">", clockDriftRate="</span> + clockDriftRate +</span><br><span class="line">                <span class="string">", effectiveAge="</span> + effectiveAge +</span><br><span class="line">                <span class="string">", Crs="</span> + Crs +</span><br><span class="line">                <span class="string">", delta_n="</span> + delta_n +</span><br><span class="line">                <span class="string">", M0="</span> + M0 +</span><br><span class="line">                <span class="string">", Cuc="</span> + Cuc +</span><br><span class="line">                <span class="string">", e="</span> + e +</span><br><span class="line">                <span class="string">", Cus="</span> + Cus +</span><br><span class="line">                <span class="string">", sqrt_a="</span> + sqrt_a +</span><br><span class="line">                <span class="string">", toe="</span> + toe +</span><br><span class="line">                <span class="string">", Cic="</span> + Cic +</span><br><span class="line">                <span class="string">", OMG0="</span> + OMG0 +</span><br><span class="line">                <span class="string">", Cis="</span> + Cis +</span><br><span class="line">                <span class="string">", I="</span> + I +</span><br><span class="line">                <span class="string">", Crc="</span> + Crc +</span><br><span class="line">                <span class="string">", omg="</span> + omg +</span><br><span class="line">                <span class="string">", OMG0_DOT="</span> + OMG0_DOT +</span><br><span class="line">                <span class="string">", I_dot="</span> + I_dot +</span><br><span class="line">                <span class="string">", X="</span> + X +</span><br><span class="line">                <span class="string">", Y="</span> + Y +</span><br><span class="line">                <span class="string">", Z="</span> + Z +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Double X;</span><br><span class="line">    Double Y;</span><br><span class="line">    Double Z;</span><br><span class="line"></span><br><span class="line">    Double dx;</span><br><span class="line">    Double dy;</span><br><span class="line">    Double dz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getX</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> X;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Double x)</span> {</span><br><span class="line">        X = x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getY</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Y;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Double y)</span> {</span><br><span class="line">        Y = y;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getZ</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Z;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZ</span><span class="params">(Double z)</span> {</span><br><span class="line">        Z = z;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPRN</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> PRN;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPRN</span><span class="params">(<span class="type">int</span> PRN)</span> {</span><br><span class="line">        <span class="built_in">this</span>.PRN = PRN;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getYear</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(Integer year)</span> {</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getMonth</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(Integer month)</span> {</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getDay</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(Integer day)</span> {</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getHour</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHour</span><span class="params">(Integer hour)</span> {</span><br><span class="line">        <span class="built_in">this</span>.hour = hour;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getMin</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMin</span><span class="params">(Integer min)</span> {</span><br><span class="line">        <span class="built_in">this</span>.min = min;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSec</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sec;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSec</span><span class="params">(Integer sec)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sec = sec;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getClockDeviation</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> clockDeviation;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClockDeviation</span><span class="params">(Double clockDeviation)</span> {</span><br><span class="line">        <span class="built_in">this</span>.clockDeviation = clockDeviation;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getClockDrift</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> clockDrift;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClockDrift</span><span class="params">(Double clockDrift)</span> {</span><br><span class="line">        <span class="built_in">this</span>.clockDrift = clockDrift;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getClockDriftRate</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> clockDriftRate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClockDriftRate</span><span class="params">(Double clockDriftRate)</span> {</span><br><span class="line">        <span class="built_in">this</span>.clockDriftRate = clockDriftRate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getEffectiveAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> effectiveAge;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEffectiveAge</span><span class="params">(Double effectiveAge)</span> {</span><br><span class="line">        <span class="built_in">this</span>.effectiveAge = effectiveAge;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCrs</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Crs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCrs</span><span class="params">(Double crs)</span> {</span><br><span class="line">        Crs = crs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getDelta_n</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> delta_n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDelta_n</span><span class="params">(Double delta_n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.delta_n = delta_n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getM0</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> M0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM0</span><span class="params">(Double m0)</span> {</span><br><span class="line">        M0 = m0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCuc</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Cuc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCuc</span><span class="params">(Double cuc)</span> {</span><br><span class="line">        Cuc = cuc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getE</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setE</span><span class="params">(Double e)</span> {</span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCus</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Cus;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCus</span><span class="params">(Double cus)</span> {</span><br><span class="line">        Cus = cus;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getSqrt_a</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sqrt_a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqrt_a</span><span class="params">(Double sqrt_a)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sqrt_a = sqrt_a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getToe</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> toe;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToe</span><span class="params">(Double toe)</span> {</span><br><span class="line">        <span class="built_in">this</span>.toe = toe;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCic</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Cic;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCic</span><span class="params">(Double cic)</span> {</span><br><span class="line">        Cic = cic;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getOMG0</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> OMG0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOMG0</span><span class="params">(Double OMG0)</span> {</span><br><span class="line">        <span class="built_in">this</span>.OMG0 = OMG0;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCis</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Cis;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCis</span><span class="params">(Double cis)</span> {</span><br><span class="line">        Cis = cis;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getI</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> I;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setI</span><span class="params">(Double i)</span> {</span><br><span class="line">        I = i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getCrc</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> Crc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCrc</span><span class="params">(Double crc)</span> {</span><br><span class="line">        Crc = crc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getOmg</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> omg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOmg</span><span class="params">(Double omg)</span> {</span><br><span class="line">        <span class="built_in">this</span>.omg = omg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getOMG0_DOT</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> OMG0_DOT;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOMG0_DOT</span><span class="params">(Double OMG0_DOT)</span> {</span><br><span class="line">        <span class="built_in">this</span>.OMG0_DOT = OMG0_DOT;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getI_dot</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> I_dot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setI_dot</span><span class="params">(Double i_dot)</span> {</span><br><span class="line">        I_dot = i_dot;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">Read</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line">        <span class="type">ReadSp3</span> <span class="variable">readSp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadSp3</span>();</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">61</span>];</span><br><span class="line">        <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> dx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> dy=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> dz=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> rx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> ry=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> rz=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> RMS=<span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">resultOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">335</span>; i &lt; <span class="number">335</span>+<span class="number">31</span>; i++) {</span><br><span class="line">        List&lt;SatelliteData&gt; satelliteDataList = read.ReadB(String.valueOf(i));</span><br><span class="line">        List&lt;SatelliteData&gt; satelliteDataSP3List = readSp3.ReadSp3(String.valueOf(i));</span><br><span class="line">        <span class="keyword">for</span> (SatelliteData satelliteData:satelliteDataList){</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.of(satelliteData.year, satelliteData.month, satelliteData.day, satelliteData.hour, satelliteData.min, satelliteData.sec);</span><br><span class="line">            <span class="keyword">for</span> (SatelliteData satelliteDataSP3:satelliteDataSP3List){</span><br><span class="line">                <span class="type">LocalDateTime</span> <span class="variable">timeSP3</span> <span class="operator">=</span> LocalDateTime.of(satelliteDataSP3.year, satelliteDataSP3.month, satelliteDataSP3.day, satelliteDataSP3.hour, satelliteDataSP3.min, satelliteDataSP3.sec);</span><br><span class="line">                <span class="keyword">if</span> (time.isEqual(timeSP3)&amp;&amp; satelliteData.PRN.equals(satelliteDataSP3.PRN)){</span><br><span class="line">                    <span class="type">double</span> X=satelliteData.X-satelliteDataSP3.X;</span><br><span class="line">                    <span class="type">double</span> Y=satelliteData.Y-satelliteDataSP3.Y;</span><br><span class="line">                    <span class="type">double</span> Z=satelliteData.Z-satelliteDataSP3.Z;</span><br><span class="line">                    <span class="type">double</span> D=Math.sqrt(X*X+Y*Y+Z*Z);</span><br><span class="line">                    c++;</span><br><span class="line">                    <span class="comment">//if (Math.abs(X) &gt; 10 ||  Math.abs(Y) &gt; 10||  Math.abs(Z) &gt; 10){</span></span><br><span class="line">                        <span class="keyword">if</span> (Math.abs(X) &lt; <span class="number">10</span> &amp;&amp; Math.abs(Y) &lt; <span class="number">10</span> &amp;&amp; Math.abs(Z) &lt; <span class="number">10</span>&amp;&amp;(satelliteData.PRN==<span class="number">22</span>)) {</span><br><span class="line">                            System.out.println(satelliteData.PRN + <span class="string">","</span> + satelliteData.day + <span class="string">" "</span> + satelliteData.hour +  <span class="string">","</span> + X + <span class="string">","</span> + Y + <span class="string">","</span> + Z+<span class="string">","</span>+D);</span><br><span class="line">                            dx+=X;</span><br><span class="line">                            dy+=Y;</span><br><span class="line">                            dz+=Z;</span><br><span class="line">                            rx+=X*X;</span><br><span class="line">                            ry+=Y*Y;</span><br><span class="line">                            rz+=Z*Z;</span><br><span class="line">                            <span class="comment">//System.out.println(X+"     "+Y+"    "+Z);</span></span><br><span class="line">                            resultOutput.append(satelliteData.PRN + <span class="string">","</span> + ((satelliteData.day-<span class="number">1</span>)*<span class="number">24</span>+ satelliteData.hour) +  <span class="string">","</span> + X + <span class="string">","</span> + Y + <span class="string">","</span> + Z +<span class="string">","</span>+D +<span class="string">"\n"</span>);</span><br><span class="line">                            <span class="comment">//resultOutput.append(satelliteData.PRN + "," +satelliteData.day+  ","+ satelliteData.hour+  "," + X + "," + Y + "," + Z +","+D +"\n");</span></span><br><span class="line">                            a[satelliteData.PRN]++;</span><br><span class="line">                            n+=X*X+Y*Y+Z*Z;</span><br><span class="line">                            b++;</span><br><span class="line">                        }</span><br><span class="line">               }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"dx均值为"</span>+dx/b);</span><br><span class="line">        System.out.println(<span class="string">"dxRMS为"</span>+Math.sqrt(rx/b));</span><br><span class="line">        System.out.println(<span class="string">"dy均值为"</span>+dy/b);</span><br><span class="line">        System.out.println(<span class="string">"dyRMS为"</span>+Math.sqrt(ry/b));</span><br><span class="line">        System.out.println(<span class="string">"dz均值为"</span>+dz/b);</span><br><span class="line">        System.out.println(<span class="string">"dzRMS为"</span>+Math.sqrt(rz/b));</span><br><span class="line">        System.out.println(Math.sqrt(n/b));</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> resultOutput.toString();</span><br><span class="line">        <span class="comment">//File file = new File("..\\Result\\所有卫星小时误差小于10.txt");</span></span><br><span class="line">        <span class="comment">//FileWriter fileWriter = new FileWriter(file, true);</span></span><br><span class="line">        <span class="comment">//BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);</span></span><br><span class="line">        <span class="comment">//bufferedWriter.write(output);</span></span><br><span class="line">        <span class="comment">//bufferedWriter.flush();</span></span><br><span class="line">        <span class="comment">//fileWriter.close();</span></span><br><span class="line">        <span class="comment">//bufferedWriter.close();</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper注册中心</title>
      <link href="/hu-lian-wang-xiang-mu-jia-gou/zookeeper/zookeeper-zhu-ce-zhong-xin/"/>
      <url>/hu-lian-wang-xiang-mu-jia-gou/zookeeper/zookeeper-zhu-ce-zhong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Zookeeper概念"><a href="#1-Zookeeper概念" class="headerlink" title="1. Zookeeper概念"></a>1. Zookeeper概念</h1><ul><li>Zookeeper 是 Apache Hadoop 项目下的一个子项目，是一个树形目录服务</li><li>Zookeeper 是一个分布式的、开源的分布式应用程序的协调服务</li><li>Zookeeper 提供的主要功能包括<ul><li>配置管理</li><li>分布式锁</li><li>集群管理</li></ul></li></ul><h1 id="2-ZooKeeper-命令操作"><a href="#2-ZooKeeper-命令操作" class="headerlink" title="2. ZooKeeper 命令操作"></a>2. ZooKeeper 命令操作</h1><h2 id="2-1-Zookeeper-数据模型"><a href="#2-1-Zookeeper-数据模型" class="headerlink" title="2.1 Zookeeper 数据模型"></a>2.1 Zookeeper 数据模型</h2><ul><li>ZooKeeper 是一个树形目录服务,其数据模型和Unix的文件系统目录树很类似，拥有一个层次化结构</li><li>这里面的每一个节点都被称为： ZNode，每个节点上都会保存自己的数据和节点信息</li><li>节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下</li></ul><blockquote><p>节点可以分为四大类</p></blockquote><ul><li>PERSISTENT 持久化节点</li><li>EPHEMERAL 临时节点 ：-e</li><li>PERSISTENT_SEQUENTIAL 持久化顺序节点 ：-s</li><li>EPHEMERAL_SEQUENTIAL 临时顺序节点 ：-es</li></ul><h2 id="2-2-Zookeeper-服务端常用命令"><a href="#2-2-Zookeeper-服务端常用命令" class="headerlink" title="2.2 Zookeeper 服务端常用命令"></a>2.2 Zookeeper 服务端常用命令</h2><ul><li>启动 ZooKeeper 服务: ./zkServer.sh start</li><li>查看 ZooKeeper 服务状态: ./zkServer.sh status</li><li>停止 ZooKeeper 服务: ./zkServer.sh stop </li><li>重启 ZooKeeper 服务: ./zkServer.sh restart</li></ul><h2 id="2-3-Zookeeper-客户端常用命令"><a href="#2-3-Zookeeper-客户端常用命令" class="headerlink" title="2.3 Zookeeper 客户端常用命令"></a>2.3 Zookeeper 客户端常用命令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>./zkCli.sh –server ip:port</td><td>连接ZooKeeper服务端</td></tr><tr><td>quit</td><td>断开连接</td></tr><tr><td>help</td><td>查看命令帮助</td></tr><tr><td>ls 目录</td><td>显示指定目录下节点</td></tr><tr><td>create /节点path value</td><td>创建节点</td></tr><tr><td>get /节点path</td><td>获取节点值</td></tr><tr><td>set /节点path value</td><td>设置节点值</td></tr><tr><td>delete /节点path</td><td>删除单个节点</td></tr><tr><td>deleteall /节点path</td><td>删除带有子节点的节点</td></tr><tr><td>create -e /节点path value</td><td>创建临时节点</td></tr><tr><td>create -s /节点path value</td><td>创建顺序节点</td></tr><tr><td>ls –s /节点path</td><td>查询节点详细信息</td></tr></tbody></table><blockquote><p>详细信息含义</p></blockquote><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>czxid</td><td>节点被创建的事务ID</td></tr><tr><td>ctime</td><td>创建时间</td></tr><tr><td>mzxid</td><td>最后一次被更新的事务ID</td></tr><tr><td>mtime</td><td>修改时间</td></tr><tr><td>pzxid</td><td>子节点列表最后一次被更新的事务ID</td></tr><tr><td>cversion</td><td>子节点的版本号</td></tr><tr><td>dataversion</td><td>数据版本号</td></tr><tr><td>aclversion</td><td>权限版本号</td></tr><tr><td>ephemeralOwner</td><td>用于临时节点，代表临时节点的事务ID，如果为持久节点则为0</td></tr><tr><td>dataLength</td><td>节点存储的数据的长度</td></tr><tr><td>numChildren</td><td>当前节点的子节点个数</td></tr></tbody></table><h1 id="3-ZooKeeper-JavaAPI-操作"><a href="#3-ZooKeeper-JavaAPI-操作" class="headerlink" title="3. ZooKeeper JavaAPI 操作"></a>3. ZooKeeper JavaAPI 操作</h1><h2 id="3-1-Curator-介绍"><a href="#3-1-Curator-介绍" class="headerlink" title="3.1 Curator 介绍"></a>3.1 Curator 介绍</h2><ul><li><p>Curator 是 Apache ZooKeeper 的Java客户端库</p></li><li><p>常见的ZooKeeper Java API ：</p><ul><li>原生Java API</li><li>ZkClient</li><li>Curator</li></ul></li><li><p>Curator 项目的目标是简化 ZooKeeper 客户端的使用</p></li></ul><p><strong>Curator 最初是 Netfix 研发的,后来捐献了 Apache 基金会,目前是 Apache 的顶级项目</strong></p><h2 id="3-2-Curator-API-常用操作"><a href="#3-2-Curator-API-常用操作" class="headerlink" title="3.2 Curator API 常用操作"></a>3.2 Curator API 常用操作</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">修改节点</button></li><li class="tab"><button type="button" data-href="#1-3">建立连接</button></li><li class="tab"><button type="button" data-href="#1-4">添加节点</button></li><li class="tab"><button type="button" data-href="#1-5">删除节点</button></li><li class="tab"><button type="button" data-href="#1-6">修改节点</button></li><li class="tab"><button type="button" data-href="#1-7">查询节点</button></li><li class="tab"><button type="button" data-href="#1-8">Watch事件监听</button></li><li class="tab"><button type="button" data-href="#1-9">分布式锁实现</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--curator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> {</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * @param connectString       连接字符串。zk server 地址和端口 "192.168.149.135:2181,192.168.149.136:2181"</span></span><br><span class="line"><span class="comment">        * @param sessionTimeoutMs    会话超时时间 单位ms</span></span><br><span class="line"><span class="comment">        * @param connectionTimeoutMs 连接超时时间 单位ms</span></span><br><span class="line"><span class="comment">        * @param retryPolicy         重试策略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="comment">//重试策略</span></span><br><span class="line">       <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">       <span class="comment">//1.第一种方式</span></span><br><span class="line">       <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.newClient(<span class="string">"192.168.149.135:2181"</span>,</span><br><span class="line">               <span class="number">60</span> * <span class="number">1000</span>, <span class="number">15</span> * <span class="number">1000</span>, retryPolicy);</span><br><span class="line">       <span class="comment">//重试策略</span></span><br><span class="line">       <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>);</span><br><span class="line">       <span class="comment">//2.第二种方式 链式编程 namespace表示只使用该名称下的空间</span></span><br><span class="line">       <span class="comment">//CuratorFrameworkFactory.builder();</span></span><br><span class="line">       client = CuratorFrameworkFactory.builder()</span><br><span class="line">               .connectString(<span class="string">"192.168.149.135:2181"</span>)</span><br><span class="line">               .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">               .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">               .retryPolicy(retryPolicy)</span><br><span class="line">               .namespace(<span class="string">"itheima"</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//开启连接</span></span><br><span class="line">       client.start();</span><br><span class="line">   }</span><br><span class="line"><span class="comment">//最后要关闭连接</span></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> {</span><br><span class="line">       <span class="keyword">if</span> (client != <span class="literal">null</span>) {</span><br><span class="line">           client.close();</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p>创建节点：create 持久 临时 顺序 数据</p><ol><li><p>基本创建 ：create().forPath(“”)</p></li><li><p>创建节点 带有数据:create().forPath(“”,data)</p></li><li><p>设置节点的类型：create().withMode().forPath(“”,data)</p></li><li><p>创建多级节点  /app1/p1 ：create().creatingParentsIfNeeded().forPath(“”,data)</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//1. 基本创建</span></span><br><span class="line">       <span class="comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">"/app1"</span>);</span><br><span class="line">       System.out.println(path);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//2. 创建节点 带有数据</span></span><br><span class="line">       <span class="comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">"/app2"</span>, <span class="string">"hehe"</span>.getBytes());</span><br><span class="line">       System.out.println(path);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate3</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//3. 设置节点的类型</span></span><br><span class="line">       <span class="comment">//默认类型：持久化 可以设置临时节点 如果要用linux查看需要用个while(true)循环保证节点不关闭</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">"/app3"</span>);</span><br><span class="line">       System.out.println(path);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate4</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//4. 创建多级节点  /app1/p1</span></span><br><span class="line">       <span class="comment">//creatingParentsIfNeeded():如果父节点不存在，则创建父节点</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().creatingParentsIfNeeded().forPath(<span class="string">"/app4/p1"</span>);</span><br><span class="line">       System.out.println(path);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><p>查询节点：</p><ol><li>查询数据：get: getData().forPath()</li><li>查询子节点： ls: getChildren().forPath()</li><li>查询节点状态信息：ls -s:getData().storingStatIn(状态对象).forPath()</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//1. 查询数据：get</span></span><br><span class="line">    <span class="type">byte</span>[] data = client.getData().forPath(<span class="string">"/app1"</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">// 2. 查询子节点： ls</span></span><br><span class="line">    List&lt;String&gt; path = client.getChildren().forPath(<span class="string">"/"</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet3</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    System.out.println(status);</span><br><span class="line">    <span class="comment">//3. 查询节点状态信息：ls -s 版本升级后get不能查询状态信息但api没有变还是用getData</span></span><br><span class="line">    client.getData().storingStatIn(status).forPath(<span class="string">"/app1"</span>);</span><br><span class="line">    System.out.println(status);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-8"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-9"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 项目架构 </category>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 项目架构 </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo项目架构</title>
      <link href="/hu-lian-wang-xiang-mu-jia-gou/dubbo/dubbo-xiang-mu-jia-gou/"/>
      <url>/hu-lian-wang-xiang-mu-jia-gou/dubbo/dubbo-xiang-mu-jia-gou/</url>
      
        <content type="html"><![CDATA[<p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E5%8E%9F%E7%90%86%E8%BF%90%E8%A1%8C%E5%9B%BE.png" alt="Dubbo原理运行图"></p><p>实现步骤</p><ol><li><p>创建服务提供者Provider模块</p></li><li><p>创建服务消费者Consumer模块</p></li><li><p>在服务提供者模块编写 UserServiceImpl 提供服务</p></li><li><p>在服务消费者中的 UserController 远程调用UserServiceImpl 提供的服务</p></li><li><p>分别启动两个服务，测试</p></li></ol><h1 id="1-传统Srping和SpringMVC整合"><a href="#1-传统Srping和SpringMVC整合" class="headerlink" title="1. 传统Srping和SpringMVC整合"></a>1. 传统Srping和SpringMVC整合</h1><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><blockquote><ol><li>统一包版本 导入spring包</li></ol></blockquote><blockquote><ol start="2"><li>编写dubbo-service<ol><li>UserService接口</li><li>impl实现接口并加上Service注解</li><li>applciationContext包扫描</li></ol></li></ol></blockquote><blockquote><ol start="3"><li><p>编写dubbo-web</p><ol><li><p>UserController</p><ul><li><p>Controller注解</p></li><li><p>注入UserService</p></li><li><p>设置RequestMapping</p></li></ul></li><li><p>springmvc</p><ul><li>注解驱动</li><li>包扫描</li></ul></li><li><p>web中编写</p><ul><li><p>spring的监听器</p></li><li><p>前端控制器 </p></li><li><p>contextConfigLocation扫描 </p></li><li><p>Servletmapping</p></li></ul></li><li><p>在web pom.xml中加入service的依赖</p></li></ol></li></ol></blockquote><h2 id="1-1-dubbo-service"><a href="#1-1-dubbo-service" class="headerlink" title="1.1 dubbo-service"></a>1.1 dubbo-service</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">UserService</button></li><li class="tab"><button type="button" data-href="#1-3">UserServiceImpl</button></li><li class="tab"><button type="button" data-href="#1-4">applciationContext</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.4.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet3.0规范的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Dubbo的起步依赖，版本2.7之后统一为rg.apache.dubb --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${dubbo.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖service模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jyw.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jyw.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jyw.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo!~"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--注解包扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <h2 id="1-2-dubbo-web"><a href="#1-2-dubbo-web" class="headerlink" title="1.2 dubbo-web"></a>1.2 dubbo-web</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">web.xml</button></li><li class="tab"><button type="button" data-href="#1-3">springmvc</button></li><li class="tab"><button type="button" data-href="#1-4">UserController</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.4.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet3.0规范的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Dubbo的起步依赖，版本2.7之后统一为rg.apache.dubb --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${dubbo.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖service模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tomcat插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">   <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="comment">&lt;!-- Springmvc --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Service</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/sayHello")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <blockquote><p><strong>dubbo-service是被依赖的所以需要先maven安装一下</strong></p></blockquote><h1 id="2-改造成Dubbo项目"><a href="#2-改造成Dubbo项目" class="headerlink" title="2. 改造成Dubbo项目"></a>2. 改造成Dubbo项目</h1><h2 id="大致思路-1"><a href="#大致思路-1" class="headerlink" title="大致思路"></a>大致思路</h2><blockquote><ol><li>统一包版本 导入 spring 包与dubbo包</li></ol></blockquote><blockquote><ol start="2"><li>提取接口 dubbo-interface<ol><li>pom.xml声明</li><li>UserService接口</li></ol></li></ol></blockquote><blockquote><ol start="3"><li><p>编写dubbo-service</p><ol><li><p>编写UserServiceImpl接口 使用dubbo的Service注解对外发布</p></li><li><p>实现UserService接口</p></li><li><p>配置applicationContext 使用的dubbo就配置dubbo </p><ul><li><p>项目名称</p></li><li><p>注册中心地址</p></li><li><p>包扫描</p></li></ul></li><li><p>web.xml</p><ul><li>spring监听器</li><li>contextConfigLocation</li></ul></li><li><p>pom.xml依赖公共接口模块</p></li></ol></li></ol></blockquote><blockquote><ol start="4"><li><p>编写Dubbo-web</p><ol><li><p>编写UserController</p><ul><li>Controller 与 RequstMapping注解</li><li>用Reference远程注入UserService</li></ul></li></ol></li><li><p>编写springmvc.xml</p><ul><li>注解驱动<ul><li>包扫描</li><li>配置dubbo</li></ul></li></ul><ol start="3"><li><p>配置web.xml</p><ul><li>加载前端控制器</li></ul></li></ol><ul><li>contextConfigLocation<ul><li>servletmapping</li></ul></li></ul></li><li><p>pom.xml依赖公共接口模块</p></li></ol></blockquote><h2 id="2-1-提取接口-dubbo-interface"><a href="#2-1-提取接口-dubbo-interface" class="headerlink" title="2.1 提取接口 dubbo-interface"></a>2.1 提取接口 dubbo-interface</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">UserService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-服务提供者Dubbo-service"><a href="#2-2-服务提供者Dubbo-service" class="headerlink" title="2.2 服务提供者Dubbo-service"></a>2.2 服务提供者Dubbo-service</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">UserServiceImpl</button></li><li class="tab"><button type="button" data-href="#1-3">applicationContext.xml</button></li><li class="tab"><button type="button" data-href="#1-4">web.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.4.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet3.0规范的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Dubbo的起步依赖，版本2.7之后统一为rg.apache.dubb --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${dubbo.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖公共的接口模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tomcat插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service//将该类的对象创建出来，放到Spring的IOC容器中  bean定义</span></span><br><span class="line"><span class="comment">//从spring包下的service 换成 dubbo包下的service</span></span><br><span class="line"><span class="meta">@Service</span><span class="comment">//将这个类提供的方法（服务）对外发布。将访问的地址 ip，端口，路径注册到注册中心中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--&lt;context:component-scan base-package="cn.jyw.service" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--dubbo的配置--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--1.配置项目的名称,唯一--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-service"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--2.配置注册中心的地址--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.114.130:2181"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--3.配置dubbo包扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"cn.jyw.service.impl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">   <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-服务消费者Dubbo-web"><a href="#2-3-服务消费者Dubbo-web" class="headerlink" title="2.3 服务消费者Dubbo-web"></a>2.3 服务消费者Dubbo-web</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#1-2">UserController</button></li><li class="tab"><button type="button" data-href="#1-3">springmvc.xml</button></li><li class="tab"><button type="button" data-href="#1-4">web.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.4.1<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet3.0规范的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc的坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Dubbo的起步依赖，版本2.7之后统一为rg.apache.dubb --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${dubbo.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ZooKeeper客户端实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${zookeeper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖公共的接口模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖service模块--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;cn.jyw&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;dubbo-service&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tomcat插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Service</span></span><br><span class="line">    <span class="comment">//@Autowired//本地注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 从zookeeper注册中心获取userService的访问url</span></span><br><span class="line"><span class="comment">        2. 进行远程调用RPC</span></span><br><span class="line"><span class="comment">        3. 将结果封装为一个代理对象。给变量赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span><span class="comment">//远程注入</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/sayHello")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.配置项目的名称,唯一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-web"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--同一台机器上端口占用 不过不影响--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"qos.port"</span> <span class="attr">value</span>=<span class="string">"33333"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.配置注册中心的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.114.130:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.配置dubbo包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"cn.jyw.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Springmvc --&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>将提供者和消费的结构提取出来,改动只用改动公共接口即可</p></blockquote><h1 id="3-Dubbo高级特性"><a href="#3-Dubbo高级特性" class="headerlink" title="3. Dubbo高级特性"></a>3. Dubbo高级特性</h1><h2 id="3-1-序列化"><a href="#3-1-序列化" class="headerlink" title="3.1 序列化"></a>3.1 序列化</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="Dubbo序列化"></p><p>​                                                        实现序列化接口 <strong>implements</strong> Serializable</p><ul><li>dubbo 内部已经将序列化和反序列化的过程内部封装了</li><li>我们只需要在定义pojo类时**<code>实现Serializable接口</code>**即可</li><li>一般会定义一个公共的pojo模块，让生产者和消费者都依赖该模块</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jyw.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意！！！</span></span><br><span class="line"><span class="comment"> *  将来所有的pojo类都需要实现Serializable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> {</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> {</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-地址缓存"><a href="#3-2-地址缓存" class="headerlink" title="3.2 地址缓存"></a>3.2 地址缓存</h2><p><strong>注册中心挂了，服务是否可以正常访问？</strong></p><ul><li>可以，因为dubbo服务消费者在第一次调用时，会将服务提供方地址缓存到本地，以后在调用则不会访问注册中心</li><li>当服务提供者地址发生变化时，注册中心会通知服务消费者</li><li>如果服务提供者的地址发生变化，而注册中心又没有反应就会无法正常访问</li></ul><h2 id="3-3-超时与重试"><a href="#3-3-超时与重试" class="headerlink" title="3.3 超时与重试"></a>3.3 超时与重试</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E7%9A%84%E8%B6%85%E6%97%B6%E4%B8%8E%E9%87%8D%E8%AF%95.png" alt="Dubbo的超时与重试"></p><p>基本流程</p><ol><li>用户来访问<strong>服务消费者</strong></li><li><strong>服务消费者</strong><code>创建线程</code>单独访问<strong>服务提供者</strong>调用服务</li><li><strong>服务提供者</strong>处理好数据返回结果给<strong>服务消费者</strong></li><li><strong>服务消费者</strong>封装结果给用户</li></ol><p>特殊情况</p><ul><li>服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去</li><li>在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩</li></ul><blockquote><p>dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接<br>使用timeout属性配置超时时间，默认值1000，单位毫秒</p></blockquote><ul><li>设置了超时时间，在这个时间段内，无法完成服务访问，则自动断开连接</li><li>如果出现网络抖动，则这一次请求就会失败</li><li>Dubbo 提供重试机制来避免类似问题的发生</li><li>通过 retries  属性来设置重试次数。<strong>默认为 2 次</strong><code>加上开始的一次一共三次</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务的提供者的Service注解</span></span><br><span class="line"><span class="meta">@Service(timeout = 3000,retries = 2)</span><span class="comment">//当前服务3秒超时,重试2次，一共3次</span></span><br><span class="line"><span class="comment">//服务的消费者的Reference注解</span></span><br><span class="line"><span class="meta">@Reference(timeout = 1000)</span><span class="comment">//远程注入</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>一般建议将timeout配置在服务的提供者Service这里 服务的消费者Reference可以覆盖Service的超时</p></blockquote><h2 id="3-4-多版本"><a href="#3-4-多版本" class="headerlink" title="3.4 多版本"></a>3.4 多版本</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E5%A4%9A%E7%89%88%E6%9C%AC.png" alt="Dubbo多版本"></p><ul><li><p><code>灰度发布</code>：<strong>当出现新功能时，会让一部分用户先使用新功能，用户反馈没问题时，再将所有用户迁移到新功能</strong></p></li><li><p>dubbo 中使用version 属性来设置和调用同一个接口的不同版本</p></li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">服务提供者</button></li><li class="tab"><button type="button" data-href="#1-2">服务消费者v1.0</button></li><li class="tab"><button type="button" data-href="#1-3">服务消费者v2.0</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(version = "v2.0")</span><span class="comment">//远程注入 选择版本</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = "v1.0")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> </span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = "v2.0")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-5-负载均衡"><a href="#3-5-负载均衡" class="headerlink" title="3.5 负载均衡"></a>3.5 负载均衡</h2><blockquote><p> @Service(weight = 100)</p><p>在服务提供者的@Service上选择权重默认100</p><p>@Reference(loadbalance = “random”)//远程注入</p><p>在服务消费者的@Reference上选择均衡负载类型</p></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="Dubbo负载均衡"></p><p>负载均衡策略（4种）：</p><ul><li><p>Random ：按权重随机，默认值。按权重设置随机概率</p><p>随机概率为(权重)/(总权重)</p></li><li><p>RoundRobin ：按权重轮询</p><p>每次轮询各个机器所占比例根据权重固定</p></li><li><p>LeastActive：最少活跃调用数，相同活跃数的随机</p><p>根据服务提供者的活跃程度进行调用</p></li><li><p>ConsistentHash：一致性 Hash，相同参数的请求总是发到同一提供者</p><p>根据请求参数的值，利用Hash算法得出要去哪个服务提供者（值相同Hash就相同，就会一直去相同的服务提供者）</p></li></ul><h2 id="3-6-集群容错"><a href="#3-6-集群容错" class="headerlink" title="3.6 集群容错"></a>3.6 集群容错</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Dubbo%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99.png" alt="Dubbo集群容错"></p><blockquote><p>@Refernece(cluster = “failove”) //默认重试</p></blockquote><p>集群容错模式：</p><ul><li>Failover Cluster：<code>失败重试</code>。默认值。当出现失败，重试其它服务器 ，默认重试2次，使用 retries 配置<br>一般用于读操作</li><li>Failfast Cluster ：<code>快速失败</code>，只发起一次调用，失败立即报错<br>通常用于写操作。</li><li>Failsafe Cluster ：<code>失败安全</code>，出现异常时，直接忽略，返回一个空结果</li><li>Failback Cluster ：<code>失败自动恢复</code>，后台记录失败请求，定时重发<br>通常用于消息通知操作。</li><li>Forking Cluster ：<code>并行调用多个服务器</code>，只要一个成功即返回(<code>比较耗性能</code>)</li><li>Broadcast  Cluster ：<code>广播调用所有提供者</code>，逐个调用，任意一台报错则报错</li></ul><h2 id="3-7-服务降级"><a href="#3-7-服务降级" class="headerlink" title="3.7 服务降级"></a>3.7 服务降级</h2><p>服务降级方式: </p><ul><li><p><code>mock= force:return null</code>表示消费方对该服务的方法调用都直接返回null值,不发起远程调用<br>用来屏蔽不重要服务不可用时对调用方的影响</p></li><li><p><code>mock=fail:return null</code>表示消费方对该服务的方法调用在失败后，再返回null值,不抛异常<br>用来容忍不重要服务不稳定时对调用方的影响</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(mock = "fail:return null")</span><span class="comment">//不在调用userservice的服务</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 项目架构 </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 项目架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网项目架构</title>
      <link href="/hu-lian-wang-xiang-mu-jia-gou/hu-lian-wang-xiang-mu-jia-gou/"/>
      <url>/hu-lian-wang-xiang-mu-jia-gou/hu-lian-wang-xiang-mu-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="1-大型互联网项目架构目标"><a href="#1-大型互联网项目架构目标" class="headerlink" title="1. 大型互联网项目架构目标"></a>1. 大型互联网项目架构目标</h1><h2 id="1-1-传统项目"><a href="#1-1-传统项目" class="headerlink" title="1.1 传统项目"></a>1.1 传统项目</h2><blockquote><p>一般为企业员工使用 一般能用就行 使用人数少  小型的内部项目</p></blockquote><h2 id="1-2-互联网项目"><a href="#1-2-互联网项目" class="headerlink" title="1.2 互联网项目"></a>1.2 互联网项目</h2><blockquote><p>注重用户体验 :    <strong><code>美观</code>    <code>功能</code>    <code>速度</code>    <code>稳定性</code></strong></p></blockquote><blockquote><p>互联网项目的特点</p></blockquote><ul><li>用户多</li><li>流量大,并发高</li><li>海量数据</li><li>易受攻击</li><li>功能繁琐</li><li>变更块</li></ul><h2 id="1-3-大型互联网项目架构目标"><a href="#1-3-大型互联网项目架构目标" class="headerlink" title="1.3 大型互联网项目架构目标"></a>1.3 大型互联网项目架构目标</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">高性能</button></li><li class="tab"><button type="button" data-href="#1-2">高可用</button></li><li class="tab"><button type="button" data-href="#1-3">可伸缩</button></li><li class="tab"><button type="button" data-href="#1-4">高可扩展</button></li><li class="tab"><button type="button" data-href="#1-5">安全性</button></li><li class="tab"><button type="button" data-href="#1-6">敏捷性</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>提供快速的访问体验</p></blockquote><blockquote><p>衡量网站的性能指标</p></blockquote><ul><li><strong>响应时间</strong>：指执行一个请求从开始到最后收到响应数据所花费的总体时间</li><li><strong>并发数</strong>：指系统同时能处理的请求数量<ul><li><strong>并发连接数</strong>：指的是客户端向服务器发起请求，并建立了TCP连接。每秒钟服务器连接的总TCP数量</li><li><strong>请求数</strong>：也称为QPS(Query Per Second) 指每秒多少请求</li><li><strong>并发用户数</strong>：单位时间内有多少用户</li></ul></li><li><strong>吞吐量</strong>：指单位时间内系统能处理的请求数量<ul><li><strong>QPS</strong>：Query Per Second 每秒查询数</li><li><strong>TPS</strong>：Transactions Per Second 每秒事务数</li><li>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程<br>客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数</li><li>一个页面的一次访问，只会形成一个TPS<br>但一次页面请求，可能产生多次对服务器的请求，就会有多个QPS</li></ul></li></ul><p><code>QPS &gt;= 并发连接数 &gt;= TPS</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>网站服务一直可以正常访问</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>通过硬件增加/减少，提高/降低处理能力</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p>系统间耦合低，方便的通过新增/移除方式，增加/减少新的功能/模块</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p>提供网站安全访问和数据加密，安全存储等策略</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><p>随需应变，快速响应</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-集群和分布式"><a href="#2-集群和分布式" class="headerlink" title="2. 集群和分布式"></a>2. 集群和分布式</h1><blockquote><p>集群:许多模块一起,干一样的事</p><ul><li>一个业务模块，部署在多台服务器</li></ul><p>分布式:很多模块一起,但模块干的事不一样,合起来就是分布式项目</p><ul><li>一个大的业务系统，拆分为小的业务模块，分别部署在不同的机器上</li></ul></blockquote><h2 id="2-1-传统项目"><a href="#2-1-传统项目" class="headerlink" title="2.1 传统项目"></a>2.1 传统项目</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E4%BC%A0%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="传统项目结构"></p><h2 id="2-2-集群"><a href="#2-2-集群" class="headerlink" title="2.2 集群"></a>2.2 集群</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E9%9B%86%E7%BE%A4%E9%A1%B9%E7%9B%AE.png" alt="集群项目"></p><h2 id="2-3-集群分布式"><a href="#2-3-集群分布式" class="headerlink" title="2.3 集群分布式"></a>2.3 集群分布式</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E9%9B%86%E7%BE%A4%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE.png" alt="集群分布式"></p><h1 id="3-架构演进"><a href="#3-架构演进" class="headerlink" title="3. 架构演进"></a>3. 架构演进</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">单体架构</button></li><li class="tab"><button type="button" data-href="#1-2">垂直架构</button></li><li class="tab"><button type="button" data-href="#1-3">分布式架构</button></li><li class="tab"><button type="button" data-href="#1-4">SOA架构</button></li><li class="tab"><button type="button" data-href="#1-5">微服务架构</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="单体架构"></p><p>优点：</p><ul><li>简单：开发部署都很方便，小型项目首选\</li></ul><p>缺点：</p><ul><li><p>项目启动慢</p></li><li><p>可靠性差</p></li><li><p>可伸缩性差</p></li><li><p>扩展性和可维护性差</p></li><li><p>性能低</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%9E%82%E7%9B%B4%E6%9E%B6%E6%9E%84.png" alt="垂直架构"></p><blockquote><p>垂直架构是指将单体架构中的多个模块拆分为多个独立的项目<br>形成多个独立的单体架构</p></blockquote><p>单体架构存在的问题：</p><ul><li><p>项目启动慢</p></li><li><p>可靠性差</p></li><li><p>可伸缩性差</p></li><li><p>扩展性和可维护性差</p></li><li><p>性能低</p></li></ul><p>垂直架构存在的问题：</p><ul><li>重复功能太多</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84.png" alt="分布式架构"></p><blockquote><p>分布式架构是指在垂直架构的基础上，将公共业务模块抽取出来，作为独立的服务，供其他调用者消费，以实现服务的共享和重用</p><p><code>RPC</code>： <strong>Remote Procedure Call 远程过程调用</strong><br>有非常多的协议和技术来都实现了RPC的过程<br>比如：HTTP REST风格，Java RMI规范、WebService SOAP协议、Hession等等</p></blockquote><p>垂直架构存在的问题：</p><ul><li>重复功能太多</li></ul><p>分布式架构存在的问题：</p><ul><li>服务提供方一旦产生变更，所有消费方都需要变更</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SOA%E6%9E%B6%E6%9E%84.png" alt="SOA架构"></p><ul><li><p>SOA（Service-Oriented Architecture，面向服务的架构）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。</p></li><li><p>ESB（Enterparise Servce Bus) 企业服务总线，服务中介<br>主要是提供了一个服务于服务之间的交互<br>ESB 包含的功能如：负载均衡，流量控制，加密处理，服务的监控，异常处理，监控告急等等</p></li></ul><p>分布式架构存在的问题：</p><ul><li>服务提供方一旦产生变更，所有消费方都需要变更</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.png" alt="微服务架构"></p><blockquote><p>微服务架构是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用<br>这些小应用之间通过服务完成交互和集成</p><p>微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想 + 80%的领域建模思想</p></blockquote><p>特点：</p><ul><li><p>服务实现组件化：开发者可以自由选择开发技术。也不需要协调其他团队</p></li><li><p>服务之间交互一般使用REST API</p></li><li><p>去中心化：每个微服务有自己私有的数据库持久化业务数据</p></li><li><p>自动化部署：把应用拆分成为一个一个独立的单个服务，方便自动化部署、测试、运维</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>Dubbo 是 SOA时代的产物，SpringCloud 是微服务时代的产物</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 项目架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 项目架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/linux/linux-chang-yong-ming-ling/"/>
      <url>/linux/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Linux的简介"><a href="#1-Linux的简介" class="headerlink" title="1. Linux的简介"></a>1. Linux的简介</h1><h1 id="2-文件和目录管理指令"><a href="#2-文件和目录管理指令" class="headerlink" title="2. 文件和目录管理指令"></a>2. 文件和目录管理指令</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">ls命令</button></li><li class="tab"><button type="button" data-href="#1-2">cd命令</button></li><li class="tab"><button type="button" data-href="#1-3">cp命令</button></li><li class="tab"><button type="button" data-href="#1-4">cat命令</button></li><li class="tab"><button type="button" data-href="#1-5">df命令</button></li><li class="tab"><button type="button" data-href="#1-6">du命令</button></li><li class="tab"><button type="button" data-href="#1-7">file命令</button></li><li class="tab"><button type="button" data-href="#1-8">find命令</button></li><li class="tab"><button type="button" data-href="#1-9">1 9</button></li><li class="tab"><button type="button" data-href="#1-10">1 10</button></li><li class="tab"><button type="button" data-href="#1-11">1 11</button></li><li class="tab"><button type="button" data-href="#1-12">1 12</button></li><li class="tab"><button type="button" data-href="#1-13">1 13</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p><strong>命令名称：</strong> <strong>ls</strong></p><p><strong>使用语法</strong> : ls <code>[-alrtAFR]</code> [name…]<br><strong>功能</strong> <strong>:</strong> <strong>显示指定工作目录下之内容（列出目前工作目录所含之档案及子目录</strong>)。 </p><p>参数:</p><ul><li><strong><code>-a</code>  显示所有档案及目录</strong> (ls内定将档案名或目录名称开头为“.”的视为隐藏档，不会列出)</li><li><strong><code>-l</code>   除档案名称外，亦将档案型态、权限、拥有者、档案大小等资讯详细列出</strong></li><li><strong><code>-r</code>   将档案以相反次序显示</strong> (原定依英文字母次序)</li><li><strong><code>-t</code>   将档案依建立时间之先后次序列出</strong></li><li><strong><code>-A</code>   同-a，但不列出 “.” (目前目录)及 “..” (父目录)</strong></li><li><strong><code>-F</code>  在列出的档案名称后加一符号；</strong>例如可执行档则加“*”,目录则加“/”</li><li><strong><code>-R</code>  若目录下有档案，则以下之档案亦皆依序列出</strong></li></ul><p>范例：</p><ol><li><p>列出目前工作目录下所有名称是 s 开头的档案，愈新的排愈后面</p><p>ls -ltr s* </p></li><li><p>将 /bin 目录以下所有目录及档案详细资料列出</p><p>ls -lR /bin</p></li><li><p>列出目前工作目录下所有l档案及目录；目录于名称后加 “/”, 可执行档于名称后加 “*”</p><p>ls -AF</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>命令名称： cd<br>使用语法 : cd <code>[directory]</code><br>功能 :变换工作目录至 directory</p><p>参数 : directory 可为绝对路径或相对路径</p><ul><li><p><strong>若目录名称省略，则变换至用户的home directory (也就是登陆时所在的目录)</strong></p></li><li><p><strong><code>“.”</code>表示当前目录</strong></p></li><li><p><strong><code>“..”</code>表示上一级目录</strong></p></li><li><p><strong><code>“-”</code>表示进入此工作目录前所在的目录</strong></p></li><li><p><strong><code>“~”</code>表示home directory，即用户主目录</strong></p></li></ul><p>范例：</p><ol><li><p>进入用户主目录 </p><p>cd 或 cd ~</p></li><li><p>进入上一级目录下source目录</p><p>cd ../source</p></li><li><p>进入/usr/local目录</p><p>cd /usr/local</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>命令名称： cp<br>使用语法 :  cp [参数] source dest<br>                   cp [参数] source directory 功能 :将一个档案拷贝至另一档案，或将数个档案或目录拷贝至另一目录 </p><p>参数 :</p><p>source 表示源文件 后面表示要复制的地点</p><ul><li><p><strong><code>-a</code> 尽可能将档案状态、权限等资料都照原状予以复制，等同于-dpR</strong></p></li><li><p><strong><code>-r/-R</code> 若 source 中含有目录名，则将目录下之档案亦皆依序拷贝至目的地</strong></p></li><li><p><strong><code>-f</code> 若目的地已经有相同档名的档案存在，则在复制前先予以删除再行复制</strong></p></li><li><p><strong><code>-i</code> 在覆盖文件或目录时提示</strong></p></li></ul><p>范例：</p><ol><li><p>将当前目录下所有的.c文件复制到当前目录中的source目录下</p><p>cp *.c ./source</p></li><li><p>将目录source目录下所有内容复制到temp目录下 </p><p>cp –a source temp</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p>命令名称： cat<br>使用语法 :  cat <code>[参数]</code> file1 [file2…]<br>功能 :把档案串连接后传到基本输出<br>参数：</p><ul><li><strong><code>-n</code> 或 <code>--number</code> 由 1 开始对所有输出的行数编号</strong></li><li><strong><code>-b</code> 或 <code>--number-nonblank</code> 和 <code>-n</code> 相似，只不过对于空白行不编号</strong></li><li><strong><code>-s</code> 当遇到有连续两行以上的空白行，就代换为一行的空白行</strong><br>范例：<br>    输出hello.c文件内容，列出行号：<br>       cat –n hello.c</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p>命令名称： df<br>使用语法 : df [参数] [FILE]<br>功能 :显示文件系统磁盘空间使用的状况</p><p>参数 :</p><ul><li><strong><code>-k</code> 显示每个磁盘使用量</strong></li><li><strong><code>-a</code> 包含全部文件的系统文件</strong></li></ul><p>范例：显示系统所配置的每一个磁盘当前被占用的空间大小。<br>           df –k</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><p>命令名称： du<br>使用语法 : du [参数] [目录或文件]<br>功能 :显示指定的目录或文件所占用的磁盘空间</p><p>参数 : </p><ul><li><strong><code>-a</code>或<code>-all</code>   显示目录中所有文件的大小</strong></li><li><strong><code>-b</code>  显示目录或文件大小时，以byte为单位</strong></li><li><strong><code>-c</code>  显示每个目录和文件的大小，同时也示所有目录或文件的总和</strong></li><li><strong><code>-D</code> 显示指定符号连接的源文件大小。</strong></li><li><strong><code>-h</code>  以K，M，G为单位，提高信息的可读性</strong></li><li><strong><code>-H</code> 与<code>-h</code>参数相同，但是K，M，G是以1000为换算单位</strong></li><li><strong><code>-k</code>  以1024 bytes为单位</strong></li></ul><p>范例：显示/usr/local目录中每个文件及目录的大小，以k为单位<br>           du –kc /usr/local</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><p>命令名称 : file<br>使用语法 : file [参数] file<br>功能 : 辨别文件类型</p><p>参数 : </p><ul><li><strong><code>-b</code> 　列出辨识结果时，不显示文件名称</strong></li><li><strong><code>-c</code> 　详细显示指令执行过程，便于排错或分析程序执行的情形。</strong> </li><li><strong><code>-L</code> 　直接显示符号连接所指向的文件的类别</strong></li><li><strong><code>-v</code>　显示版本信息</strong></li><li><strong><code>-z</code> 　尝试去解读压缩文件的内容</strong></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-8"><p>命令名称 : find<br>使用语法 : find [path…] [expression]<br>功能 : 在path目录中查找符合expression表达式的文件</p><p>参数 : </p><ul><li><p>-name filename：按文件名查找</p></li><li><p>-type c：按文件类型进行查找，c是文件类型，可取的值为：</p><ul><li>-b(块设备文件)</li><li>c(字符设备文件)</li><li>d(目录)</li><li>p(管道文件)</li><li>f(一般文件)</li><li>l(链接文件)</li><li>s(socket文件)</li></ul></li><li><p>-user username  查找属主为username的文件</p></li><li><p>-atime n  查找n天以前被访问过的文件</p><ul><li><p>-mtime n  查找n天以前被修改过的文件</p></li><li><p>-cmin n  查找n分钟以前被修改过的文件</p></li><li><p>-exec cmd {}  对查找出来的文件执行cmd命令，{}表示找到的文件，命令要以“\;”结束。</p></li></ul></li></ul><p>范例 :</p><ol><li><p>查找/usr/local目录下所有的目录<br>find /usr/local –type d</p></li><li><p>在/etc目录下查找文件名为i18n的文件<br>find /etc –name i18n</p></li><li><p>表示在用户当前的目录，搜寻所有以 .o 为结尾的文件并删除<br>ind . -name *.o -exec rm -f{} ;注意大括号里面没有空格。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-9"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-10"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-11"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-12"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-13"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue与Element</title>
      <link href="/web/vue-element/vue-yu-element/"/>
      <url>/web/vue-element/vue-yu-element/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><blockquote><p>Vue 是一套前端框架，免除原生JavaScript中的DOM操作，简化书写</p></blockquote><p>基于MVVM(Model-View-ViewModel)思想，实现数据的双向绑定，将编程的关注点放在数据上。之前我们是将关注点放在 了 DOM 操作上；而要了解 MVVM 思想，必须先聊聊 MVC 思想，如下图就是 MVC 思想图解</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/MVC%E6%80%9D%E6%83%B3%E5%9B%BE%E8%A7%A3.png" alt="MVC思想图解"></p><p><code>C 就是咱们 js 代码，M 就是数据，而 V 是页面上展示的内容</code></p><p>MVC 思想是没法进行双向绑定的<br>双向绑定是指当数据模型数据发生变化时，页面展示的会随之发生变化，而如果表单数据 发生变化，绑定的模型数据也随之发生变化<br>接下来我们聊聊 MVVM 思想，如下图是三个组件图解</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/MVVM%E4%B8%89%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%9B%BE%E8%A7%A3.png" alt="MVVM三个组件图解"></p><p>图中的 Model 就是我们的数据， View 是视图，也就是页面标签，用户可以通过浏览器看到的内容<br>Model 和 View 是通 过 ViewModel 对象进行双向绑定的，而 ViewModel 对象是 Vue 提供的<br>接下来让大家看一下双向绑定的效果，输入框绑定了 username 模型数据，而在页面上也使用 <code>{{}}</code> 绑定了 username 模型数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插值表达式--&gt;</span></span><br><span class="line">    {{username}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 创建Vue核心对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>){  <span class="comment">// data() 是 ECMAScript 6 版本的新的写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>{</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">""</span></span></span><br><span class="line"><span class="language-javascript">            } </span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当我们在输入框中输入内容，而输入框后面随之实时的展示我们输入的内容，这就是双向绑定的效果</p><h1 id="2-Vue-指令"><a href="#2-Vue-指令" class="headerlink" title="2. Vue 指令"></a>2. Vue 指令</h1><p><strong>指令</strong>：<strong>HTML 标签</strong>上带有 v- 前缀的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</p><p>常用的指令有：</p><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">v-bind</td><td align="center">为HTML标签绑定属性值，如设置 href , css样式等</td></tr><tr><td align="center">v-model</td><td align="center">在表单元素上创建双向数据绑定</td></tr><tr><td align="center">v-on</td><td align="center">为HTML标签绑定事件</td></tr><tr><td align="center">v-if</td><td align="center">条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td align="center">v-else</td><td align="center"></td></tr><tr><td align="center">v-else-if</td><td align="center"></td></tr><tr><td align="center">v-show</td><td align="center">根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td align="center">v-for</td><td align="center">列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h2 id="2-1-v-bind-amp-v-model-指令"><a href="#2-1-v-bind-amp-v-model-指令" class="headerlink" title="2.1 v-bind &amp; v-model 指令"></a>2.1 v-bind &amp; v-model 指令</h2><blockquote><p>v-bind  为HTML标签绑定属性值，如设置 href , css样式等</p></blockquote><p>该指令可以给标签原有属性绑定模型数据。这样模型数据发生变化，标签属性值也随之发生变化</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-bind 可以省略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-model  该指令可以给表单项标签绑定模型数据。这样就能实现双向绑定效果</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>演示代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 创建Vue核心对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">""</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">"https://www.baidu.com"</span></span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-v-on-指令"><a href="#2-2-v-on-指令" class="headerlink" title="2.2 v-on 指令"></a>2.2 v-on 指令</h2><blockquote><p>v-on 为HTML标签绑定事件</p></blockquote><p>我们在页面定义一个按钮，并给该按钮使用 v-on 指令绑定单击事件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"一个按钮"</span> <span class="attr">v-on:click</span>=<span class="string">"show()"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--而使用 v-on 时还可以使用简化的写法，将 v-on: 替换成 @ ，html代码如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"一个按钮"</span> @<span class="attr">click</span>=<span class="string">"show()"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面代码绑定的 show() 需要在 Vue 对象中的 methods 属性中定义出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">show</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">"我被点了"</span>);</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">});</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：<code>v-on:</code> 后面的事件名称是之前原生事件属性名去掉on</p><p>例如：</p><ul><li>单击事件 ： 事件属性名是 onclick，而在vue中使用是 <code>v-on:click</code></li><li>失去焦点事件：事件属性名是 onblur，而在vue中使用时 <code>v-on:blur</code></li></ul></blockquote><h2 id="2-3-条件判断指令"><a href="#2-3-条件判断指令" class="headerlink" title="2.3 条件判断指令"></a>2.3 条件判断指令</h2> <table border="1" cellpadding="5px" cellspacing="0px">      <tbody><tr>      <th>指令</th>      <th>作用</th>    </tr>     <tr>         <td>v-if</td>         <td rowspan="3">条件性的渲染某元素,判定为true时渲染,否则不渲染</td>     </tr>     <tr>         <td>v-else</td>     </tr>      <tr>         <td>v-else-if</td>     </tr>          <tr>         <td>v-show</td>         <td>根据条件展示某元素,区别在于切换的时display属性的值</td>     </tr></tbody></table><p>现在要实现，当 <code>count</code> 模型的数据是3时，在页面上展示 <code>div1</code> 内容；当 <code>count</code> 模型的数据是4时，在页面上展示 <code>div2</code> 内容；<code>count</code> 模型数据是其他值时，在页面上展示 <code>div3</code>。这里为了动态改变模型数据 <code>count</code> 的值，再定义一个输入框绑定 <code>count</code> 模型数据。html 代码如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"count == 3"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"count == 4"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"count"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1. 创建Vue核心对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">});</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后我们在看看 <code>v-show</code> 指令的效果，如果模型数据 <code>count </code> 的值是3时，展示 <code>div v-show</code> 内容，否则不展示，html页面代码如下</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"count == 3"</span>&gt;</span>div v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"count"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过上面的演示，发现 <code>v-show</code> 和 <code>v-if</code> 效果一样，那它们到底有什么区别呢</p></blockquote><p> <code>v-show</code> 不展示的原理是给对应的标签添加 <code>display</code> css属性，并将该属性值设置为 <code>none</code> ，这样就达到了隐藏的效果。而 <code>v-if</code> 指令是条件不满足时根本就不会渲染</p><h2 id="2-4-v-for-指令"><a href="#2-4-v-for-指令" class="headerlink" title="2.4 v-for 指令"></a>2.4 v-for 指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-for</td><td>列表渲染,遍历容器的元素或者对象的属性</td></tr></tbody></table><p>这个指令看到名字就知道是用来遍历的，该指令使用的格式如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签 v-for="变量名 in 集合模型数据"&gt;</span><br><span class="line">    {{变量名}}</span><br><span class="line">&lt;/标签&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：需要循环那个标签，<code>v-for</code> 指令就写在那个标签上</p></blockquote><p>如果在页面需要使用到集合模型数据的索引，就需要使用如下格式：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签 v-for="(变量名,索引变量) in 集合模型数据"&gt;</span><br><span class="line">    <span class="comment">&lt;!--索引变量是从0开始，所以要表示序号的话，需要手动的加1--&gt;</span></span><br><span class="line">   {{索引变量 + 1}} {{变量名}}</span><br><span class="line">&lt;/标签&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"addr in addrs"</span>&gt;</span></span><br><span class="line">        {{addr}} <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(addr,i) in addrs"</span>&gt;</span></span><br><span class="line">        {{i+1}}--{{addr}} <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 创建Vue核心对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">addrs</span>:[<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"西安"</span>]</span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-生命周期"><a href="#2-5-生命周期" class="headerlink" title="2.5 生命周期"></a>2.5 生命周期</h2><blockquote><p>生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法</p></blockquote><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>载入前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0).png" alt="Vue生命周期(钩子函数)"></p><h1 id="3-Element"><a href="#3-Element" class="headerlink" title="3. Element"></a>3. Element</h1><p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。</p><p>Element 提供了很多组件（组成网页的部件）供我们使用。例如 超链接、按钮、图片、表格等等~</p><p>如下图左边的是我们编写页面看到的按钮，上图右边的是 Element 提供的页面效果，效果一目了然</p><h2 id="3-1-食用方式"><a href="#3-1-食用方式" class="headerlink" title="3.1 食用方式"></a>3.1 食用方式</h2><ol><li>将资源<code>element-ui</code> 文件夹直接拷贝到项目的 <code>webapp</code> 下</li><li>创建页面，并在页面引入Element 的css、js文件 和 Vue.js</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>创建Vue核心对象<br>Element 是基于 Vue 的，所以使用Element时必须要创建 Vue 对象</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">"#app"</span></span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>官网复制Element组件代码</li></ol><blockquote><p>栗子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>朴素按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">plain</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">plain</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">plain</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"warning"</span> <span class="attr">plain</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">plain</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>圆角按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">round</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">round</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">round</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"warning"</span> <span class="attr">round</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">round</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">"el-icon-search"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">icon</span>=<span class="string">"el-icon-edit"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">icon</span>=<span class="string">"el-icon-check"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">icon</span>=<span class="string">"el-icon-message"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"warning"</span> <span class="attr">icon</span>=<span class="string">"el-icon-star-off"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">icon</span>=<span class="string">"el-icon-delete"</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">"#app"</span></span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-Element-布局"><a href="#3-2-Element-布局" class="headerlink" title="3.2 Element 布局"></a>3.2 Element 布局</h2><p>Element 提供了两种布局方式，分别是：</p><ul><li>Layout 布局</li><li>Container 布局容器</li></ul><blockquote><p>Layout 布局</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Vue </category>
          
          <category> Element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json与Ajax</title>
      <link href="/web/json-ajax/json-yu-ajax/"/>
      <url>/web/json-ajax/json-yu-ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AJAX"><a href="#1-AJAX" class="headerlink" title="1. AJAX"></a>1. AJAX</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>ASynchronous JavaScript And XML    异步的JavaScript 和 XML</p><p>异步和同步：客户端和服务器端相互通信的基础上</p><ul><li><code>异步</code>:客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作</li><li><code>同步</code>:客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作</li></ul><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术<br>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新<br>这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</p><p>传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><blockquote><p>AJAX提升用户的体验</p></blockquote><h2 id="1-2-实现方式"><a href="#1-2-实现方式" class="headerlink" title="1.2 实现方式"></a>1.2 实现方式</h2><blockquote><p>原生的JS实现方式（了解）</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建核心对象</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">{<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{<span class="comment">// code for IE6, IE5</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 建立连接</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        1. 请求方式：GET、POST</span></span><br><span class="line"><span class="comment">            * get方式，请求参数在URL后边拼接。send方法为空参</span></span><br><span class="line"><span class="comment">            * post方式，请求参数在send方法中定义</span></span><br><span class="line"><span class="comment">        2. 请求的URL：</span></span><br><span class="line"><span class="comment">        3. 同步或异步请求：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">"GET"</span>,<span class="string">"ajaxServlet?username=tom"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送请求 post就在里面send()里面放字符串</span></span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.接受并处理来自服务器的响应结果</span></span><br><span class="line"><span class="comment">//获取方式 ：xmlhttp.responseText</span></span><br><span class="line"><span class="comment">//什么时候获取？当服务器响应成功后再获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span></span><br><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    {</span><br><span class="line">       <span class="comment">//获取服务器的响应结果</span></span><br><span class="line">        <span class="keyword">var</span> responseText = xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">        <span class="title function_">alert</span>(responseText);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>JQeury实现方式</p></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">$.ajax()</button></li><li class="tab"><button type="button" data-href="#1-2">$.get()</button></li><li class="tab"><button type="button" data-href="#1-3">$.post()</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* 语法：$.<span class="title function_">ajax</span>({键值对});</span><br><span class="line"> <span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">            $.<span class="title function_">ajax</span>({</span><br><span class="line">                <span class="attr">url</span>:<span class="string">"ajaxServlet1111"</span> , <span class="comment">// 请求路径</span></span><br><span class="line">                <span class="attr">type</span>:<span class="string">"POST"</span> , <span class="comment">//请求方式</span></span><br><span class="line">                <span class="comment">//data: "username=jack&amp;age=23",//请求参数</span></span><br><span class="line">                <span class="attr">data</span>:{<span class="string">"username"</span>:<span class="string">"jack"</span>,<span class="string">"age"</span>:<span class="number">23</span>},</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) {</span><br><span class="line">                    <span class="title function_">alert</span>(data);</span><br><span class="line">                },<span class="comment">//响应成功后的回调函数</span></span><br><span class="line">                <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">"出错啦..."</span>)</span><br><span class="line">                },<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span><br><span class="line"></span><br><span class="line">                <span class="attr">dataType</span>:<span class="string">"text"</span><span class="comment">//设置接受到的响应数据的格式</span></span><br><span class="line">            });</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">发送get请求</span><br><span class="line">* 语法：$.<span class="title function_">get</span>(url, [data], [callback], [type])</span><br><span class="line">* 参数：</span><br><span class="line">* url：请求路径</span><br><span class="line">* data：请求参数</span><br><span class="line">* callback：回调函数</span><br><span class="line">* type：响应结果的类型</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">发送post请求</span><br><span class="line">* 语法：$.<span class="title function_">post</span>(url, [data], [callback], [type])</span><br><span class="line">* 参数：</span><br><span class="line">* url：请求路径</span><br><span class="line">* data：请求参数</span><br><span class="line">* callback：回调函数</span><br><span class="line">* type：响应结果的类型</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Axios实现方式</p></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">get请求</button></li><li class="tab"><button type="button" data-href="#1-2">post请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">'/user'</span>, {</span><br><span class="line">    <span class="attr">params</span>: {</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">'/user'</span>, {</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-JSON"><a href="#2-JSON" class="headerlink" title="2. JSON"></a>2. JSON</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p><strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation        JavaScript对象表示法</p><ul><li>json现在多用于存储和交换文本信息的语法</li></ul><ul><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析</li></ul><h2 id="2-2语法"><a href="#2-2语法" class="headerlink" title="2.2语法"></a>2.2语法</h2><blockquote><p>基本规则</p></blockquote><ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）    {“persons”:[{},{}]}</li><li>对象（在花括号中） {“address”:{“province”：”陕西”….}}</li><li>null</li></ol></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用{}定义json 格式</li><li>方括号保存数组：[]</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义基本格式</span></span><br><span class="line"> <span class="keyword">var</span> person = {<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>};</span><br><span class="line"><span class="comment">//1.嵌套格式 {}-&gt;[]</span></span><br><span class="line"><span class="keyword">var</span> person ={</span><br><span class="line">            <span class="string">"persons"</span>:[</span><br><span class="line">                {<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>},</span><br><span class="line">        {<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>},</span><br><span class="line">        {<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>}</span><br><span class="line">            ]</span><br><span class="line">        }; </span><br><span class="line"><span class="comment">//2.嵌套格式 []-&gt;{}</span></span><br><span class="line"> <span class="keyword">var</span> ps = [{<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>},</span><br><span class="line">           {<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>},</span><br><span class="line">           {<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>}];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>获取数据:</p></blockquote><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li><li>遍历</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">name</span>;</span><br><span class="line">person[<span class="string">"name"</span>]</span><br><span class="line"><span class="comment">//获取person对象中所有的键和值</span></span><br><span class="line">      <span class="comment">//for in 循环</span></span><br><span class="line">     <span class="comment">/* for(var key in person){</span></span><br><span class="line"><span class="comment">          //这样的方式获取不行。因为相当于  person."name"</span></span><br><span class="line"><span class="comment">          //alert(key + ":" + person.key);</span></span><br><span class="line"><span class="comment">          alert(key+":"+person[key]);</span></span><br><span class="line"><span class="comment">      }*/</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取ps中的所有值</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.<span class="property">length</span>; i++) {</span><br><span class="line">          <span class="keyword">var</span> p = ps[i];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p){</span><br><span class="line">              <span class="title function_">alert</span>(key+<span class="string">":"</span>+p[key]);</span><br><span class="line">          }</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Json </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Json </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql(三) 数据的CRUD与事务</title>
      <link href="/mysql/mysql-san-shu-ju-de-crud/"/>
      <url>/mysql/mysql-san-shu-ju-de-crud/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DML-操作表中的数据用于对表中的记录进行增删改操作"><a href="#1-DML-操作表中的数据用于对表中的记录进行增删改操作" class="headerlink" title="1 DML 操作表中的数据用于对表中的记录进行增删改操作"></a>1 DML 操作表中的数据<br>用于对表中的记录进行增删改操作</h1><h2 id="1-1-插入记录"><a href="#1-1-插入记录" class="headerlink" title="1.1 插入记录"></a>1.1 插入记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> [<span class="keyword">into</span>] 表名 [字段名] <span class="keyword">values</span> (字段值)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名：<span class="comment">-- 表示往哪张表中添加数据</span></span><br><span class="line">(字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, …)：<span class="comment">-- 要给哪些字段设置值</span></span><br><span class="line"><span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, …)：<span class="comment">-- 设置具体的值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入全部字段</span></span><br><span class="line"><span class="comment">-- 所有的字段名都写出来</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, 字段名 <span class="number">3</span>…) <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, 值 <span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 不写字段名</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, 值 <span class="number">3</span>…);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入部分数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, ...) <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, ...);</span><br></pre></td></tr></tbody></table></figure><p><code>注：没有添加数据的字段会使用 NULL</code></p><h2 id="1-2-蠕虫复制"><a href="#1-2-蠕虫复制" class="headerlink" title="1.2 蠕虫复制"></a>1.2 蠕虫复制</h2><blockquote><p>将一张已经存在的表中的数据复制到另一张表中</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将表名 2 中的所有的列复制到表名 1 中</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="number">1</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 只复制部分列</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="number">1</span>(列 <span class="number">1</span>, 列 <span class="number">2</span>) <span class="keyword">select</span> 列 <span class="number">1</span>, 列 <span class="number">2</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-更新表记录"><a href="#1-3-更新表记录" class="headerlink" title="1.3 更新表记录"></a>1.3 更新表记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="operator">=</span>值 [<span class="keyword">where</span> 条件表达式]</span><br><span class="line"><span class="keyword">update</span>: 需要更新的表名</span><br><span class="line"><span class="keyword">set</span>: 修改的列值</span><br><span class="line"><span class="keyword">where</span>: 符合条件的记录才更新</span><br><span class="line">你可以同时更新一个或多个字段。</span><br><span class="line">你可以在 <span class="keyword">where</span> 子句中指定任何条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不带条件修改数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值; <span class="comment">-- 修改所有的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带条件修改数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值 <span class="keyword">where</span> 字段名<span class="operator">=</span>值;</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-删除表记录"><a href="#1-4-删除表记录" class="headerlink" title="1.4 删除表记录"></a>1.4 删除表记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 表名 [<span class="keyword">where</span> 条件表达式]</span><br><span class="line">如果没有指定 <span class="keyword">where</span> 子句，MySQL 表中的所有记录将被删除。</span><br><span class="line">你可以在 <span class="keyword">where</span> 子句中指定任何条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不带条件删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带条件删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 truncate 删除表中所有记录</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>truncate 和 delete 的区别： truncate 相当于删除表的结构，再创建一张表</p></blockquote><h1 id="2-DQL-查询表中的数据"><a href="#2-DQL-查询表中的数据" class="headerlink" title="2. DQL 查询表中的数据"></a>2. DQL 查询表中的数据</h1><blockquote><p>查询不会对数据库中的数据进行修改.只是一种显示数据的方式</p></blockquote><h2 id="2-1-简单查询"><a href="#2-1-简单查询" class="headerlink" title="2.1 简单查询"></a>2.1 简单查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用*表示所有列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定列的数据,多个列之间以逗号分隔</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, 字段名 <span class="number">3</span>, ... fromm 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-指定列的别名进行查询"><a href="#2-2-指定列的别名进行查询" class="headerlink" title="2.2 指定列的别名进行查询"></a>2.2 指定列的别名进行查询</h2><blockquote><p>使用别名的好处： 显示的时候使用新的名字，并不修改表的结构</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对列指定别名</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span> <span class="keyword">as</span> 别名, 字段名 <span class="number">2</span> <span class="keyword">as</span> 别名... <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对列和表同时指定别名</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span> <span class="keyword">as</span> 别名, 字段名 <span class="number">2</span> <span class="keyword">as</span> 别名... <span class="keyword">from</span> 表名 <span class="keyword">as</span> 表别名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>表使用别名的原因：用于多表查询操作</p></blockquote><h2 id="2-3-清除重复值"><a href="#2-3-清除重复值" class="headerlink" title="2.3 清除重复值"></a>2.3 清除重复值</h2><blockquote><p>查询指定列并且结果不出现重复数据</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-查询结果参与运算"><a href="#2-4-查询结果参与运算" class="headerlink" title="2.4 查询结果参与运算"></a>2.4 查询结果参与运算</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 某列数据和固定值运算</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="number">1</span> <span class="operator">+</span> 固定值 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">某列数据和其他列数据参与运算</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="number">1</span> <span class="operator">+</span> 列名 <span class="number">2</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意: 参与运算的必须是数值类型</p></blockquote><h2 id="2-5-条件查询"><a href="#2-5-条件查询" class="headerlink" title="2.5 条件查询"></a>2.5 条件查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line">流程：取出表中的每条数据，满足条件的记录就返回，不满足条件的记录不返回</span><br></pre></td></tr></tbody></table></figure><blockquote><p>运算符</p></blockquote><table><thead><tr><th align="center">比较运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;、&lt;、&lt;=、&gt;=、=、<code>&lt;&gt; </code></td><td align="center">&lt;&gt;在 SQL 中表示不等于，在 mysql 中也可以使用!= <code>没有==</code></td></tr><tr><td align="center">BETWEEN…AND</td><td align="center">在一个范围之内，如：between 100 and 200<br>相当于条件在 100 到 200 之间，包头又包尾</td></tr><tr><td align="center">IN(集合)</td><td align="center">集合表示多个值，使用逗号分隔</td></tr><tr><td align="center">LIKE ‘张%’</td><td align="center">模糊查询</td></tr><tr><td align="center">IS NULL</td><td align="center">查询某一列为 NULL 的值，注：不能写=NULL</td></tr></tbody></table><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th align="center">逻辑运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">and 或 &amp;&amp;</td><td align="center">与，SQL 中建议使用前者，后者并不通用</td></tr><tr><td align="center">or 或 ||</td><td align="center">或</td></tr><tr><td align="center">not 或 !</td><td align="center">非</td></tr></tbody></table><blockquote><p>in 关键字</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">in</span> (数据 <span class="number">1</span>, 数据 <span class="number">2.</span>..);</span><br><span class="line"><span class="keyword">in</span> 里面的每个数据都会作为一次条件，只要满足条件的就会显示</span><br></pre></td></tr></tbody></table></figure><blockquote><p>范围查询</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">between</span> 值 <span class="number">1</span> <span class="keyword">and</span> 值 <span class="number">2</span></span><br><span class="line">表示从值 <span class="number">1</span> 到值 <span class="number">2</span> 范围，包头又包尾</span><br><span class="line">比如：age <span class="keyword">between</span> <span class="number">80</span> adn <span class="number">100</span> <span class="comment">-- 相当于： age&gt;=80 &amp;&amp; age&lt;=100</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>like 关键字</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- like 表示模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">WHERE</span> 字段名 <span class="keyword">like</span> <span class="string">'通配符字符串'</span>;</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">通配符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%</td><td align="center">匹配多个字符串</td></tr><tr><td align="center">_</td><td align="center">匹配一个字符</td></tr></tbody></table><h1 id="3-高级DQL"><a href="#3-高级DQL" class="headerlink" title="3. 高级DQL"></a>3. 高级DQL</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过 order by 子句，可以将查询出的结果进行排序(排序只是显示方式，不会影响数据库中数据的顺序)</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段<span class="operator">=</span>值 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="keyword">asc</span>: 升序，默认值</span><br><span class="line"><span class="keyword">desc</span>: 降序</span><br></pre></td></tr></tbody></table></figure><blockquote><p>单列排序</p></blockquote><p>只按某一个字段进行排序，单列排序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据,使用年龄降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>组合排序</p></blockquote><p>同时对多个字段进行排序，如果第 1 个字段相等，则按第 2 个字段排序，依次类推</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段<span class="operator">=</span>值 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="number">1</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>], 字段名 <span class="number">2</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="comment">-- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>, math <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-聚合函数"><a href="#3-2-聚合函数" class="headerlink" title="3.2 聚合函数"></a>3.2 聚合函数</h2><p>使用聚合函数查询是纵向查询， 它是对一列的值进行计算，然后返回一个结果值<br>聚合函数会忽略空值 NULL</p><blockquote><p>五个聚合函数</p></blockquote><table><thead><tr><th align="center">SQL中的聚合函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">max(列名)</td><td align="center">求这一列的最大值</td></tr><tr><td align="center">min(列名)</td><td align="center">求这一列的最小值</td></tr><tr><td align="center">avg(列名)</td><td align="center">求这一列的平均值</td></tr><tr><td align="center">count(列名)</td><td align="center">统计这一列有多少条记录</td></tr><tr><td align="center">sum(列名)</td><td align="center">对这一列求总和</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(列名) <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="comment">-- 查询学生总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">as</span> 总人数 <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 总人数 <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><p>我们发现对于 NULL 的记录不会统计，建议如果统计个数则不要使用有可能为 null 的列</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifnull(列名，默认值)   <span class="comment">-- 如果列名不为空，返回这列的值。如果为 NULL，则返回默认值。</span></span><br><span class="line"><span class="comment">-- 查询 id 字段，如果为 null，则使用 0 代替</span></span><br><span class="line"><span class="keyword">select</span> ifnull(id,<span class="number">0</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 我们可以利用 IFNULL()函数，如果记录为 NULL，给个默认值，这样统计的数据就不会遗漏</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ifnull(id,<span class="number">0</span>)) <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-分组"><a href="#3-3-分组" class="headerlink" title="3.3 分组"></a>3.3 分组</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组查询是指使用 group by 语句对查询信息进行分组，相同数据作为一组</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="number">1</span>,字段 <span class="number">2.</span>.. <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 [<span class="keyword">having</span> 条件];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>group by 将分组字段结果中相同内容作为一组，并且返回每组的第一条数据，所以单独分组没什么用处。<br><code>分组的目的就是为了统计，一般分组会跟聚合函数一起使用。</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按性别进行分组，求男生和女生数学的平均分</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> student3 <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>having 与 where 的区别</p></blockquote><table><thead><tr><th>子句</th><th>作用</th></tr></thead><tbody><tr><td>where 子句</td><td>1) 对查询结果进行分组前,将不符合where条件的行去掉,即在<code>分组之前</code>过滤数据,即先过滤在分组<br>2) where后面<code>不可以</code>使用聚合函数</td></tr><tr><td>having 子句</td><td>1) having 子句的作用是筛选满足条件的组,即在<code>分组之后</code>过滤数据,即先分组再过滤<br>2) having 后面<code>可以</code>使用聚合函数</td></tr></tbody></table><h2 id="3-4-limit-语句"><a href="#3-4-limit-语句" class="headerlink" title="3.4 limit 语句"></a>3.4 limit 语句</h2><blockquote><p>limit 是限制的意思，所以 limit 的作用就是限制查询记录的条数</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="operator">|</span>字段列表 [<span class="keyword">as</span> 别名] <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 子句] [<span class="keyword">group</span> <span class="keyword">by</span> 子句][<span class="keyword">having</span> 子句][<span class="keyword">order</span> <span class="keyword">by</span> 子</span><br><span class="line">句][limit 子句];</span><br><span class="line"></span><br><span class="line">LIMIT <span class="keyword">offset</span>,length;</span><br><span class="line"><span class="keyword">offset</span>：起始行数，从 <span class="number">0</span> 开始计数，如果省略，默认就是 <span class="number">0</span></span><br><span class="line">length： 返回的行数</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生表中数据，从第 3 条开始显示，显示 6 条。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student3 limit <span class="number">2</span>,<span class="number">6</span>;</span><br></pre></td></tr></tbody></table></figure><h1 id="4-表连接查询"><a href="#4-表连接查询" class="headerlink" title="4. 表连接查询"></a>4. 表连接查询</h1><h2 id="4-1-多表查询"><a href="#4-1-多表查询" class="headerlink" title="4.1 多表查询"></a>4.1 多表查询</h2><blockquote><p>多表查询的作用</p></blockquote><p>如果一条 SQL 语句查询多张表，因为查询结果在多张不同的表中，每张表取 1 列或多列</p><blockquote><p>多表查询的分类</p></blockquote><ol><li>内连接<ul><li>隐式内连接</li><li>显示内连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li></ol><h2 id="4-2-笛卡尔积现象"><a href="#4-2-笛卡尔积现象" class="headerlink" title="4.2 笛卡尔积现象"></a>4.2 笛卡尔积现象</h2><blockquote><p>什么是笛卡尔积</p></blockquote><p>左表的每一条数据和右边的每一条数据组合,这种效果成为笛卡儿乘积</p><blockquote><p>如何清除笛卡尔积现象的影响</p></blockquote><p>我们发现不是所有的数据组合都是有用的，只有员工表.dept_id = 部门表.id 的数据才是有用的<br>所以需要通过条件过滤掉没用的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置过滤条件 Column 'id' in where clause is ambiguous</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br><span class="line"><span class="comment">-- 查询员工和部门的名字</span></span><br><span class="line"><span class="keyword">select</span> emp.`name`, dept.`name` <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-内连接"><a href="#4-3-内连接" class="headerlink" title="4.3 内连接"></a>4.3 内连接</h2><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示。如：从表.外键=主表.主键</p><blockquote><p>隐式内连接 : 看不到 JOIN 关键字，条件使用 WHERE 指定</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表, 右表 <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>显示内连接：使用 INNER JOIN … ON 语句, 可以省略 INNER</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 [<span class="keyword">inner</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.`dept_id` <span class="operator">=</span> d.`id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-左外连接"><a href="#4-4-左外连接" class="headerlink" title="4.4 左外连接"></a>4.4 左外连接</h2><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示；否则，显示 NULL</p><p><code>可以理解为：在内连接的基础上保证左表的数据全部显示</code></p><blockquote><p>左外连接：使用 LEFT OUTER JOIN … ON，OUTER 可以省略</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">inner</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左外连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-5-右外连接"><a href="#4-5-右外连接" class="headerlink" title="4.5 右外连接"></a>4.5 右外连接</h2><p>用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示 NULL</p><p>可以理解为：<strong>在内连接的基础上保证右表的数据全部显示</strong></p><blockquote><p>右外连接：使用 RIGHT OUTER JOIN … ON，OUTER 可以省略</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">right</span> [<span class="keyword">outer</span>]<span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">inner</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.`id` <span class="operator">=</span> emp.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">right</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.`id` <span class="operator">=</span> emp.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h1 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5. 子查询"></a>5. 子查询</h1><h2 id="5-1-什么是子查询"><a href="#5-1-什么是子查询" class="headerlink" title="5.1 什么是子查询"></a>5.1 什么是子查询</h2><blockquote><p>子查询的概念</p></blockquote><ol><li>一个查询的结果做为另一个查询的条件</li><li>有查询的嵌套，内部的查询称为子查询</li><li>子查询要使用括号</li></ol><h2 id="5-2-子查询的结果是一个值的时候"><a href="#5-2-子查询的结果是一个值的时候" class="headerlink" title="5.2 子查询的结果是一个值的时候"></a>5.2 子查询的结果是一个值的时候</h2><blockquote><p>子查询的结果是一个值的时候</p></blockquote><p>子查询结果只要是单行单列，肯定在 WHERE 后面作为条件，父查询使用：比较运算符，如：&gt; 、&lt;、&lt;&gt;、=</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询字段 <span class="keyword">from</span> 表 <span class="keyword">where</span> 字段<span class="operator">=</span>（子查询）;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1) 查询平均工资是多少</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 2) 到员工表查询小于平均的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp);</span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-子查询结果是多行单列的时候"><a href="#5-3-子查询结果是多行单列的时候" class="headerlink" title="5.3 子查询结果是多行单列的时候"></a>5.3 子查询结果是多行单列的时候</h2><blockquote><p>子查询结果是多行单列的时候</p></blockquote><p>子查询结果是单例多行，结果集类似于一个数组，父查询使用 IN 运算符</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段 <span class="keyword">IN</span> （子查询）;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查询开发部与财务部的 id</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span>(<span class="string">'开发部'</span>,<span class="string">'财务部'</span>);</span><br><span class="line"><span class="comment">-- 再查询在这些部门 id 中有哪些员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span>(<span class="string">'开发部'</span>,<span class="string">'财务</span></span><br><span class="line"><span class="string">部'</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-子查询的结果是多行多列"><a href="#5-4-子查询的结果是多行多列" class="headerlink" title="5.4 子查询的结果是多行多列"></a>5.4 子查询的结果是多行多列</h2><blockquote><p>子查询的结果是多行多列</p></blockquote><p>子查询结果只要是多列，肯定在 FROM 后面作为表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询字段 <span class="keyword">from</span> （子查询） 表别名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><code>子查询作为表需要取别名，否则这张表没有名称则无法访问表中的字段</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出 2011 年以后入职的员工信息，包括部门名称</span></span><br><span class="line"><span class="comment">-- 在员工表中查询 2011-1-1 以后入职的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;=</span><span class="string">'2011-1-1'</span>;</span><br><span class="line"><span class="comment">-- 查询所有的部门信息，与上面的虚拟表中的信息组合，找出所有部门 id 等于的 dept_id</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d, (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;=</span><span class="string">'2011-1-1'</span>) e <span class="keyword">where</span> d.`id`<span class="operator">=</span> e.dept_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 也可以使用表连接：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.`dept_id` <span class="operator">=</span> dept.`id` <span class="keyword">where</span> join_date <span class="operator">&gt;=</span><span class="string">'2011-1-1'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.`dept_id` <span class="operator">=</span> dept.`id` <span class="keyword">and</span> join_date <span class="operator">&gt;=</span><span class="string">'2011-1-1'</span>;</span><br></pre></td></tr></tbody></table></figure><h1 id="6-事务"><a href="#6-事务" class="headerlink" title="6. 事务"></a>6. 事务</h1><h2 id="6-1-事务的应用场景说明"><a href="#6-1-事务的应用场景说明" class="headerlink" title="6.1 事务的应用场景说明"></a>6.1 事务的应用场景说明</h2><p>什么是事务： 在实际的开发过程中，一个业务操作如：转账，往往是要多次访问数据库才能完成的<br>转账是一个用户扣钱，另一个用户加钱。如果其中有一条 SQL 语句出现异常，这条 SQL 就可能执行失败</p><p>事务执行是一个整体，所有的 SQL 语句都必须执行成功<br>如果其中有 1 条 SQL 语句出现异常，则所有的 SQL 语句都要回滚，整个业务执行失败</p><h2 id="6-2-手动提交事务"><a href="#6-2-手动提交事务" class="headerlink" title="6.2 手动提交事务"></a>6.2 手动提交事务</h2><p>MYSQL 中可以有两种方式进行事务的操作：</p><ol><li>手动提交事务</li><li>自动提交事务</li></ol><blockquote><p>手动提交事务的 SQL 语句</p></blockquote><table><thead><tr><th align="center">功能</th><th align="center">SQL语句</th></tr></thead><tbody><tr><td align="center">开启事务</td><td align="center">start transaction</td></tr><tr><td align="center">提交事务</td><td align="center">commit</td></tr><tr><td align="center">回滚事务</td><td align="center">rollback</td></tr></tbody></table><blockquote><p>手动提交事务使用过程</p></blockquote><ol><li>执行成功的情况： 开启事务 →执行多条 SQL 语句→成功提交事务</li><li>执行失败的情况： 开启事务→执行多条 SQL 语句→事务的回滚</li></ol><h2 id="6-3-自动提交事务"><a href="#6-3-自动提交事务" class="headerlink" title="6.3 自动提交事务"></a>6.3 自动提交事务</h2><p>MySQL 默认每一条 DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕 自动提交事务，MySQL 默认开始自动提交事务</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql(二) 库和表属性</title>
      <link href="/mysql/mysql-er-ku-he-biao-shu-xing/"/>
      <url>/mysql/mysql-er-ku-he-biao-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL-的概念"><a href="#1-SQL-的概念" class="headerlink" title="1. SQL 的概念"></a>1. SQL 的概念</h1><h2 id="1-1-什么是-SQL"><a href="#1-1-什么是-SQL" class="headerlink" title="1.1 什么是 SQL"></a>1.1 什么是 SQL</h2><p><strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage 结构化查询语言</p><h2 id="1-2-SQL-作用"><a href="#1-2-SQL-作用" class="headerlink" title="1.2 SQL 作用"></a>1.2 SQL 作用</h2><ol><li>是一种所有关系型数据库的查询规范，不同的数据库都支持</li><li>通用的数据库操作语言，可以用在不同的数据库中</li><li>不同的数据库 SQL 语句有一些区别</li></ol><blockquote><p>SQL规范(普通话)         MySQL特有(方言)        Oracle特有(方言)</p></blockquote><h2 id="1-3-SQL-语句分类"><a href="#1-3-SQL-语句分类" class="headerlink" title="1.3 SQL 语句分类"></a>1.3 SQL 语句分类</h2><ol><li>Data Definition Language (DDL 数据定义语言) <br>如：建库，建表</li><li><code>Data Manipulation Language(DML 数据操纵语言)</code><br><code>如：对表中的记录操作增删改</code></li><li><code>Data Query Language(DQL 数据查询语言)</code><br><code>如：对表中的查询操作</code></li><li>Data Control Language(DCL 数据控制语言)<br>如：对用户权限的设置</li></ol><h2 id="1-4-MySQL-的语法"><a href="#1-4-MySQL-的语法" class="headerlink" title="1.4 MySQL 的语法"></a>1.4 MySQL 的语法</h2><ol><li>每条语句以分号结尾</li><li>SQL 中不区分大小写，关键字中认为大写和小写是一样的</li><li>3 种注释：</li></ol><table><thead><tr><th>注释的语法</th><th>说明</th></tr></thead><tbody><tr><td>–空格</td><td>单行注释</td></tr><tr><td>/* */</td><td>多行注释</td></tr><tr><td>#</td><td>这是 mysql 特有的注释方式</td></tr></tbody></table><h1 id="2-DDL-操作数据库"><a href="#2-DDL-操作数据库" class="headerlink" title="2. DDL 操作数据库"></a>2. DDL 操作数据库</h1><h2 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h2><blockquote><p>创建数据库的几种方式</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line"><span class="comment">-- 判断数据库是否已经存在，不存在则创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名;</span><br><span class="line"><span class="comment">-- 创建数据库并指定字符集</span></span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集; </span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-查看数据库"><a href="#2-2-查看数据库" class="headerlink" title="2.2 查看数据库"></a>2.2 查看数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 查看某个数据库的定义信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db3;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-修改数据库"><a href="#2-3-修改数据库" class="headerlink" title="2.3 修改数据库"></a>2.3 修改数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库默认的字符集</span></span><br><span class="line"><span class="comment">-- ALTER DATABASE 数据库名 DEFAULT CHARACTER SET 字符集;</span></span><br><span class="line"><span class="keyword">alter</span> database db3 <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2.4 删除数据库"></a>2.4 删除数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-使用数据库"><a href="#2-5-使用数据库" class="headerlink" title="2.5 使用数据库"></a>2.5 使用数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看正在使用的数据库  使用的一个 mysql 中的全局函数</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="comment">-- 使用/切换数据库</span></span><br><span class="line">use 数据库名</span><br></pre></td></tr></tbody></table></figure><h1 id="3-DDL-操作表结构"><a href="#3-DDL-操作表结构" class="headerlink" title="3. DDL 操作表结构"></a>3. DDL 操作表结构</h1><h2 id="3-1-MySQL-数据类型"><a href="#3-1-MySQL-数据类型" class="headerlink" title="3.1 MySQL 数据类型"></a>3.1 MySQL 数据类型</h2><blockquote><p>常用数据类型</p></blockquote><table><thead><tr><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">int</td><td>整形</td></tr><tr><td align="center">double</td><td>浮点型</td></tr><tr><td align="center">varchar</td><td>字符串型</td></tr><tr><td align="center">date</td><td>日期类型<br>格式为 yyyy-MM-dd,只有年月日,没有时分秒</td></tr></tbody></table><blockquote><p>详细的数据类型</p></blockquote> <table border="1" cellpadding="5px" cellspacing="0px">    <tbody><tr>      <th>分类</th>      <th>类型名称</th>      <th>类型说明</th>    </tr>    <tr>      <th rowspan="4">整形</th>      <td>tinyInt</td>      <td>微整型：很小的整数(占 8 位二进制)</td>    </tr>    <tr>      <td>smallint</td>      <td>小整型：小的整数(占 16 位二进制)</td>    </tr>    <tr>      <td>mediumint</td>      <td>中整型：中等长度的整数(占 24 位二进制)</td>    </tr>    <tr>      <td>int(integer)</td>      <td>整型：整数类型(占 32 位二进制)</td>    </tr>    <tr>      <th rowspan="2">小数</th>      <td>float</td>      <td>单精度浮点数，占 4 个字节</td>    </tr>    <tr>      <td>double</td>      <td>双精度浮点数，占 8 个字节</td>    </tr>    <tr>      <th rowspan="3">日期</th>      <td>double</td>      <td>双精度浮点数，占 8 个字节</td>    </tr>    <tr>      <td>time</td>      <td>表示时间类型</td>    </tr>    <tr>      <td>datetime</td>      <td>同时可以表示日期和时间类型</td>    </tr>    <tr>      <th rowspan="2">字符串</th>      <td>char(m)</td>      <td>固定长度的字符串，无论使用几个字符都占满全部，M 为 0~255 之间的整数</td>    </tr>    <tr>      <td>varchar(m)</td>      <td>可变长度的字符串，使用几个字符就占用几个，M 为 0~65535 之间的整数</td>    </tr>    <tr>      <th rowspan="4">大二进制</th>      <td>tinyblob Big Large Object</td>      <td>允许长度 0~255 字节</td>    </tr>    <tr>      <td>blob</td>      <td>允许长度 0~65535 字节</td>    </tr>    <tr>      <td>mediumblob</td>      <td>允许长度 0~167772150 字节</td>    </tr>    <tr>      <td>longblob</td>      <td>允许长度 0~4294967295 字节</td>    </tr>    <tr>      <th rowspan="4">大文本</th>      <td>tinytext</td>      <td>允许长度 0~255 字节</td>    </tr>    <tr>      <td>text</td>      <td>允许长度 0~65535 字节</td>    </tr>    <tr>      <td>mediumtext</td>      <td>允许长度 0~167772150 字节</td>    </tr>    <tr>      <td>longtext</td>      <td>允许长度 0~4294967295 字节</td>    </tr>  </tbody></table><h2 id="3-2-创建表"><a href="#3-2-创建表" class="headerlink" title="3.2 创建表"></a>3.2 创建表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">字段名 <span class="number">1</span> 字段类型 <span class="number">1</span>,</span><br><span class="line">字段名 <span class="number">2</span> 字段类型 <span class="number">2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 student 表包含 id,name,birthday 字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">id <span class="type">int</span>, <span class="comment">-- 整数</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 字符串</span></span><br><span class="line">birthday <span class="type">date</span> <span class="comment">-- 生日，最后没有逗号</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-查看表"><a href="#3-3-查看表" class="headerlink" title="3.3 查看表"></a>3.3 查看表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use 表名称;</span><br><span class="line"><span class="comment">-- 查看某个数据库中的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"><span class="comment">-- 查看创建表的 SQL 语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-快速创建一个表结构相同的表"><a href="#3-4-快速创建一个表结构相同的表" class="headerlink" title="3.4 快速创建一个表结构相同的表"></a>3.4 快速创建一个表结构相同的表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> 新表名 <span class="keyword">like</span> 旧表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个 s1 的表与 student 结构相同</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1 <span class="keyword">like</span> student;</span><br><span class="line"><span class="keyword">desc</span> s1;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-5-删除表"><a href="#3-5-删除表" class="headerlink" title="3.5 删除表"></a>3.5 删除表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="comment">-- 判断表是否存在，如果存在则删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">create</span>`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 直接删除表 s1 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> s1;</span><br><span class="line"><span class="comment">-- 判断表是否存在并删除 s1 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">create</span>`;</span><br></pre></td></tr></tbody></table></figure><p><code>与直接删除的区别 如果表不存在，不删除，存在则删除</code></p><h2 id="3-6-修改表结构"><a href="#3-6-修改表结构" class="headerlink" title="3.6 修改表结构"></a>3.6 修改表结构</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加表列 ADD</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改列类型 MODIFY</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新的类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改列名 CHANGE</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧列名 新列名 类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列 DROP</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line">rename <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改字符集 character set</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集;</span><br></pre></td></tr></tbody></table></figure><h1 id="4-数据库备份和还原"><a href="#4-数据库备份和还原" class="headerlink" title="4. 数据库备份和还原"></a>4. 数据库备份和还原</h1><h2 id="4-1-备份的应用场景"><a href="#4-1-备份的应用场景" class="headerlink" title="4.1 备份的应用场景"></a>4.1 备份的应用场景</h2><p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏<br>这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的</p><h2 id="4-2-备份与还原的语句"><a href="#4-2-备份与还原的语句" class="headerlink" title="4.2 备份与还原的语句"></a>4.2 备份与还原的语句</h2><blockquote><p>备份格式： DOS 下，未登录的时候。这是一个可执行文件 exe，在 bin 文件夹</p></blockquote><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 密码 数据库 &gt; 文件的路径</span><br></pre></td></tr></tbody></table></figure><blockquote><p>还原格式：mysql 中的命令，需要登录后才可以操作</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库；</span><br><span class="line">SOURCE 导入文件的路径;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 备份 day21 数据库中的数据到 d:\day21.sql 文件中</span></span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>proot day21 <span class="operator">&gt;</span> d:<span class="operator">/</span>day21.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原 day21 数据库中的数据到 d:\day21.sql 文件中</span></span><br><span class="line">use day21;</span><br><span class="line">source d:<span class="operator">/</span>day21.sql;</span><br></pre></td></tr></tbody></table></figure><h1 id="5-数据库约束的概述"><a href="#5-数据库约束的概述" class="headerlink" title="5.  数据库约束的概述"></a>5.  数据库约束的概述</h1><h2 id="5-1-数据库约束的概述"><a href="#5-1-数据库约束的概述" class="headerlink" title="5.1 数据库约束的概述"></a>5.1 数据库约束的概述</h2><blockquote><p>约束的作用</p></blockquote><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性</p><p>一个表如果添加了约束，不正确的数据将无 法插入到表中。约束在创建表的时候添加比较合适</p><blockquote><p>约束种类</p></blockquote><table><thead><tr><th align="center">约束名</th><th align="center">约束关键字</th></tr></thead><tbody><tr><td align="center">主键</td><td align="center">primary key</td></tr><tr><td align="center">唯一</td><td align="center">unique</td></tr><tr><td align="center">非空</td><td align="center">not null</td></tr><tr><td align="center">外键</td><td align="center">foreign key</td></tr><tr><td align="center">检查约束</td><td align="center">check <code>注mysql不支持</code></td></tr></tbody></table><h2 id="5-2-主键约束"><a href="#5-2-主键约束" class="headerlink" title="5.2 主键约束"></a>5.2 主键约束</h2><blockquote><p>主键的作用</p></blockquote><p>用来唯一标识数据库中的每一条记录</p><blockquote><p>哪个字段应该作为表的主键？</p></blockquote><p>通常不用业务字段作为主键，单独给每张表设计一个 id 的字段，把 id 作为主键<br><code>主键是给数据库和程序使用的，不是给最终的客户使用的</code><br><code>所以主键有没有含义没有关系，只要不重复，非空就行</code></p><blockquote><p>创建主键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候给字段添加主键</span></span><br><span class="line">字段名 字段类型 <span class="keyword">primary</span> key</span><br><span class="line"><span class="comment">-- 在已有表中添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表学生表 st5, 包含字段(id, name, age)将 id 做为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st5 (</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key, <span class="comment">-- id 为主键</span></span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> age <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">desc</span> st5;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除主键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 st5 表的主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st5 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st5 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>主键自增</p></blockquote><p>主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auto_increment 表示自动增长(字段类型必须是整数类型)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 默认地 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,请使用下列 SQL 语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表时指定起始值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名 <span class="type">int</span> <span class="keyword">primary</span> key auto_increment</span><br><span class="line">) auto_increment<span class="operator">=</span>起始值;</span><br><span class="line"><span class="comment">-- 指定起始值为 1000</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st4 (</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) auto_increment <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建好以后修改起始值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment<span class="operator">=</span>起始值;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st4 auto_increment <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>DELETE 和 TRUNCATE 对自增长的影响</p></blockquote><ul><li>DELETE：删除所有的记录之后，自增长没有影响</li><li>TRUNCATE：删除以后，自增长又重新开始</li></ul><h2 id="5-3-唯一约束"><a href="#5-3-唯一约束" class="headerlink" title="5.3 唯一约束"></a>5.3 唯一约束</h2><blockquote><p>什么是唯一约束： 表中某一列不能出现重复的值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">unique</span></span><br><span class="line"><span class="comment">-- 创建学生表 st7, 包含字段(id, name),name 这一列设置唯一约束,不能出现同名的学生</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st7 (</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 如果插入相同的数据就会变成null,null没有数据不存在重复的问题</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-非空约束"><a href="#5-4-非空约束" class="headerlink" title="5.4 非空约束"></a>5.4 非空约束</h2><blockquote><p>什么是非空约束：某一列不能为 nul</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="comment">-- 创建表学生表 st8, 包含字段(id,name,gender)其中 name 不能为 NULL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st8 (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>默认值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">default</span> 默认值</span><br><span class="line"><span class="comment">-- 创建一个学生表 st9，包含字段(id,name,address)， 地址默认值是广州</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st9 (</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">'广州'</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>如果一个字段设置了非空与唯一约束，该字段与主键的区别?</p><ol><li><code>主键数在一个表中，只能有一个</code>。不能出现多个主键。主键可以单列，也可以是多列</li><li>自增长只能用在主键上</li></ol><h2 id="5-5-外键约束"><a href="#5-5-外键约束" class="headerlink" title="5.5 外键约束"></a>5.5 外键约束</h2><blockquote><p> 什么是外键：<code>在从表中</code>与主表主键对应的那一列</p><ul><li>主表： 一方，用来约束别人的表</li><li>从表： 多方，被别人约束的表</li></ul><p>在<code>从表</code>中通过外键去<code>主表</code>中获取信息</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建表时增加外键：</span></span><br><span class="line">[<span class="keyword">constraint</span>] [外键约束名称] <span class="keyword">foreign</span> key(外键字段名)  <span class="keyword">references</span> 主表名(主键字段名)</span><br><span class="line"><span class="comment">-- 已有表增加外键：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">add</span> [<span class="keyword">constraint</span>] [外键约束名称] <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主</span><br><span class="line">键字段名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1) 删除副表/从表 employee</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2) 创建从表 employee 并添加外键约束 emp_depid_fk</span></span><br><span class="line"><span class="comment">-- 多方，从表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="comment">-- 创建外键约束</span></span><br><span class="line"><span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> department(id)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除外键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除 employee 表的 emp_depid_fk 外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">foreign</span> key emp_depid_fk;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 employee 表存在的情况下添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> department(id);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>外键的级联</p></blockquote><p><code>在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</code></p><table><thead><tr><th align="center">级联操作语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">on update cascade</td><td align="center">级联更新，只能是创建表的时候创建级联关系<br>更新主表中的主键，从表中的外键列也自动同步更新</td></tr><tr><td align="center">on delete cascade</td><td align="center">级联删除</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 employee 表，重新创建 employee 表，添加级联更新和级联删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="comment">-- 创建外键约束</span></span><br><span class="line"><span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> </span><br><span class="line">department(id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h1 id="6-表与表之间的关系"><a href="#6-表与表之间的关系" class="headerlink" title="6. 表与表之间的关系"></a>6. 表与表之间的关系</h1><h2 id="6-1-表关系的概念"><a href="#6-1-表关系的概念" class="headerlink" title="6.1 表关系的概念"></a>6.1 表关系的概念</h2><blockquote><p>表与表之间的三种关系</p></blockquote><table><thead><tr><th align="center">三种关系</th><th align="center">栗子</th></tr></thead><tbody><tr><td align="center">一对多</td><td align="center">最常用的关系部门和员工</td></tr><tr><td align="center">多对多</td><td align="center">学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</td></tr><tr><td align="center">一对一</td><td align="center">相对使用比较少。员工表 简历表， 公民表 护照表</td></tr></tbody></table><h2 id="6-2-一对多"><a href="#6-2-一对多" class="headerlink" title="6.2 一对多"></a>6.2 一对多</h2><p>一对多（1:n） 例如：班级和学生，部门和员工，客户和订单，分类和商品 </p><p>一对多建表原则: 在<code>从表(多方)</code>创建一个字段,字段作为外键指向<code>主表(一方)</code>的主键</p><h2 id="6-3-多对多"><a href="#6-3-多对多" class="headerlink" title="6.3 多对多"></a>6.3 多对多</h2><p>多对多（m:n） 例如：老师和学生，学生和课程，用户和角色 </p><p>多对多关系建表原则: <strong>需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键</strong></p><h2 id="6-4-一对一"><a href="#6-4-一对一" class="headerlink" title="6.4 一对一"></a>6.4 一对一</h2><p>一对一（1:1） 在实际的开发中应用不多.因为一对一可以创建成一张表</p><p>两种建表原则</p><table><thead><tr><th align="center">一对一的建表原则</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">外键唯一</td><td align="center">主表的主键和从表的外键（唯一），形成主外键关系，外键唯一 UNIQUE</td></tr><tr><td align="center">外键是主键</td><td align="center">主表的主键和从表的主键，形成主外键关系</td></tr></tbody></table><h1 id="7-数据库设计"><a href="#7-数据库设计" class="headerlink" title="7. 数据库设计"></a>7. 数据库设计</h1><h2 id="7-1-数据规范化"><a href="#7-1-数据规范化" class="headerlink" title="7.1 数据规范化"></a>7.1 数据规范化</h2><blockquote><p>什么是范式</p></blockquote><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响<br>建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式</p><blockquote><p>三大范式</p></blockquote><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）<br> 满足最低要求的范式是第一范式（1NF）<br>在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推<br>一般说来，数据库只需满足第三范式(3NF）就行了</p><h2 id="7-2-1NF"><a href="#7-2-1NF" class="headerlink" title="7.2 1NF"></a>7.2 1NF</h2><blockquote><p>概念</p></blockquote><p>数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项<br>即表中的某个列有多个值时，必须拆分为不同的列<br><code>简而言之，第一范式每一列不可再拆分，称为原子性</code></p><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">班级</th></tr></thead><tbody><tr><td align="center"><code>1</code></td><td align="center">张三</td><td align="center">一班</td></tr><tr><td align="center"><code>2</code></td><td align="center">李四</td><td align="center">二班</td></tr><tr><td align="center"><code>3</code></td><td align="center">王五</td><td align="center">三班</td></tr></tbody></table><h2 id="7-3-2NF"><a href="#7-3-2NF" class="headerlink" title="7.3 2NF"></a>7.3 2NF</h2><blockquote><p>概念</p></blockquote><p>在满足第一范式的前提下，表中的每一个字段都完全依赖于主键<br>所谓完全依赖是指不能存在仅依赖主键一部分的列<br><code>简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列</code><br>当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况<br>比如有一个主键有 两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式</p><p>第二范式的特点： </p><ol><li>一张表只描述一件事情</li><li>表中的每一列都完全依赖于主键</li></ol><p>借书证表</p><table><thead><tr><th><code>学生证号</code></th><th>学生证名称</th><th>学生证办理时间</th><th><code>借书证号</code></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table><p>分成两张表    </p><table><thead><tr><th><code>学生证号</code></th><th>学生证名称</th><th>学生证办理时间</th></tr></thead></table><table><thead><tr><th><code>借书证号</code></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table><h2 id="7-4-3NF"><a href="#7-4-3NF" class="headerlink" title="7.4 3NF"></a>7.4 3NF</h2><blockquote><p>概念</p></blockquote><p>在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键<br>简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足 2NF 的基础上，任何非主列不得传递依赖于主键<br>所谓传递依赖，指的是如果存在”A → B → C”的决定关系，则 C 传递依赖于 A<br>因此，满足第三范式的数据库表应该不存在如下依赖关系：主键列 → 非主键列 x → 非主键列 y</p><blockquote><p>学生信息表</p></blockquote><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">年龄</th><th align="center"><code>所在学院</code></th><th align="center"><code>学院地点</code></th></tr></thead></table><p>存在传递的决定关系： <code>学号---&gt;所在学院---&gt;学院地点</code></p><p>拆分成两张表</p><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">年龄</th><th align="center">所在学院的编号(外键)</th></tr></thead></table><table><thead><tr><th align="center"><code>学院编号 </code></th><th align="center">所在学院</th><th align="center">学院地点</th></tr></thead></table><h2 id="7-5-三大范式小结"><a href="#7-5-三大范式小结" class="headerlink" title="7.5 三大范式小结"></a>7.5 三大范式小结</h2><table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性：表中每列不可再拆分</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql(一) 认识与安装Mysql数据库</title>
      <link href="/mysql/mysql-yi-ren-shi-yu-an-zhuang-mysql-shu-ju-ku/"/>
      <url>/mysql/mysql-yi-ren-shi-yu-an-zhuang-mysql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1 数据库概述"></a>1 数据库概述</h1><blockquote><h2 id="1-1-数据存储的方式"><a href="#1-1-数据存储的方式" class="headerlink" title="1.1 数据存储的方式"></a>1.1 数据存储的方式</h2></blockquote><table><thead><tr><th>储存位置</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>内存</td><td>速度快</td><td>不能永久保存,数据是临时状态</td></tr><tr><td>文件</td><td>数据可以永久保存</td><td>操作数据不方便,查询某个数据</td></tr><tr><td>数据库</td><td>1. 数据库可以永久保存<br>2.查询速度快<br>3.对数据的管理方便</td><td>占用资源,需要购买</td></tr></tbody></table><blockquote><h2 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h2></blockquote><ol><li>存储数据的仓库</li><li>本是上是一个系统文件,还是以文件的方式存在服务器电脑上的</li><li>所有的关系型数据库都可以使用通用的<strong>SQL</strong>语句进行管理  <strong>DBMS DataBase Management System</strong></li></ol><h1 id="2-常见数据库"><a href="#2-常见数据库" class="headerlink" title="2 常见数据库"></a>2 常见数据库</h1><ul><li><code>MySQL</code>：开源免费的数据库，小型的数据库，已经被 Oracle 收购了。MySQL6.x 版本也开始收费。后来 Sun 公司收购了 MySQL，而 Sun 公司又被 Oracle 收购</li><li><code>Oracle</code>：收费的大型数据库，Oracle 公司的产品</li><li><code>DB2</code> ：IBM 公司的数据库产品,收费的。常应用在银行系统中</li><li><code>SQL Server</code>：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用</li><li><code>SQLite</code>: 嵌入式的小型数据库，应用在手机端，如：Android</li></ul><h1 id="3-数据库的安装与卸载"><a href="#3-数据库的安装与卸载" class="headerlink" title="3.  数据库的安装与卸载"></a>3.  数据库的安装与卸载</h1><blockquote><h2 id="3-1-数据库的安装"><a href="#3-1-数据库的安装" class="headerlink" title="3.1 数据库的安装"></a>3.1 <strong>数据库的安装</strong></h2><p>安装过程分成两个部分</p><ol><li>文件解压和复制过程，默认的安装目录：C:\Program Files\MySQL\MySQL Server 5.7\</li><li>安装好以后必须对 MySQL 服务器进行配置    在 mysql 中管理员的名字：root</li></ol></blockquote><ol><li>打开下载的 mysql 安装文件双击解压缩，运行“mysql-5.5.40-win32.msi</li><li>选择安装类型，有“Typical（默认）”、“Complete（完全）”、“Custom（用户自定义）”三个选项，选择“Custom”， 按“next”键继续</li><li>点选“Browse”，手动指定安装目录</li><li>填上安装目录</li><li>确认一下先前的设置，如果有误，按“Back”返回重做。按“Install”开始安装</li><li>正在安装中，请稍候</li><li>安装完成了，将进入 mysql 配置向导</li><li>选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程</li><li>选择服务器类型<br>“Developer Machine（开发测试类，mysql 占用很少资源）”<code>[练习选这个]</code><br>“Server Machine（服务器类型，mysql 占用较多资源）”<br>“Dedicated MySQL Server Machine（专门的数据库服务器，mysql 占 用所有可用资源）</li><li>选择mysql数据库的大致用途<br>“Multifunctional Database（通用多功能型，好）”<code>[练习选这个]</code><br>“Transactional Database Only（服务器类型，专注于事务处理，一般）”<br>“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对 MyISAM 数据类型的支持仅限于 non-transactional），按“Next” 继续</li><li>选择网站并发连接数，同时连接的数目<br>“Decision Support(DSS)/OLAP（20个左右）“Online ”<br> Transaction Processing(OLTP)（500 个左右）”<br>“Manual Setting（手动设置，自己输一个数）[我选择20个]</li><li>是否启用 TCP/IP 连接，设定端口，如果不启用，就只能在自己的机器上访问 mysql 数据库了<code>[3306端口]</code>在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），这样 MySQL 就不会允许细小的语法错误<br>如果是新手，建议您取消标准模式以减少麻烦。但熟悉 MySQL 以后，尽量使用标准模式，因为它可以降低有害数据进入数据库的可能性<code>[想什么哇,肯定标准走起]</code><br>按“Next”继续</li><li>就是对 mysql 默认数据库语言编码进行设置（重要），一般选 UTF-8，按 “Next”继续</li><li>选择是否将 mysql 安装为 windows 服务，还可以指定 Service Name（服务标识名称），是否将 mysql 的 bin 目录加入到 Windows PATH（加入后，就可以直接使用 bin 下的文件，而不用指出目录名，比如连接， “mysql.exe -uusername -ppassword;”就可以了，不用指出 mysql.exe 的完整地址，很方便），我这里全部 打上了勾，Service Name 不变。按“Next”继续</li><li>询问是否要修改默认 root 用户（超级管理）的密码<br>“Enable root access from remote machines（是否允许 root 用户在其它的机器上登陆，如果要安全，就不要勾上，如果要方便，就勾上它）” <code>[勾上 直接账号密码都是root]</code><br>“Create An Anonymous Account（新建一个匿名用户，匿名用户可以连接数据库，不能操作数据，包括查询）”一般就不用勾了，设置完毕，按“Next”继续</li><li>确认设置无误，按“Execute”使设置生效，即完成 MYSQL 的安装和配置</li></ol><blockquote><p>注意：设置完毕，按“Finish”后有一个比较常见的错误，就是不能“Start service”，一般出现在以前有安装 mysql 的服务器上，解决的办法，先保证以前安装的 mysql 服务器彻底卸载掉了；不行的话，检查是否按上面一步所说， 之前的密码是否有修改，照上面的操作；如果依然不行，将 mysql 安装目录下的 data 文件夹备份，然后删除，在 安装完成后，将安装生成的 data 文件夹删除，备份的 data 文件夹移回来，再重启 mysql 服务就可以了，这种情况 下，可能需要将数据库检查一下，然后修复一次，防止数据出错</p><p><code>解决方法：卸载 MySQL,重装 MySQL</code></p></blockquote><blockquote><h2 id="3-2-数据库的卸载"><a href="#3-2-数据库的卸载" class="headerlink" title="3.2 数据库的卸载"></a>3.2 <strong>数据库的卸载</strong></h2></blockquote><ol><li>停止 window 的 MySQL 服务。 找到“控制面板”-&gt; “管理工具”-&gt; “服务”，停止 MySQL 后台服务</li><li>卸载 MySQL 安装程序。找到“控制面板”-&gt; “程序和功能”，卸载 MySQL 程序</li><li>删除 MySQL 安装目录下的所有文件</li><li>删除 c 盘 ProgramDate 目录中关于 MySQL 的目录。路径为：C:\ProgramData\MySQL(是隐藏文件,需要显示 出来)</li></ol><h1 id="4-数据库服务的启动与登录"><a href="#4-数据库服务的启动与登录" class="headerlink" title="4. 数据库服务的启动与登录"></a>4. 数据库服务的启动与登录</h1><blockquote><p>MySQL 服务器启动方式有两种</p></blockquote><ol><li><p>通过服务的方式自动启动</p><p><code>此电脑</code>—右键<code>管理</code>—服务于应用程序—服务—右键MySQL</p></li><li><p>手动启动的方式</p><p><code>win+r</code>—<code>cmd</code>–<code>net start mysql</code></p><p><code>win+r</code>—<code>cmd</code>–<code>net stop mysql</code></p></li></ol><blockquote><p>控制台连接数据库</p></blockquote><p>MySQL 是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的 root 账号，使用安装时设置 的密码即可登录</p><p>登录格式 1：u 和 p 后面没有空格</p><blockquote><p>mysql -u用户名 -p密码</p><p>mysql -uroot -poot</p></blockquote><p>登录格式 2:</p><blockquote><p>mysql -hip 地址 -u用户名 -p密码</p><p>mysql -h127.0.0.1 -uroot -proot</p></blockquote><p>登录格式 3：</p><blockquote><p>mysql –host=ip 地址 –user=用户名 –password=密码</p><p>mysql –host=127.0.0.1 –user=root –password=root</p></blockquote><p>退出 MySQL：</p><blockquote><p>quit 或 exit</p></blockquote><h2 id="5-MySQL-目录结构"><a href="#5-MySQL-目录结构" class="headerlink" title="5. MySQL 目录结构"></a>5. MySQL 目录结构</h2><table><thead><tr><th>MySQL 的目录结构</th><th>描述</th></tr></thead><tbody><tr><td>bin&lt;目录&gt;</td><td>所有 mysql 的可执行文件，如：mysql.exe</td></tr><tr><td>MySQLInstanceConfig.exe</td><td>数据库的配置向导，在安装时出现的内容</td></tr><tr><td>data&lt;目录&gt;</td><td>系统必须的数据库所在的目录</td></tr><tr><td>my.ini 文件</td><td>mysql 的配置文件，一般不建议去修改</td></tr><tr><td>c:\ProgramData\MySQL\MySQ L Server 5.7\data\</td><td>我们自己创建的数据库所在的文件夹</td></tr></tbody></table><h2 id="6-数据库管理系统"><a href="#6-数据库管理系统" class="headerlink" title="6. 数据库管理系统"></a>6. 数据库管理系统</h2><p>​    数据库管理系统（<strong>DataBase Management System，DBMS</strong>）：指一种操作和管理数据库的大型软件，用于建 立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理 系统访问数据库中<code>表内的数据</code></p><h2 id="7-数据库管理系统、数据库和表的关系"><a href="#7-数据库管理系统、数据库和表的关系" class="headerlink" title="7. 数据库管理系统、数据库和表的关系"></a>7. 数据库管理系统、数据库和表的关系</h2><p>​        数据库管理程序(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用 中实体的数据，一般会在数据库创建多个表，以保存程序中实体 User 的数据</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="数据库管理系统、数据库和表的关系"></p><ol><li>一个数据库服务器包含多个库</li><li>一个数据库包含多张表</li><li>一张表包含多条记录</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsp页面中自定义标签的使用</title>
      <link href="/javaee/spring/utils/jsp-ye-mian-zhong-zi-ding-yi-biao-qian-de-shi-yong/"/>
      <url>/javaee/spring/utils/jsp-ye-mian-zhong-zi-ding-yi-biao-qian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Utils文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTag</span> <span class="keyword">extends</span> <span class="title class_">TagSupport</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doStartTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException{</span><br><span class="line">        <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="built_in">super</span>.pageContext.getOut();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            out.print(<span class="string">"这是一个自定义标签输出的内容"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.doStartTag();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编写tld描述文件 myTag.tld</p><blockquote><p>注意url要和jsp的一致</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">taglib</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">"-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="string">"http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>myTag<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://jyw.cn/myTag/<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>out<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.jyw.crm.utils.MyTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>JSP<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意taglib中url要与tld文件中一致</p></blockquote><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"mtTag"</span> uri=<span class="string">"http://jyw.cn/myTag/"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;mtTag:out&gt;&lt;/mtTag:out&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/javaee/spring/ssm-kuang-jia-zheng-he/"/>
      <url>/javaee/spring/ssm-kuang-jia-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="1-原始方式整合"><a href="#1-原始方式整合" class="headerlink" title="1. 原始方式整合"></a>1. 原始方式整合</h1><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h2><table><thead><tr><th align="center">名称</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td></tr><tr><td align="center">name</td><td align="center">varchar(100)</td></tr><tr><td align="center">money</td><td align="center">double(7,2)</td></tr></tbody></table><h2 id="1-2-创建Maven工程"><a href="#1-2-创建Maven工程" class="headerlink" title="1.2 创建Maven工程"></a>1.2 创建Maven工程</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring上下文--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectj织入 Aop用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-mvc用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet和jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis整合spring包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-编写实体类"><a href="#1-3-编写实体类" class="headerlink" title="1.3 编写实体类"></a>1.3 编写实体类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money;</span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-编写Mapper接口"><a href="#1-4-编写Mapper接口" class="headerlink" title="1.4 编写Mapper接口"></a>1.4 编写Mapper接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> {</span><br><span class="line">    <span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//查询账户数据</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-编写Service接口"><a href="#1-5-编写Service接口" class="headerlink" title="1.5 编写Service接口"></a>1.5 编写Service接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>; <span class="comment">//保存账户数据</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>; <span class="comment">//查询账户数据</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-6-编写Service接口实现"><a href="#1-6-编写Service接口实现" class="headerlink" title="1.6 编写Service接口实现"></a>1.6 编写Service接口实现</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> {</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">            resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">           <span class="comment">//获得session工厂对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">            <span class="comment">//获得session会话对象</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">            <span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">           accountMapper.save(account);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            sqlSession.close();</span><br><span class="line">           } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">        resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">           <span class="comment">//获得session工厂对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">            <span class="comment">//获得session会话对象</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">          <span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line"><span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-编写Controller"><a href="#1-7-编写Controller" class="headerlink" title="1.7 编写Controller"></a>1.7 编写Controller</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">//设置相应编码</span></span><br><span class="line">    <span class="meta">@RequestMapping(value="/save",produces="text/html;harset=UTF-8")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(Account account)</span>{</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping("/findAll")</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"accountList"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"accountList"</span>,accountService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8-编写添加页面"><a href="#1-8-编写添加页面" class="headerlink" title="1.8 编写添加页面"></a>1.8 编写添加页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>保存账户信息表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/save.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        用户名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        账户金额<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-9-编写列表页面"><a href="#1-9-编写列表页面" class="headerlink" title="1.9 编写列表页面"></a>1.9 编写列表页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"${accountList}"</span> <span class="attr">var</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.id}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.name}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.money}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-10-编写相应配置文件"><a href="#1-10-编写相应配置文件" class="headerlink" title="1.10 编写相应配置文件"></a>1.10 编写相应配置文件</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">数据库连接信息文件：jdbc.properties</button></li><li class="tab"><button type="button" data-href="#1-2">日志文件：log4j.properties</button></li><li class="tab"><button type="button" data-href="#1-3">MyBatis核心文件：sqlMapConfig.xml</button></li><li class="tab"><button type="button" data-href="#1-4">MyBatis映射文件：AccountMapper.xml</button></li><li class="tab"><button type="button" data-href="#1-5">SprngMVC配置文件：spring-mvc.xml</button></li><li class="tab"><button type="button" data-href="#1-6">Spring配置文件：applicationContext.xml</button></li><li class="tab"><button type="button" data-href="#1-7">Web.xml文件：web.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hibernate, Relational Persistence for Idiomatic Java</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span></span><br><span class="line"><span class="comment"># See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html&gt;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct messages to file hibernate.log ###</span></span><br><span class="line"><span class="comment">#log4j.appender.file=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.file.File=hibernate.log</span></span><br><span class="line"><span class="comment">#log4j.appender.file.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change 'info' to 'debug' ###</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="cn.jyw.pojo.Account" alias="account"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"developement"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"developement"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="cn/jyw/mapper/AccountMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        insert into account values(#{id},#{name},#{money})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描  主要扫描controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内部资源视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发静态资源访问权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描 扫描service和mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除controller的扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring 监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Spring整合MyBatis"><a href="#2-Spring整合MyBatis" class="headerlink" title="2. Spring整合MyBatis"></a>2. Spring整合MyBatis</h1><h2 id="2-1-整合思路"><a href="#2-1-整合思路" class="headerlink" title="2.1 整合思路"></a>2.1 整合思路</h2><blockquote><p><strong>在Service中将Session工厂交给Spring容器管理,从容器中获得执行操纵的的Mapper实例即可</strong></p><p>  resourceAsStream = Resources.getResourceAsStream(“sqlMapConfig.xml”);<br>           //获得session工厂对象<br>            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);<br>            //获得session会话对象<br>            SqlSession sqlSession = sqlSessionFactory.openSession();<br>           AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);</p></blockquote><blockquote><p><strong>将事务的控制交给Spring容器进行声明事务控制</strong></p><p>sqlSession.commit();<br> sqlSession.close();</p></blockquote><h2 id="2-2-将SqlSessionFactory配置到Spring容器中"><a href="#2-2-将SqlSessionFactory配置到Spring容器中" class="headerlink" title="2.2 将SqlSessionFactory配置到Spring容器中"></a>2.2 将SqlSessionFactory配置到Spring容器中</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置MyBatis的sessionFactory--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--加载mybatis核心文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-扫描Mapper，让Spring容器产生Mapper实现类"><a href="#2-3-扫描Mapper，让Spring容器产生Mapper实现类" class="headerlink" title="2.3 扫描Mapper，让Spring容器产生Mapper实现类"></a>2.3 扫描Mapper，让Spring容器产生Mapper实现类</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Mapper扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-配置声明式事务控制"><a href="#2-4-配置声明式事务控制" class="headerlink" title="2.4 配置声明式事务控制"></a>2.4 配置声明式事务控制</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transacionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transacionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>此时sqlMapConfig-spring.xml</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="cn.jyw.pojo.Account" alias="account"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-修改Service实现类代码"><a href="#2-5-修改Service实现类代码" class="headerlink" title="2.5 修改Service实现类代码"></a>2.5 修改Service实现类代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> {</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-整体整合思路-项目"><a href="#3-整体整合思路-项目" class="headerlink" title="3. 整体整合思路(项目)"></a>3. 整体整合思路(项目)</h1><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">Spring</button></li><li class="tab"><button type="button" data-href="#1-2">MyBatis</button></li><li class="tab"><button type="button" data-href="#1-3">日志</button></li><li class="tab"><button type="button" data-href="#1-4">json</button></li><li class="tab"><button type="button" data-href="#1-5">jstl</button></li><li class="tab"><button type="button" data-href="#1-6">文件上传</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aspectj织入 aop用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springmvc用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis整合spring包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--json的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsp中jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-2-整合思路"><a href="#3-2-整合思路" class="headerlink" title="3.2 整合思路"></a>3.2 整合思路</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">Dao层</button></li><li class="tab"><button type="button" data-href="#1-2">Service层</button></li><li class="tab"><button type="button" data-href="#1-3">Controller层</button></li><li class="tab"><button type="button" data-href="#1-4">Web.xml文件</button></li><li class="tab"><button type="button" data-href="#1-5">1 5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><ol><li><code>sqlMapConfig.xml</code> 空文件即可但是要文件头</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><code>applicationContext-dao.xml</code><ol><li>数据库链接</li><li>sqlSessionFactory对象,需要spirng和mybatis整合包下的</li><li>配置mapper扫描器</li></ol></li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置MyBatis的sessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载mybatis核心文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置这个之后mapper文件里面就可以直接写对应类名不用写全路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.crm.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Mapper扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置Mapper扫描包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.crm.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>数据库配置文件(jdbc.properties)</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/crm</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><ol><li><code>applicationContext-service.xml</code>包扫描器,扫描@service注解的类</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置@Service类的包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.crm.service"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><code>applciationContext-trans.xml</code>配置事务</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--传播行为--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.crm.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>springmvc.xml</p><ol><li>包扫描器,扫描@Controller注解的类</li><li>配置注解驱动</li><li>配置视图解析器</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描  主要扫描controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.crm.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发静态资源访问权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><ol><li>配置spring</li><li>配置前端控制器</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置全局参数，指定ContextLoaderListener监听器所用到的contextConfigLocation值(spring配置文件的位置)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--由指定的监听器来创建并管理spring的容器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置springmvc什么时候启动,参数必须为整数--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果为0或者大于0,则springmvc随着容器启动而启动--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果小于0,则在第一次请求进来的时候启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有的请求进入springmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><blockquote><ol><li>web.xml配置时,是设置所有的请求都进入SpirngMVC,但是SpringMVC无法处理css、js等静态资源，所以无法正常显示</li></ol></blockquote><blockquote><p>解决方案</p></blockquote><ol><li>在springmvc.xml中配置</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>修改web.xml,让所有以action结尾的请求都进入SpringMVC</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有的请求进入springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spirng(六) SpringMVC</title>
      <link href="/javaee/spring/spring-liu-springmvc/"/>
      <url>/javaee/spring/spring-liu-springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring集成web环境"><a href="#1-Spring集成web环境" class="headerlink" title="1. Spring集成web环境"></a>1. Spring集成web环境</h1><h2 id="1-1-ApplicationContext应用上下文获取方式"><a href="#1-1-ApplicationContext应用上下文获取方式" class="headerlink" title="1.1 ApplicationContext应用上下文获取方式"></a>1.1 ApplicationContext应用上下文获取方式</h2><blockquote><p>应用上下文对象是通过<code>new ClasspathXmlApplicationContext(spring配置文件) </code>方式获取的<br>但是每次从容器中获得Bean时都要编写<code>new ClasspathXmlApplicationContext(spring配置文件) </code><br>这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p></blockquote><blockquote><p>在Web项目中，可以使用<code>ServletContextListener</code>监听Web应用的启动，我们可以在Web应用启动时,<br>就加载Spring的配置文件，创建应用上下文对象<code>ApplicationContext</code>，在将其存储到最大的域<code>servletContext</code>域 中，<br>这样就可以在任意位置从域中获得应用上下文<code>ApplicationContext</code>对象了。</p></blockquote><h2 id="1-2-Spring提供获取应用上下文的工具"><a href="#1-2-Spring提供获取应用上下文的工具" class="headerlink" title="1.2 Spring提供获取应用上下文的工具"></a>1.2 Spring提供获取应用上下文的工具</h2><p>上面的分析不用手动实现，Spring提供了一个监听器<code>ContextLoaderListener</code>就是对上述功能的封装<br>该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到<code>ServletContext</code>域中<br>提供了一个客户端工 具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象</p><p>所以我们需要做的只有两件事：</p><ol><li>在web.xml中配置<code>ContextLoaderListener</code>监听器（导入spring-web坐标）</li><li>使用<code>WebApplicationContextUtils</code>获得应用上下文对象<code>ApplicationContext</code></li></ol><h2 id="1-3-导入Spring集成web的坐标"><a href="#1-3-导入Spring集成web的坐标" class="headerlink" title="1.3 导入Spring集成web的坐标"></a>1.3 导入Spring集成web的坐标</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-配置ContextLoaderListener监听器"><a href="#1-4-配置ContextLoaderListener监听器" class="headerlink" title="1.4 配置ContextLoaderListener监听器"></a>1.4 配置ContextLoaderListener监听器</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-通过工具获得应用上下文对象"><a href="#1-5-通过工具获得应用上下文对象" class="headerlink" title="1.5 通过工具获得应用上下文对象"></a>1.5 通过工具获得应用上下文对象</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span>  WebApplicationContextUtils.getWebApplicationContext(servletContext); <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">"id"</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="2-SpringMVC-简介"><a href="#2-SpringMVC-简介" class="headerlink" title="2.  SpringMVC 简介"></a>2.  SpringMVC 简介</h1><h2 id="2-1-SpringMVC概述"><a href="#2-1-SpringMVC概述" class="headerlink" title="2.1 SpringMVC概述"></a>2.1 SpringMVC概述</h2><p><code>SpringMVC </code>是一种基于 Java 的实现 <code>MVC 设计模型</code>的请求驱动类型的<code>轻量级 Web 框架</code>，属于 <code>SpringFrameWork</code> 的后续产品，已经融合在 Spring Web Flow 中</p><p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。<br>它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时 它还支持 <code>RESTful</code> 编程风格的请求。</p><h2 id="2-2-SpringMVC快速入门"><a href="#2-2-SpringMVC快速入门" class="headerlink" title="2.2 SpringMVC快速入门"></a>2.2 SpringMVC快速入门</h2><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringMVC%E5%85%A5%E9%97%A8%E6%AD%A5%E9%AA%A4.png" alt="SpringMVC入门步骤"></p><blockquote><h3 id="1-导入坐标"><a href="#1-导入坐标" class="headerlink" title="1. 导入坐标"></a>1. 导入坐标</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-在web-xml配置SpringMVC的核心控制器"><a href="#2-在web-xml配置SpringMVC的核心控制器" class="headerlink" title="2. 在web.xml配置SpringMVC的核心控制器"></a>2. 在web.xml配置SpringMVC的核心控制器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-创建Controller和业务方法"><a href="#3-创建Controller和业务方法" class="headerlink" title="3. 创建Controller和业务方法"></a>3. 创建Controller和业务方法</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Controller save running......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Ciallo&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="4-配置注解"><a href="#4-配置注解" class="headerlink" title="4. 配置注解"></a>4. 配置注解</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/quick")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Controller save running......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="5-创建spring-mvc-xml"><a href="#5-创建spring-mvc-xml" class="headerlink" title="5. 创建spring-mvc.xml"></a>5. 创建spring-mvc.xml</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%20MVC%E6%B5%81%E7%A8%8B%E8%A7%86%E5%9B%BE.png" alt="Spring MVC流程视图"></p><h2 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h2><p>SpringMVC的开发步骤</p><ol><li>导入SpringMVC相关坐标</li><li>配置SpringMVC核心控制器DispathcerServlet</li><li>创建Controller类和视图页面</li><li>使用注解配置Controller类中业务方法的映射地址</li><li>配置SpringMVC核心文件 spring-mvc.xml</li><li>客户端发起请求测试</li></ol><h1 id="3-组件解析MVC"><a href="#3-组件解析MVC" class="headerlink" title="3. 组件解析MVC"></a>3. 组件解析MVC</h1><h2 id="3-1-SpringMVC的执行流程"><a href="#3-1-SpringMVC的执行流程" class="headerlink" title="3.1 SpringMVC的执行流程"></a>3.1 SpringMVC的执行流程</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC的执行流程 "></p><p>① 用户发送请求至前端控制器DispatcherServlet</p><p>② DispatcherServlet收到请求调用HandlerMapping处理器映射器</p><p>③ 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果 有则生成)一并返回给DispatcherServlet</p><p>④ DispatcherServlet调用HandlerAdapter处理器适配器</p><p>⑤ HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)</p><p>⑥ Controller执行完成返回ModelAndView</p><p>⑦ HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</p><p>⑧ DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p><p>⑨ ViewReslover解析后返回具体View</p><p>⑩ DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p><h2 id="3-2-SpringMVC组件解析"><a href="#3-2-SpringMVC组件解析" class="headerlink" title="3.2 SpringMVC组件解析"></a>3.2 SpringMVC组件解析</h2><ol><li><p><code>前端控制器：DispatcherServlet</code></p><blockquote><p>用户请求到达前端控制器，它就相当于 MVC 模式中的 C<br>DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求<br>DispatcherServlet 的存在降低了组件之间的耦合性</p></blockquote></li><li><p><code>处理器映射器：HandlerMapping</code></p><blockquote><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器<br>SpringMVC 提供了不同的映射器实现不同的映射方式<br>例如：配置文件方式，实现接口方式，注解方式等</p></blockquote></li><li><p><code>处理器适配器：HandlerAdapter</code></p><blockquote><p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</p></blockquote></li><li><p><code>处理器：Handler</code></p><blockquote><p>它就是我们开发中要编写的具体业务控制器<br>由 DispatcherServlet 把用户请求转发到 Handler<br>由 Handler 对具体的用户请求进行处理</p></blockquote></li><li><p><code>视图解析器：View Resolver</code></p><blockquote><p>View Resolver 负责将处理结果生成 View 视图<br>View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址<br>再生成 View 视图对象<br>最后对 View 进行渲染将处理结果通过页面展示给用户</p></blockquote></li><li><p><code>视图：View</code></p><blockquote><p>SpringMVC 框架提供了很多的 View 视图类型的支持<br>包括：jstlView、freemarkerView、pdfView等，最常用的视图就是 jsp<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p></blockquote></li></ol><h2 id="3-3-SpringMVC注解解析"><a href="#3-3-SpringMVC注解解析" class="headerlink" title="3.3 SpringMVC注解解析"></a>3.3 SpringMVC注解解析</h2><p><code>@RequestMapping</code></p><p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p><p>位置：</p><ul><li>类上，请求URL 的第一级访问目录<br>此处不写的话，就相当于应用的根目录 </li><li>方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</li></ul><p>属性：</p><ul><li><p><code>value</code>：用于指定请求的URL<br>它和path属性的作用是一样的</p></li><li><p><code>method</code>：用于指定请求的方式</p><p>例如：method = RequestMethod.POST</p></li><li><p><code>params</code>：用于指定限制请求参数的条件<br>它支持简单的表达式<br>要求请求参数的key和value必须和配置的一模一样</p><p>例如：</p><ul><li>params = {“accountName”}，表示请求参数必须有accountName</li><li>params = {“moeny!100”}，表示请求参数中money不能是100</li></ul></li></ul><blockquote><h3 id="1-mvc命名空间引入"><a href="#1-mvc命名空间引入" class="headerlink" title="1. mvc命名空间引入"></a>1. mvc命名空间引入</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--命名空间：--&gt;</span></span><br><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">xmlns:mvc="http://www.springframework.org/schema/mvc"</span><br><span class="line"><span class="comment">&lt;!--约束地址：--&gt;</span></span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc </span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-组件扫描"><a href="#2-组件扫描" class="headerlink" title="2. 组件扫描"></a>2. 组件扫描</h3></blockquote><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中<br>如果使用@Controller注解标注的话，就需要使用<code>&lt;context:component-scan base-package=“cn.jyw.controller"/&gt;</code>进行组件扫描</p><h2 id="3-4-SpringMVC的XML配置解析"><a href="#3-4-SpringMVC的XML配置解析" class="headerlink" title="3.4 SpringMVC的XML配置解析"></a>3.4 SpringMVC的XML配置解析</h2><blockquote><h3 id="1-视图解析器"><a href="#1-视图解析器" class="headerlink" title="1. 视图解析器"></a>1. 视图解析器</h3></blockquote><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的<br>该配置文件地址 org/springframework/web/servlet/DispatcherServlet.properties<br>该文件中配置了默认的视图解析器，如下：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></tbody></table></figure><p>翻看该解析器源码，可以看到该解析器的默认设置，如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REDIRECT_URL_PREFIX = <span class="string">"redirect:"</span> <span class="comment">//重定向前缀</span></span><br><span class="line">FORWARD_URL_PREFIX = <span class="string">"forward:"</span> <span class="comment">//转发前缀（默认值）</span></span><br><span class="line">prefix = <span class="string">""</span>; <span class="comment">//视图名称前缀</span></span><br><span class="line">suffix = <span class="string">""</span>;<span class="comment">//视图名称后缀</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以通过属性注入的方式修改视图的的前后缀</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="4-SpringMVC的数据响应"><a href="#4-SpringMVC的数据响应" class="headerlink" title="4. SpringMVC的数据响应"></a>4. SpringMVC的数据响应</h1><h2 id="4-1-SpringMVC的数据响应方式"><a href="#4-1-SpringMVC的数据响应方式" class="headerlink" title="4.1 SpringMVC的数据响应方式"></a>4.1 SpringMVC的数据响应方式</h2><blockquote><ol><li>页面跳转</li></ol></blockquote><ul><li>直接返回字符串</li><li>通过ModeAndView对象返回</li></ul><blockquote><ol start="2"><li>回写数据</li></ol></blockquote><ul><li>直接返回字符串</li><li>返回对象或集合</li></ul><h2 id="4-2-页面跳转"><a href="#4-2-页面跳转" class="headerlink" title="4.2 页面跳转"></a>4.2 页面跳转</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">返回字符串形式</button></li><li class="tab"><button type="button" data-href="#1-2">返回ModelAndView对象</button></li><li class="tab"><button type="button" data-href="#1-3">向request域存储数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">()</span>{ </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>转发资源地址：<code>/WEB-INF/views/index.jsp</code></p><p>返回带有前缀的字符串：</p><ul><li>转发：<code>forward:/WEB-INF/views/index.jsp </code></li><li>重定向：<code>redirect:/index.jsp</code></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick2")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod2</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"redirect:/WEB-INF/views/index.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br><span class="line"><span class="meta">@RequestMapping("/quick3")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod3</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>在进行转发时，往往要向request域中存储数据，在jsp页面中显示<br>那么Controller中怎样向request 域中存储数据呢？</p><blockquote><ol><li>通过SpringMVC框架注入的request对象setAttribute()方法设置 (不常用)</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">(HttpServletRequest request)</span>{</span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>通过ModelAndView的addObject()方法设置</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick3")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod3</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index.jsp"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-3-回写数据"><a href="#4-3-回写数据" class="headerlink" title="4.3 回写数据"></a>4.3 回写数据</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">直接返回字符串</button></li><li class="tab"><button type="button" data-href="#1-2">返回json串</button></li><li class="tab"><button type="button" data-href="#1-3">返回json对象或集合</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话<br>只需要使用 response.getWriter().print(“hello world”) 即可<br>那么在Controller中想直接回写字符串该怎样呢？</p><blockquote><ol><li>通过SpringMVC框架注入的response对象<br>使用response.getWriter().print(“hello world”) 回写数据<br>此时不需要视图跳转，业务方法返回值为void。</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick4")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod4</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">response.getWriter().print(<span class="string">"hello world"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>将需要回写的字符串直接返回<br>但此时需要通过@ResponseBody注解告知SpringMVC框架<br>方法返回的字符串不是跳转是直接在http响应体中返回。</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick5")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod5</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello springMVC!!!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>在异步项目中，客户端与服务器端往往要进行json格式字符串交互，此时我们可以手动拼接json字符串返回</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick6")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod6</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"{\"name\":\"zhangsan\",\"age\":18}"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方式手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串<br> 我们可以使用web阶段学习过的json转换工具jackson进行转换，导入jackson坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过jackson转换json格式字符串，回写字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick7")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod7</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数<br>指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置</p><blockquote><p><strong>注意此处配置后后面返回字符串都会带上引号 尽量不要使用这种繁琐而且效果不好的办法</strong></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick8")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">quickMethod8</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在方法上添加@ResponseBody就可以返回json格式的字符串<br>但是这样配置比较麻烦，配置的代码比较多<br>因此，我们可以使用MVC的注解驱动代替上述配置(引入mvc的引入空间)</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation</span></span><br><span class="line"><span class="comment">.RequestMappingHandlerAdapter"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="messageConverters"&gt;</span></span><br><span class="line"><span class="comment">        &lt;list&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.http.converter.json</span></span><br><span class="line"><span class="comment">            .MappingJackson2HttpMessageConverter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">        &lt;/list&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件</p><p>使用自动加载 RequestMappingHandlerMapping（处理映射器）和 RequestMappingHandlerAdapter（ 处理 适 配 器 ），可用在Spring-xml.xml配置文件中使用 替代注解处理器和适配器的配置</p><p>同时使用默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p><h1 id="5-SpringMVC获得请求数据"><a href="#5-SpringMVC获得请求数据" class="headerlink" title="5. SpringMVC获得请求数据"></a>5. SpringMVC获得请求数据</h1><h2 id="5-1-获得请求参数"><a href="#5-1-获得请求参数" class="headerlink" title="5.1 获得请求参数"></a>5.1 获得请求参数</h2><p>客户端请求参数的格式是：name=value&amp;name=value… … 服务器端要获得请求的参数，有时还需要进行数据的封装<br>SpringMVC可以接收如下类型的参数：</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">获得基本类型参数</button></li><li class="tab"><button type="button" data-href="#1-2">获得POJO类型参数</button></li><li class="tab"><button type="button" data-href="#1-3">获得数组类型参数</button></li><li class="tab"><button type="button" data-href="#1-4">获得集合类型参数</button></li><li class="tab"><button type="button" data-href="#1-5">ajax</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick9?username=zhangsan&amp;age=12</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick9")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod9</span><span class="params">(String username,<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick9?username=zhangsan&amp;age=12</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    getter/setter…</span><br><span class="line">}</span><br><span class="line"><span class="meta">@RequestMapping("/quick10")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod10</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick11?strs=111&amp;strs=222&amp;strs=333</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick11")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod11</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(Arrays.asList(strs));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>获得集合参数时，要将集合参数包装到一个POJO中才可以</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick12"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss Vo{</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList</span><br><span class="line">        getter/setter...方法</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick12")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod12</span><span class="params">(Vo vo)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(vo.getUserList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><blockquote><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"${pageContext.request.contextPath}/js/jquery-3.3.1.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//模拟数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userList = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        userList.<span class="title function_">push</span>({<span class="attr">username</span>: <span class="string">"zhangsan"</span>,<span class="attr">age</span>: <span class="string">"20"</span>});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        userList.<span class="title function_">push</span>({<span class="attr">username</span>: <span class="string">"lisi"</span>,<span class="attr">age</span>: <span class="string">"20"</span>});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $.<span class="title function_">ajax</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">"POST"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">url</span>: <span class="string">"/springmvc1/quick13"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userList),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            contentType : <span class="string">'application/json;charset=utf-8'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        });</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick13")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod13</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">System.out.println(userList);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="5-2-放行静态资源"><a href="#5-2-放行静态资源" class="headerlink" title="5.2 放行静态资源"></a>5.2 放行静态资源</h2><p>注意：通过谷歌开发者工具抓包发现，没有加载到jquery文件<br>原因是SpringMVC的前端控制器 DispatcherServlet的url-pattern配置的是/<br>代表对所有的资源都进行过滤操作<br>我们可以通过以下两种方式指定放行静态资源：</p><ul><li><p>在spring-mvc.xml配置文件中指定放行的资源</p><p><code>&lt;mvc:resources mapping="/js/**" location="/js/"/&gt;</code></p></li><li><p>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</p><p>代表原始容器去寻找资源</p></li></ul><h2 id="5-3-请求数据乱码问题"><a href="#5-3-请求数据乱码问题" class="headerlink" title="5.3 请求数据乱码问题"></a>5.3 请求数据乱码问题</h2><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-参数绑定注解-requestParam"><a href="#5-4-参数绑定注解-requestParam" class="headerlink" title="5.4 参数绑定注解@requestParam"></a>5.4 参数绑定注解@requestParam</h2><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick14"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick14")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod14</span><span class="params">(<span class="meta">@RequestParam("name")</span> String username)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">System.out.println(username);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注解@RequestParam还有如下参数可以使用</p><ul><li><code>value</code>：与请求参数名称</li><li><code>required</code>：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</li><li><code>defaultValue</code>：当没有指定请求参数时，则使用指定的默认值赋值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick14")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod14</span><span class="params">(<span class="meta">@RequestParam(value="name",required = </span></span></span><br><span class="line"><span class="meta"><span class="params">false,defaultValue = "你好!")</span> String username)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(username);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-5-获得Restful风格的参数"><a href="#5-5-获得Restful风格的参数" class="headerlink" title="5.5 获得Restful风格的参数"></a>5.5 获得Restful风格的参数</h2><blockquote><p><code>Restful</code>是一种软件<code>架构风格、设计风格</code>，而不是标准，只是提供了一组设计原则和约束条件<br>主要用于客户端和服务 器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等</p></blockquote><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p><ul><li>GET：用于获取资源                /user/1 GET ： 得到 id = 1 的 user</li><li>POST：用于新建资源             /user POST： 新增 user</li><li>PUT：用于更新资源               /user/1 PUT： 更新 id = 1 的 user</li><li>DELETE：用于删除资源        /user/1 DELETE： 删除 id = 1 的 user</li></ul><p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定</p><p>地址/user/1可以写成 /user/{id}，占位符{id}对应的就是1的值</p><p>在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作</p><blockquote><p><strong>springmvc1/quick19/zhangsan</strong></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick19/{name}")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod19</span><span class="params">(<span class="meta">@PathVariable(value = "name",required = true)</span> String name)</span>{</span><br><span class="line">System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-6-自定义类型转换器"><a href="#5-6-自定义类型转换器" class="headerlink" title="5.6 自定义类型转换器"></a>5.6 自定义类型转换器</h2><ul><li><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置</p></li><li><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器<br>例如：日期类型的数据就需要自 定义转换器。</p></li></ul><blockquote><h3 id="1-定义转换器类实现Converter接口"><a href="#1-定义转换器类实现Converter接口" class="headerlink" title="1. 定义转换器类实现Converter接口"></a>1. 定义转换器类实现Converter接口</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String,Date&gt;{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> {</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> format.parse(source);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-在配置文件中声明转换器"><a href="#2-在配置文件中声明转换器" class="headerlink" title="2. 在配置文件中声明转换器"></a>2. 在配置文件中声明转换器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"converterService"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jyw.converter.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-在-lt-annotation-driven-gt-中引用转换器"><a href="#3-在-lt-annotation-driven-gt-中引用转换器" class="headerlink" title="3. 在< annotation-driven>中引用转换器"></a>3. 在&lt; annotation-driven&gt;中引用转换器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"converterService"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-7-获得Servlet相关API"><a href="#5-7-获得Servlet相关API" class="headerlink" title="5.7 获得Servlet相关API"></a>5.7 获得Servlet相关API</h2><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick16")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod16</span><span class="params">(HttpServletRequest request,HttpServletResponse </span></span><br><span class="line"><span class="params">response,HttpSession session)</span>{</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-8-获得请求头"><a href="#5-8-获得请求头" class="headerlink" title="5.8 获得请求头"></a>5.8 获得请求头</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1"><i class="RequestHeader"></i>请求头</button></li><li class="tab"><button type="button" data-href="#1-2"><i class="CookieValue"></i>Cookie</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name) @RequestHeader注解的属性如下：</p><ul><li><code>value</code>：请求头的名称</li><li><code>required</code>：是否必须携带此请求头</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick17")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod17</span><span class="params">(<span class="meta">@RequestHeader(value = "User-Agent",required = false)</span> String </span></span><br><span class="line"><span class="params">headerValue)</span>{</span><br><span class="line">System.out.println(headerValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>使用@CookieValue可以获得指定Cookie的值 @CookieValue注解的属性如下：</p><ul><li><code>value</code>：指定cookie的名称</li><li><code>required</code>：是否必须携带此cookie</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick18")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod18</span><span class="params">(<span class="meta">@CookieValue(value = "JSESSIONID",required = false)</span> String jsessionid)</span>{</span><br><span class="line">System.out.println(jsessionid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="6-文件上传"><a href="#6-文件上传" class="headerlink" title="6. 文件上传"></a>6. 文件上传</h1><h2 id="6-1-文件上传客户端三要素"><a href="#6-1-文件上传客户端三要素" class="headerlink" title="6.1 文件上传客户端三要素"></a>6.1 文件上传客户端三要素</h2><ul><li>表单项type=“file”</li><li>表单的提交方式是post</li><li>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</li></ul><h2 id="6-2-文件上传原理"><a href="#6-2-文件上传原理" class="headerlink" title="6.2 文件上传原理"></a>6.2 文件上传原理</h2><ul><li>当form表单修改为多部分表单时，request.getParameter()将失效</li><li>enctype=“application/x-www-form-urlencoded”时，form表单的正文内容格式是<code>key=value&amp;key=value&amp;key=value</code></li><li>当form表单的enctype取值为Mutilpart/form-data时，请求正文内容就变成多部分形式：</li></ul><h2 id="6-3-单文件上传步骤"><a href="#6-3-单文件上传步骤" class="headerlink" title="6.3 单文件上传步骤"></a>6.3 单文件上传步骤</h2><blockquote><h3 id="1-导入fileupload和io坐标"><a href="#1-导入fileupload和io坐标" class="headerlink" title="1. 导入fileupload和io坐标"></a>1. 导入fileupload和io坐标</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置文件上传解析器"><a href="#2-配置文件上传解析器" class="headerlink" title="2. 配置文件上传解析器"></a>2. 配置文件上传解析器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242800"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单个文件的大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"5242800"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件的编码类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-编写文件上传代码"><a href="#3-编写文件上传代码" class="headerlink" title="3. 编写文件上传代码"></a>3. 编写文件上传代码</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick20")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod20</span><span class="params">(String name,MultipartFile uploadFile)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">    <span class="comment">//获得文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\upload\\"</span>+originalFilename));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-4-多文件上传实现"><a href="#6-4-多文件上传实现" class="headerlink" title="6.4 多文件上传实现"></a>6.4 多文件上传实现</h2><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>多文件上传测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick21"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件3：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick21")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod21</span><span class="params">(String name,MultipartFile[] uploadFiles)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile uploadFile : uploadFiles){</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">        uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\upload\\"</span>+originalFilename));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="7-SpringMVC拦截器"><a href="#7-SpringMVC拦截器" class="headerlink" title="7. SpringMVC拦截器"></a>7. SpringMVC拦截器</h1><h2 id="7-1-拦截器（interceptor）的作用"><a href="#7-1-拦截器（interceptor）的作用" class="headerlink" title="7.1 拦截器（interceptor）的作用"></a>7.1 拦截器（interceptor）的作用</h2><p>Spring MVC 的拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理</p><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（Interceptor Chain）</p><p>在访问被拦截的方 法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用</p><p>拦截器也是AOP思想的具体实现</p><h2 id="7-2-拦截器和过滤器区别"><a href="#7-2-拦截器和过滤器区别" class="headerlink" title="7.2 拦截器和过滤器区别"></a>7.2 拦截器和过滤器区别</h2><table><thead><tr><th align="center">区别</th><th align="center">过滤器(Filter)</th><th align="center">拦截器(Interceptor)</th></tr></thead><tbody><tr><td align="center">使用范围</td><td align="center">是servlet规范中的一部分,<br>任何Java Web 工程都能使用</td><td align="center">是 SpringMVC 框架自己的,<br>只有使用了 SpringMVC 框架的工程才能用</td></tr><tr><td align="center">拦截范围</td><td align="center">在 url-pattern 中配置了/*之后,<br>可以对所有要访问的资源拦截</td><td align="center">在&lt; mvc:mapping path=””/&gt;中配置了/**之后也可以多所有资源进行拦截<br>但是可以通过&lt; mvc:exclude-mapping path=””/&gt;标签排除不需要拦截的资源</td></tr></tbody></table><h2 id="7-3-拦截器快速入门"><a href="#7-3-拦截器快速入门" class="headerlink" title="7.3 拦截器快速入门"></a>7.3 拦截器快速入门</h2><blockquote><h3 id="1-创建拦截器类实现HandlerInterceptor接口"><a href="#1-创建拦截器类实现HandlerInterceptor接口" class="headerlink" title="1. 创建拦截器类实现HandlerInterceptor接口"></a>1. 创建拦截器类实现HandlerInterceptor接口</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line">    <span class="comment">//在目标方法之前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> {</span><br><span class="line">        System.out.println(<span class="string">"preHandle running..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="comment">//在目标方法执行之后视图对象返回值执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> {</span><br><span class="line">        System.out.println(<span class="string">"postHandle running..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//在流程都执行完毕之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> {</span><br><span class="line">    System.out.println(<span class="string">"afterCompletion running..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置拦截器"><a href="#2-配置拦截器" class="headerlink" title="2.  配置拦截器"></a>2.  配置拦截器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jyw.interceptor.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick23")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod23</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException {</span><br><span class="line">    System.out.println(<span class="string">"目标方法执行...."</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"itcast"</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-测试拦截效果"><a href="#3-测试拦截效果" class="headerlink" title="3. 测试拦截效果"></a>3. 测试拦截效果</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick23")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod23</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"目标方法执行...."</span>);</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"Ciallo"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preHandle running...</span><br><span class="line">目标方法执行....</span><br><span class="line">postHandle running...</span><br><span class="line">afterCompletion running...</span><br></pre></td></tr></tbody></table></figure><h2 id="7-4-多拦截器操作"><a href="#7-4-多拦截器操作" class="headerlink" title="7.4 多拦截器操作"></a>7.4 多拦截器操作</h2><p>同上，在编写一个MyHandlerInterceptor2操作，测试执行顺序</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">preHandle running...</span><br><span class="line">preHandle running222...</span><br><span class="line">目标方法执行....</span><br><span class="line">postHandle running222...</span><br><span class="line">postHandle running...</span><br><span class="line">afterCompletion running222...</span><br><span class="line">afterCompletion running...</span><br></pre></td></tr></tbody></table></figure><h2 id="7-5-拦截器方法说明"><a href="#7-5-拦截器方法说明" class="headerlink" title="7.5 拦截器方法说明"></a>7.5 拦截器方法说明</h2><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">preHandle()</td><td align="center">方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的<br> 当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行<br>当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方 法</td></tr><tr><td align="center">postHandle()</td><td align="center">该方法是在当前请求进行处理之后被调用，前提是preHandle 方法的返回值为 true 时才能被调用<br>且它会在DispatcherServlet 进行视图返回渲染之前被调用<br>所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象 进行操作</td></tr><tr><td align="center">afterCompletion()</td><td align="center">该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行<br>前提是preHandle 方法的返回值为true 时才能被调用</td></tr></tbody></table><h1 id="8-SpringMVC异常处理机制"><a href="#8-SpringMVC异常处理机制" class="headerlink" title="8. SpringMVC异常处理机制"></a>8. SpringMVC异常处理机制</h1><h2 id="8-1-异常处理的思路"><a href="#8-1-异常处理的思路" class="headerlink" title="8.1 异常处理的思路"></a>8.1 异常处理的思路</h2><p>系统中异常包括两类：<code>预期异常</code>和<code>运行时异常RuntimeException</code>，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生</p><p>系统的<code>Dao</code>、<code>Service</code>、<code>Controller</code>出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交 由异常处理器进行异常处理，如下图</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpirngMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="SpirngMVC异常处理"></p><h2 id="8-2-异常处理两种方式"><a href="#8-2-异常处理两种方式" class="headerlink" title="8.2 异常处理两种方式"></a>8.2 异常处理两种方式</h2><ul><li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器</li></ul><h2 id="8-3-简单异常处理器SimpleMappingExceptionResolver"><a href="#8-3-简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="8.3 简单异常处理器SimpleMappingExceptionResolver"></a>8.3 简单异常处理器SimpleMappingExceptionResolver</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">“org.springframework.web.servlet.handler.SimpleMappingExceptionResolver”</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“defaultErrorView”</span> <span class="attr">value</span>=<span class="string">“error”/</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“exceptionMappings”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--异常类型 错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cn.jyw.exception.MyException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.lang.ClassCastException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="8-4-自定义异常处理步骤"><a href="#8-4-自定义异常处理步骤" class="headerlink" title="8.4 自定义异常处理步骤"></a>8.4 自定义异常处理步骤</h2><blockquote><h3 id="1-创建异常处理器类实现HandlerExceptionResolver"><a href="#1-创建异常处理器类实现HandlerExceptionResolver" class="headerlink" title="1. 创建异常处理器类实现HandlerExceptionResolver"></a>1. 创建异常处理器类实现HandlerExceptionResolver</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> {</span><br><span class="line">        <span class="comment">//处理异常的代码实现</span></span><br><span class="line">        <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"exceptionPage"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置异常处理器"><a href="#2-配置异常处理器" class="headerlink" title="2.  配置异常处理器"></a>2.  配置异常处理器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.exception.MyExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-编写异常页面"><a href="#3-编写异常页面" class="headerlink" title="3. 编写异常页面"></a>3. 编写异常页面</h3></blockquote><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是一个最终异常的显示页面</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="4-测试异常跳转"><a href="#4-测试异常跳转" class="headerlink" title="4. 测试异常跳转"></a>4. 测试异常跳转</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick22")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod22</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException {</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    simpleDateFormat.parse(<span class="string">"abcde"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(三) MyBatis的多表查询和注解操作</title>
      <link href="/javaee/mybatis/mybatis-san-mybatis-de-duo-biao-cha-xun-he-zhu-jie-cao-zuo/"/>
      <url>/javaee/mybatis/mybatis-san-mybatis-de-duo-biao-cha-xun-he-zhu-jie-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis多表查询"><a href="#1-Mybatis多表查询" class="headerlink" title="1. Mybatis多表查询"></a>1. Mybatis多表查询</h1><h2 id="1-1-一对一查询"><a href="#1-1-一对一查询" class="headerlink" title="1.1 一对一查询"></a>1.1 一对一查询</h2><blockquote><ol><li>一对一查询的模型</li></ol></blockquote><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户 </p><p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p><table><thead><tr><th align="center">orders</th><th align="center">user</th></tr></thead><tbody><tr><td align="center">id:int</td><td align="center">id:int</td></tr><tr><td align="center">ordertime:varchar(255)</td><td align="center">username:varchar(50)</td></tr><tr><td align="center">total:double</td><td align="center">password:varchar(50)</td></tr><tr><td align="center">uid:int</td><td align="center">birthday:varchar(50)</td></tr></tbody></table><blockquote><ol start="2"><li>一对一查询的语句</li></ol></blockquote><p>对应的sql语句：select * from orders o,user u where o.uid=u.id</p><blockquote><ol start="3"><li>创建Order和User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>创建OrderMapper接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> {</span><br><span class="line">List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置OrderMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"user.username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中<code>&lt;resultMap&gt;</code>还可以配置如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"ordertime"</span> <span class="attr">column</span>=<span class="string">"ordertime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">column</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OrderMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">List&lt;Order&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(Order order : all){</span><br><span class="line">System.out.println(order);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-一对多查询"><a href="#1-2-一对多查询" class="headerlink" title="1.2  一对多查询"></a>1.2  一对多查询</h2><blockquote><ol><li>一对多查询的模型</li></ol></blockquote><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户 </p><p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p><blockquote><ol start="2"><li>一对多查询的语句</li></ol></blockquote><p>对应的sql语句：select * from user u left join orders o on u.id=o.uid;</p><blockquote><ol start="3"><li>修改User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>创建UserMapper接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.pojo.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : all){</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList){</span><br><span class="line">    System.out.println(order);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-多对多查询"><a href="#1-3-多对多查询" class="headerlink" title="1.3 多对多查询"></a>1.3 多对多查询</h2><blockquote><ol><li>多对多查询的模型</li></ol></blockquote><p>用户表和角色表的关系为，一个用户有多个角色</p><p>一个角色被多个用户使用</p><p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p><table><thead><tr><th align="center">user</th><th align="center">user_role</th><th align="center">role</th></tr></thead><tbody><tr><td align="center">id:int</td><td align="center">user_id:int</td><td align="center">id:int</td></tr><tr><td align="center">username:varchar(50)</td><td align="center">role_id:int</td><td align="center">rolename:varchar(255)</td></tr><tr><td align="center">password:varchar(50)</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">birthday:varchar(50)</td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><ol start="2"><li>多对多查询的语句</li></ol></blockquote><p>对应的sql语句：select u.* ,r.* ,r.id rid from user u left join user_role ur on u.id=ur.user_id inner join role r on ur.role_id=r.id</p><blockquote><ol start="3"><li>创建Role实体，修改User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>添加UserMapper接口方法</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findAllUserAndRole</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">ofType</span>=<span class="string">"cn.jyw.pojo.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rolename"</span> <span class="attr">property</span>=<span class="string">"rolename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUserAndRole"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    select u.*,r.*,r.id rid from user u left join user_role ur on </span><br><span class="line">u.id=ur.user_id</span><br><span class="line">    inner join role r on ur.role_id=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all){</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList){</span><br><span class="line">    System.out.println(role);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-MyBatis多表配置方式小结"><a href="#1-4-MyBatis多表配置方式小结" class="headerlink" title="1.4 MyBatis多表配置方式小结"></a>1.4 MyBatis多表配置方式小结</h2><ul><li>一对一配置：使用<code>&lt;resultMap&gt;</code>做配置</li><li>一对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置</li><li>多对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置</li></ul><h1 id="2-MyBatis注解开发"><a href="#2-MyBatis注解开发" class="headerlink" title="2. MyBatis注解开发"></a>2. MyBatis注解开发</h1><h2 id="2-1-MyBatis的常用注解"><a href="#2-1-MyBatis的常用注解" class="headerlink" title="2.1 MyBatis的常用注解"></a>2.1 MyBatis的常用注解</h2><ul><li>@Insert：实现新增</li><li>@Update：实现更新</li><li>@Delete：实现删除</li><li>@Select：实现查询</li><li>@Result：实现结果集封装</li><li>@Results：可以与@Result 一起使用，封装多个结果集</li><li>@One：实现一对一结果集封装</li><li>@Many：实现一对多结果集封装</li></ul><h2 id="2-2-MyBatis的增删改查"><a href="#2-2-MyBatis的增删改查" class="headerlink" title="2.2 MyBatis的增删改查"></a>2.2 MyBatis的增删改查</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert("insert into user values(#{id},#{username},#{password},#{birthday})")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update("update user set username=#{username},password=#{password} where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("select * from user where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("select * from user")</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.jyw.mapper.UserMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>或者指定扫描包含映射关系的接口所在的包也可以</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定接口所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-MyBatis的注解实现复杂映射开发"><a href="#2-3-MyBatis的注解实现复杂映射开发" class="headerlink" title="2.3 MyBatis的注解实现复杂映射开发"></a>2.3 MyBatis的注解实现复杂映射开发</h2><p>实现复杂关系映射之前我们可以在映射文件中通过配置来实现</p><p>使用注解开发后，我们可以使用@Results注解 ，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Results</td><td align="center">代替的是<code>&lt;resultMap&gt;</code>标签该注解中可以使用单个@Result注解，也可以使用@Result集合<br>使用格式：@Results（{@Result（），@Result（）}）或@Results（@Result（））</td></tr><tr><td align="center">@Resut</td><td align="center">代替了<code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签 @Result中属性介绍：<br> column：数据库的列名<br>property：需要装配的属性名<br>one：需要使用的@One 注解（@Result（one=@One）（）））<br>many：需要使用的@Many 注解（@Result（many=@many）（）））</td></tr><tr><td align="center">@One （一对一）</td><td align="center">代替了<code>&lt;assocation&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象<br>@One注解属性介绍：<br>select: 指定用来多表查询的 sqlmapper<br>使用格式：@Result(column=” “,property=””,one=@One(select=””))</td></tr><tr><td align="center">@Many （多对一）</td><td align="center">代替了<code>&lt;collection&gt;</code>标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合<br>使用格式：@Result(property=””,column=””,many=@Many(select=””))</td></tr></tbody></table><h2 id="2-4-一对一查询"><a href="#2-4-一对一查询" class="headerlink" title="2.4 一对一查询"></a>2.4 一对一查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select *,o.id oid from orders o,user u where o.uid=u.id")</span></span><br><span class="line">    <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">            @Result(column = "oid",property = "id"),</span></span><br><span class="line"><span class="meta">            @Result(column = "ordertime",property = "ordertime"),</span></span><br><span class="line"><span class="meta">            @Result(column = "total",property = "total"),</span></span><br><span class="line"><span class="meta">            @Result(column = "uid",property = "user.id"),</span></span><br><span class="line"><span class="meta">            @Result(column = "username",property = "user.username"),</span></span><br><span class="line"><span class="meta">            @Result(column = "password",property = "user.password")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select * from orders")</span></span><br><span class="line">   <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">           @Result(column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">           @Result(column = "ordertime",property = "ordertime"),</span></span><br><span class="line"><span class="meta">           @Result(column = "total",property = "total"),</span></span><br><span class="line"><span class="meta">           @Result(</span></span><br><span class="line"><span class="meta">                   property = "user", //要封装的属性名称</span></span><br><span class="line"><span class="meta">                   column = "uid", //根据那个字段去查询user表的数据</span></span><br><span class="line"><span class="meta">                   javaType = User.class, /a/要封装的实体类型</span></span><br><span class="line"><span class="meta">                   //select属性 代表查询那个接口的方法获得数据</span></span><br><span class="line"><span class="meta">                   one = @One(select = "cn.jyw.mapper.UserMapper.findById")</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">   })</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-一对多查询"><a href="#2-5-一对多查询" class="headerlink" title="2.5 一对多查询"></a>2.5 一对多查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select * from user")</span></span><br><span class="line"><span class="meta">@Results({</span></span><br><span class="line"><span class="meta">        @Result(id=true ,column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">        @Result(column = "username",property = "username"),</span></span><br><span class="line"><span class="meta">        @Result(column = "password",property = "password"),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">                property = "orderList",</span></span><br><span class="line"><span class="meta">                column = "id",</span></span><br><span class="line"><span class="meta">                javaType = List.class,</span></span><br><span class="line"><span class="meta">                many = @Many(select = "cn.jyw.mapper.OrderMapper.findByUid")</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserAndOrderAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> {</span><br><span class="line">    <span class="meta">@Select("select * from orders where uid=#{uid}")</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-6-多对多查询"><a href="#2-6-多对多查询" class="headerlink" title="2.6 多对多查询"></a>2.6 多对多查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("SELECT * FROM USER")</span></span><br><span class="line">   <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">           @Result(id = true,column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">           @Result(column = "username",property = "username"),</span></span><br><span class="line"><span class="meta">           @Result(column = "password",property = "password"),</span></span><br><span class="line"><span class="meta">           @Result(</span></span><br><span class="line"><span class="meta">                   property = "roleList",</span></span><br><span class="line"><span class="meta">                   column = "id",</span></span><br><span class="line"><span class="meta">                   javaType = List.class,</span></span><br><span class="line"><span class="meta">                   many = @Many(select = "cn.jyw.mapper.RoleMapper.findByUid")</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">   })</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserAndRoleAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> {</span><br><span class="line">    <span class="meta">@Select("select * from role r,user_role ur where r.id=ur.role_id and ur.user_id=#{uid}")</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">findByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(二) Dao层实现以及映射文件和配置文件</title>
      <link href="/javaee/mybatis/mybatis-er-dao-ceng-shi-xian-yi-ji-ying-she-wen-jian-he-pei-zhi-wen-jian/"/>
      <url>/javaee/mybatis/mybatis-er-dao-ceng-shi-xian-yi-ji-ying-she-wen-jian-he-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MyBatis的Dao层实现"><a href="#1-MyBatis的Dao层实现" class="headerlink" title="1. MyBatis的Dao层实现"></a>1. MyBatis的Dao层实现</h1><h2 id="1-1-传统开发方式"><a href="#1-1-传统开发方式" class="headerlink" title="1.1 传统开发方式"></a>1.1 传统开发方式</h2><blockquote><ol><li>编写UserDao接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> {</span><br><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写UserDaoImpl实现</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>. 测试传统方式</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraditionDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">    System.out.println(all);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-代理开发方式"><a href="#1-2-代理开发方式" class="headerlink" title="1.2 代理开发方式"></a>1.2 代理开发方式</h2><blockquote><ol><li>代理开发方式介绍</li></ol></blockquote><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流</p><p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接 口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法</p><p>Mapper 接口开发需要遵循以下规范：</p><blockquote><ol><li>Mapper.xml文件中的namespace与mapper接口的全限定名相同</li><li>Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol></blockquote><blockquote><ol start="2"><li>编写UserMapper接口</li></ol></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Mybaatis%E4%BB%A3%E7%90%86Dao%E5%B1%82%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83.png" alt="Mybaatis代理Dao层书写规范"></p><p>UserDao 指的是 namespace 的位置</p><blockquote><ol start="3"><li>测试代理方式</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxyDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2-MyBatis映射文件深入"><a href="#2-MyBatis映射文件深入" class="headerlink" title="2. MyBatis映射文件深入"></a>2. MyBatis映射文件深入</h1><h2 id="2-1-动态sql语句"><a href="#2-1-动态sql语句" class="headerlink" title="2.1 动态sql语句"></a>2.1 动态sql语句</h2><blockquote><p>动态sql语句概述</p></blockquote><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的</p><p>有些时候业务逻辑复杂时，我们的 SQL是动态变化的， 此时在前面的学习中我们的 SQL 就不能满足要求了</p><blockquote><ol start="2"><li>动态 SQL 的使用</li></ol></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">if</button></li><li class="tab"><button type="button" data-href="#1-2">foreach</button></li><li class="tab"><button type="button" data-href="#1-3"><if></if></button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>我们根据实体类的不同取值，使用不同的 SQL语句来进行查</p><p>比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件</p><p>这种情况在我们的多条件组合查询中经常会碰到</p><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">        and id=#{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></span><br><span class="line">        and username=#{username}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当查询条件id和username都存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">un</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line">condition.setUsername(<span class="string">"lucy"</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByCondition(condition);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User WHERE id = ? and username = ?</span><br></pre></td></tr></tbody></table></figure><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByCondition(condition);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User WHERE id = ? </span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试代码片段如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">int</span>[] ids = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">2</span>,<span class="number">5</span>};</span><br><span class="line">List&lt;User&gt; userList = userMapper.findByIds(ids);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * form User WHERE id in(?,?)</span><br></pre></td></tr></tbody></table></figure><p>foreach标签的属性含义如下：</p><p>&lt; foreach&gt;标签用于遍历集合，它的属性：</p><ul><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-SQL片段抽取"><a href="#2-2-SQL片段抽取" class="headerlink" title="2.2 SQL片段抽取"></a>2.2 SQL片段抽取</h2><blockquote><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取sql片段简化编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectUser"</span>&gt;</span>select * from User<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span> where id=#{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-MyBatis映射文件配置-小结"><a href="#2-3-MyBatis映射文件配置-小结" class="headerlink" title="2.3 MyBatis映射文件配置(小结)"></a>2.3 MyBatis映射文件配置(小结)</h2><table><thead><tr><th align="center">标签</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>&lt;select&gt;</code></td><td align="center">查询</td></tr><tr><td align="center"><code>&lt;insert&gt;</code></td><td align="center">插入</td></tr><tr><td align="center"><code>&lt;update&gt;</code></td><td align="center">修改</td></tr><tr><td align="center"><code>&lt;delete&gt;</code></td><td align="center">删除</td></tr><tr><td align="center"><code>&lt;where&gt;</code></td><td align="center">where条件</td></tr><tr><td align="center"><code>&lt;if&gt;</code></td><td align="center">if判断</td></tr><tr><td align="center"><code>&lt;foreach&gt;</code></td><td align="center">循环</td></tr><tr><td align="center"><code>&lt;sql&gt;</code></td><td align="center">sql片段抽取</td></tr><tr><td align="center"><code>&lt;include&gt;</code></td><td align="center">插入</td></tr></tbody></table><h1 id="3-MyBatis核心配置文件深入"><a href="#3-MyBatis核心配置文件深入" class="headerlink" title="3. MyBatis核心配置文件深入"></a>3. MyBatis核心配置文件深入</h1><h2 id="3-1-typeHandlers标签"><a href="#3-1-typeHandlers标签" class="headerlink" title="3.1 typeHandlers标签"></a>3.1 typeHandlers标签</h2><table><thead><tr><th align="center">数据类型</th><th align="center">Java类型</th><th align="center">JDBC类型</th></tr></thead><tbody><tr><td align="center"><code>BoolenaTypeHandler</code></td><td align="center"><code>java.lang.Boolean</code>,<code>boolean</code></td><td align="center">数据库兼容的<code>BOOLEAN</code></td></tr><tr><td align="center"><code>ByteTypeHander</code></td><td align="center"><code>java.lang.Byte</code>,<code>yte</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>BYTE</code></td></tr><tr><td align="center"><code>ShortTypeHander</code></td><td align="center"><code>java.lang.Short</code>,<code>short</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>SHORT INTEGER</code></td></tr><tr><td align="center"><code>IntegerTypeHander</code></td><td align="center"><code>java.lang.Integer</code>,<code>int</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>INTEGER</code></td></tr><tr><td align="center"><code>LongTypeHander</code></td><td align="center"><code>java.lang.Long</code>,<code>long</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>LONG INTEGER</code></td></tr></tbody></table><blockquote><p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型</p><p>具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个JDBC类型</p><p>例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一 个1970年至今的毫秒数，取出来时转换成java的Date<br>即java的Date与数据库的varchar毫秒值之间转换</p></blockquote><p>开发步骤：</p><blockquote><ol><li>定义转换类继承类BaseTypeHandler</li><li>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult 为查询时 mysql的字符串类型转换成 java的Type类型的方法</li><li>在MyBatis核心配置文件中进行注册</li><li>测试转换是否正确</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;Date&gt; {</span><br><span class="line">    <span class="comment">//将Date转换成long 给 数据库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="type">int</span> i, Date date, JdbcType type)</span> </span><br><span class="line">    {</span><br><span class="line">    preparedStatement.setString(i,date.getTime()+<span class="string">""</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//根据结果集字段名称 把 long转换成Date给java</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(resultSet.getLong(s));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//根据结果集字段位置 把 long转换成Date给java</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(resultSet.getLong(i));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> callableStatement.getDate(i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"cn.jyw.typeHandlers.MyDateTypeHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-plugins标签"><a href="#3-2-plugins标签" class="headerlink" title="3.2 plugins标签"></a>3.2 plugins标签</h2><blockquote><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即 可获得分页的相关数据</p></blockquote><p>开发步骤：</p><ol><li>导入通用PageHelper的坐标</li><li>在mybatis核心配置文件中配置PageHelper插件 </li><li>测试分页数据获取</li></ol><blockquote><ol><li>导入通用PageHelper坐标</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>在mybatis核心配置文件中配置PageHelper插件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：分页助手的插件 配置在通用馆mapper之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>测试分页代码实现</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">//设置分页参数 当前页+每页显示条数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; select = userMapper2.select(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(User user : select){</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>获得分页相关的其他参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;User&gt;(select);</span><br><span class="line">System.out.println(<span class="string">"总条数："</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">"当前页："</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">"每页显示长度："</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">"是否第一页："</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">"是否最后一页："</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-MyBatis核心配置文件常用标签："><a href="#3-3-MyBatis核心配置文件常用标签：" class="headerlink" title="3.3 MyBatis核心配置文件常用标签："></a>3.3 MyBatis核心配置文件常用标签：</h2><blockquote><ol><li>properties标签：该标签可以加载外部的properties文件 </li><li>typeAliases标签：设置类型别名 </li><li>environments标签：数据源环境配置标签 </li><li>typeHandlers标签：配置自定义类型处理器 </li><li>plugins标签：配置MyBatis的插件</li><li>mapers标签：加载映射文件</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(一) 入门操作</title>
      <link href="/javaee/mybatis/mybatis-yi-ru-men-cao-zuo/"/>
      <url>/javaee/mybatis/mybatis-yi-ru-men-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis简介"><a href="#1-Mybatis简介" class="headerlink" title="1. Mybatis简介"></a>1. Mybatis简介</h1><h2 id="1-1-原始jdbc操作"><a href="#1-1-原始jdbc操作" class="headerlink" title="1.1 原始jdbc操作"></a>1.1 原始jdbc操作</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">插入数据</button></li><li class="tab"><button type="button" data-href="#1-2">查询数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟实体对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">2</span>);</span><br><span class="line">user.setUsername(<span class="string">"tom"</span>);</span><br><span class="line">user.setPassword(<span class="string">"lucy"</span>); .</span><br><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//获得连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span> );</span><br><span class="line"><span class="comment">//获得statement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">"insert into user(id,username , password) values(?,?,?)"</span>);</span><br><span class="line"><span class="comment">//设置占位符参数</span></span><br><span class="line">statement.setInt(<span class="number">1</span>,user.getId());</span><br><span class="line">statement.setString(<span class="number">2</span>,user.getUsername());</span><br><span class="line">statement.setString(<span class="number">3</span>,user.getPassword());</span><br><span class="line"><span class="comment">//执行更新操作</span></span><br><span class="line">statement.executeUpdate();</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//获得连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span> );</span><br><span class="line"><span class="string">"root"</span>, password: <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//获得statement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">"select id,username,password from user"</span>); .</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line"><span class="comment">//遍历结果集</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next()){</span><br><span class="line">    <span class="comment">//封装实体</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">    user.setUsername(resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">    user.setPassword(resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">    <span class="comment">//user实体封装完毕</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-原始jdbc操作的分析"><a href="#1-2-原始jdbc操作的分析" class="headerlink" title="1.2 原始jdbc操作的分析"></a>1.2 原始jdbc操作的分析</h2><blockquote><p>原始jdbc开发存在的问题如下：</p></blockquote><ol><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li><li>sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码</li><li>查询操作时，需要手动将结果集中的数据手动封装到实体中，插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li></ol><blockquote><p>应对上述问题给出的解决方案：</p></blockquote><ol><li>使用数据库连接池初始化连接资源</li><li>将sql语句抽取到xml配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ol><h2 id="1-3-什么是Mybatis"><a href="#1-3-什么是Mybatis" class="headerlink" title="1.3 什么是Mybatis"></a>1.3 什么是Mybatis</h2><ul><li><blockquote><p>mybatis 是一个优秀的<code>基于java的持久层框架</code>，它内部封装了 jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程</p></blockquote></li><li><blockquote><p>mybatis通过<strong>xml或注解</strong>的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的<strong>动态参数</strong>进行 映射生成最终执行的sql语句</p></blockquote></li><li><blockquote><p>最后mybatis框架执行sql并将结果映射为java对象并返回</p><p>采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了 封装，屏蔽了jdbc api 底层访问细节，使我们不用与<strong>jdbc api</strong>打交道，就可以完成对数据库的持久化操作</p></blockquote></li></ul><h2 id="1-4-Mybatis架构"><a href="#1-4-Mybatis架构" class="headerlink" title="1.4 Mybatis架构"></a>1.4 Mybatis架构</h2><p>Mybatis的功能架构分为三层：</p><ol><li><blockquote><p>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库</p><p>接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理</p></blockquote></li><li><blockquote><p>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等</p><p>它主要的目的是根据调用的请求完成一次数据库操作</p></blockquote></li><li><blockquote><p>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件</p><p>为上层的数据处理层提供最基础的支撑。</p></blockquote></li></ol><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Mybatis%E6%9E%B6%E6%9E%84.png" alt="Mybatis架构图"></p><h2 id="1-5-Mybatis原理步骤"><a href="#1-5-Mybatis原理步骤" class="headerlink" title="1.5 Mybatis原理步骤"></a>1.5 Mybatis原理步骤</h2><ol><li><p>mybatis配置文件，包括<code>Mybatis全局配置文件和Mybatis映射文件</code></p><p>其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息</p></li><li><p>mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出<code>SqlSessionFactory</code>，即会话工厂</p></li><li><p>通过SqlSessionFactory，可以创建<code>SqlSession</code>即会话</p><p><strong>Mybatis是通过SqlSession来操作数据库的</strong></p></li><li><p>SqlSession本身不能直接操作数据库，它是通过底层的<code>Executor</code>执行器接口来操作数据库的</p><p><code>Executor</code>接口有两个实现类，一个是普通执行器，一个是<code>缓存执行器（默认）</code>。</p></li><li><p>Executor执行器要处理的SQL信息是封装到一个底层对象<code>MappedStatement</code>中</p><p>该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息</p><p>其中输入参数和输出结果的映射类型包括<code>HashMap</code>集合对象、<code>POJO对象类型</code>。</p></li></ol><h1 id="2-Mybatis的快速入门"><a href="#2-Mybatis的快速入门" class="headerlink" title="2. Mybatis的快速入门"></a>2. Mybatis的快速入门</h1><h2 id="2-1-MyBatis开发步骤"><a href="#2-1-MyBatis开发步骤" class="headerlink" title="2.1 MyBatis开发步骤"></a>2.1 MyBatis开发步骤</h2><ol><li>添加MyBatis的坐标</li><li>创建user数据表</li><li>编写User实体类 </li><li>编写映射文件UserMapper.xml</li><li>编写核心文件SqlMapConfig.xml</li><li>编写测试类</li></ol><h2 id="2-2-MyBatis-快速实现"><a href="#2-2-MyBatis-快速实现" class="headerlink" title="2.2 MyBatis 快速实现"></a>2.2 MyBatis 快速实现</h2><blockquote><ol><li>导入MyBatis的坐标和其他相关坐标</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mysql坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--日志坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>创建user数据表</li></ol></blockquote><table><thead><tr><th>名</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>int</td></tr><tr><td>username</td><td>varchar</td></tr><tr><td>password</td><td>varchar</td></tr></tbody></table><blockquote><ol start="3"><li>编写User实体类</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略get个set方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>编写映射文件UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>编写核心文件SqlMapConfig.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn.jyw/mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>编写测试类</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">      <span class="comment">//获得核心配置文件</span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">      <span class="comment">//获得session工厂对象</span></span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">      <span class="comment">//获得session会话对象</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">//执行操作   参数：namespace+id</span></span><br><span class="line">      List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">      <span class="comment">//打印数据</span></span><br><span class="line">      System.out.println(userList);</span><br><span class="line">      <span class="comment">//释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h1 id="3-MyBatis的映射文件概述"><a href="#3-MyBatis的映射文件概述" class="headerlink" title="3. MyBatis的映射文件概述"></a>3. MyBatis的映射文件概述</h1><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--映射文件DTD约束头--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--跟标签 命名空间,与下面语句的id一起组成查询的标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select 查询操作,可选的还有insert,update,delete</span></span><br><span class="line"><span class="comment">    id 语句id标识 与上面的命名空间一起组成查询标识</span></span><br><span class="line"><span class="comment">    resultType  查询结果对应的实体类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        # 要执行的sql语句</span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="4-MyBatis的增删改查操作"><a href="#4-MyBatis的增删改查操作" class="headerlink" title="4. MyBatis的增删改查操作"></a>4. MyBatis的增删改查操作</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">插入数据</button></li><li class="tab"><button type="button" data-href="#1-2">删除数据</button></li><li class="tab"><button type="button" data-href="#1-3">修改数据</button></li><li class="tab"><button type="button" data-href="#1-4">查找数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><ol><li>写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into user values(#{id},#{username},#{password})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写插入实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">"userMapper.add"</span>, user);</span><br><span class="line">System.out.println(insert);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>插入操作注意问题</strong></p><ol><li>插入语句使用insert标签</li><li>在映射文件中使用parameterType属性指定要插入的数据类型</li><li>Sql语句中使用#{实体属性名}方式引用实体中的属性值</li><li>插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象);</li><li>插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务， 即sqlSession.commit()</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写删除数据的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> sqlSession.delete(<span class="string">"userMapper.delete"</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(delete);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除操作注意问题</p><ol><li>删除语句使用delete标签</li><li>Sql语句中使用#{任意字符串}方式引用传递的单个参数</li><li>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object)</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    update user set username=#{username},password=#{password} where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写修改实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> sqlSession.update(<span class="string">"userMapper.update"</span>, user);</span><br><span class="line">System.out.println(update);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改操作注意问题</p><ol><li>修改语句使用update标签</li><li>修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写修改实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="5-MyBatis核心配置文件概述"><a href="#5-MyBatis核心配置文件概述" class="headerlink" title="5. MyBatis核心配置文件概述"></a>5. MyBatis核心配置文件概述</h1><h2 id="5-1-MyBatis核心配置文件层级关系"><a href="#5-1-MyBatis核心配置文件层级关系" class="headerlink" title="5.1 MyBatis核心配置文件层级关系"></a>5.1 MyBatis核心配置文件层级关系</h2><ul><li>configuration 配置<ul><li><strong>properties 属性</strong></li><li><strong>settiongs 设置</strong></li><li><strong>typeAliases 类型别名</strong></li><li><strong>typeHandlers 类型处理器</strong></li><li><strong>objectFactory 对象工厂</strong></li><li><strong>plugins 插件</strong></li><li><strong>environments 环境</strong><ul><li><em>environment 环境变量</em><ul><li><em>transactionManager 事务管理器</em></li><li><em>dataSource 数据源</em></li></ul></li></ul></li><li><strong>databaseldProvider 数据库厂商标识</strong></li><li><strong>mappers 映射器</strong></li></ul></li></ul><h2 id="5-2-MyBatis常用配置解析"><a href="#5-2-MyBatis常用配置解析" class="headerlink" title="5.2 MyBatis常用配置解析"></a>5.2 MyBatis常用配置解析</h2><blockquote><ol><li><h3 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h3>数据库环境的配置，支持多环境配置</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定默认的环境名称--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--指定当前环境的名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--指定事务类型的JDBC--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--指定当前数据类型是连接池--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--数据源配置的基本参数--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///test"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中，事务管理器（transactionManager）类型有两种：</p></blockquote><ul><li><p><code>JDBC</code>：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域 </p></li><li><p><code>MANAGED</code>：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE  应用服务器的上下文）</p><p>默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置 为 false 来阻止它默认的关闭行为</p></li></ul><blockquote><p>其中，数据源（dataSource）类型有三种：</p></blockquote><ul><li><code>UNPOOLED</code>：这个数据源的实现只是每次被请求时打开和关闭连接</li><li><code>POOLED</code>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来</li><li><code> JNDI</code>：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置 一个 JNDI 上下文的引用</li></ul><blockquote><ol start="2"><li><h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3></li></ol></blockquote><p>该标签的作用是加载映射的，加载方式有如下几种：</p><ul><li>使用相对于类路径的资源引用，例如：&lt; mapper resource=”org/mybatis/builder/AuthorMapper.xml”/&gt;</li><li>使用完全限定资源定位符（URL），例如：&lt; mapper url=”file:///var/mappers/AuthorMapper.xml”/&gt;</li><li>使用映射器接口实现类的完全限定类名，例如：&lt; mapper class=”org.mybatis.builder.AuthorMapper”/&gt;</li><li>将包内的映射器接口实现全部注册为映射器，例如：&lt; package name=”org.mybatis.builder”/&gt;</li></ul><blockquote><ol start="3"><li><h3 id="Properties标签"><a href="#Properties标签" class="headerlink" title="Properties标签"></a>Properties标签</h3></li></ol></blockquote><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>typeAliases标签</li></ol></blockquote><p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>配置typeAliases,为cn.jyw.pojo.User定义别名为user</strong> </p><p><strong>typeAliases 放在核心配置文件中且位置在映射之前</strong></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面我们是自定义的别名，mybatis框架已经为我们设置好的一些常用的类型的别名</p></blockquote><table><thead><tr><th align="center">别名</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">int</td><td align="center">Interger</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">… …</td><td align="center">… …</td></tr></tbody></table><h2 id="5-3-知识小结"><a href="#5-3-知识小结" class="headerlink" title="5.3 知识小结"></a>5.3 知识小结</h2><blockquote><ol><li><p>properties标签：该标签可以加载外部的properties文件</p><p>&lt; properties resource=”jdbc.properties”/&gt;</p></li><li><p>typeAliases标签：设置类型别名 </p><p><strong>typeAliases 放在核心配置文件中且位置在映射之前</strong></p><p>&lt; typeAlias type=”cn.jyw.pojo.User” alias=”user”&gt;</p></li><li><p>mappers标签：加载映射配置</p><p>&lt; mapper resource=”cn.jyw/mapper.xml”/&gt;</p></li><li><p>environments标签：数据源环境配置标签</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></blockquote><h1 id="6-MyBatis的相应API"><a href="#6-MyBatis的相应API" class="headerlink" title="6. MyBatis的相应API"></a>6. MyBatis的相应API</h1><h2 id="6-1-SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#6-1-SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="6.1 SqlSession工厂构建器SqlSessionFactoryBuilder"></a>6.1 SqlSession工厂构建器SqlSessionFactoryBuilder</h2><p>常用API：<code>SqlSessionFactory build(InputStream inputStream)</code></p><p>通过加载mybatis的核心文件的输入流的形式构建一个<strong>SqlSessionFactory</strong>对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"org/mybatis/builder/mybatis-config.xml"</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(inputStream);</span><br></pre></td></tr></tbody></table></figure><p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中</p><p>Resources 类帮助你从类路径下、文件系统或 一个 web URL 中加载资源文件。</p><h2 id="6-2-SqlSession工厂对象SqlSessionFactory"><a href="#6-2-SqlSession工厂对象SqlSessionFactory" class="headerlink" title="6.2 SqlSession工厂对象SqlSessionFactory"></a>6.2 SqlSession工厂对象SqlSessionFactory</h2><p>SqlSessionFactory 有多个个方法创建 SqlSession 实例。常用的有如下两个：</p><table><thead><tr><th align="center">方法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">openSession()</td><td align="center">会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提 交该事务，更新操作数据才会持久化到数据库中</td></tr><tr><td align="center">openSession(boolean autoCommit)</td><td align="center">参数为是否自动提交，如果设置为true，那么不需要手动提交事务</td></tr></tbody></table><h2 id="6-3-SqlSession会话对象"><a href="#6-3-SqlSession会话对象" class="headerlink" title="6.3 SqlSession会话对象"></a>6.3 SqlSession会话对象</h2><p>SqlSession 实例在 MyBatis 中是非常强大的一个类</p><p>在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法</p><blockquote><p>执行语句的方法主要有：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line">&lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>操作事务的方法主要有：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(五) JdbcTemplate基本使用与事务控制</title>
      <link href="/javaee/spring/spring-wu-jdbctemplate/"/>
      <url>/javaee/spring/spring-wu-jdbctemplate/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-JdbcTemplate基本使用"><a href="#1-Spring-JdbcTemplate基本使用" class="headerlink" title="1. Spring JdbcTemplate基本使用"></a>1. Spring JdbcTemplate基本使用</h1><h2 id="1-1-JdbcTemplate概述"><a href="#1-1-JdbcTemplate概述" class="headerlink" title="1.1 JdbcTemplate概述"></a>1.1 JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始繁琐的<strong>Jdbc API对象的简单封装</strong>。spring框架为我们提供了很多的操作模板类</p><p>例如：操作关系型数据的<strong>JdbcTemplate</strong>和<strong>HibernateTemplate</strong>，操作nosql数据库的RedisTemplate操 作消息队列的JmsTemplate等等。</p><h2 id="1-2-JdbcTemplate开发步骤-x2F-快速入门"><a href="#1-2-JdbcTemplate开发步骤-x2F-快速入门" class="headerlink" title="1.2 JdbcTemplate开发步骤/快速入门"></a>1.2 JdbcTemplate开发步骤/快速入门</h2><h3 id="1-2-1-导入spring-jdbc和spring-tx坐标"><a href="#1-2-1-导入spring-jdbc和spring-tx坐标" class="headerlink" title="1.2.1 导入spring-jdbc和spring-tx坐标"></a>1.2.1 导入spring-jdbc和spring-tx坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-2-创建数据库表和实体"><a href="#1-2-2-创建数据库表和实体" class="headerlink" title="1.2.2 创建数据库表和实体"></a>1.2.2 创建数据库表和实体</h3><p>运行SQL脚本 和 Generate POJOs.groovy即可</p><h3 id="1-2-3-创建JdbcTemplate对象"><a href="#1-2-3-创建JdbcTemplate对象" class="headerlink" title="1.2.3 创建JdbcTemplate对象"></a>1.2.3 创建JdbcTemplate对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建数据源对象</span></span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//2、创建JdbcTemplate对象</span></span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line"><span class="comment">//3、设置数据源给JdbcTemplate</span></span><br><span class="line">jdbcTemplate.setDataSource(dataSource);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-4执行数据库操作"><a href="#1-2-4执行数据库操作" class="headerlink" title="1.2.4执行数据库操作"></a>1.2.4执行数据库操作</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into account values(?,?)"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"user3"</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-Spring产生JdbcTemplate对象"><a href="#1-3-Spring产生JdbcTemplate对象" class="headerlink" title="1.3 Spring产生JdbcTemplate对象"></a>1.3 Spring产生JdbcTemplate对象</h2><blockquote><p>我们可以将JdbcTemplate的创建权交给Spring</p><p>将数据源DataSource的创建权也交给Spring</p><p><strong>注意</strong>:<strong>applicationContext.xml加载jdbc.properties配置文件获得连接信息时别忘了   引入context命名空间和约束路径</strong></p><p>在Spring容器内部将 数据源DataSource注入到JdbcTemplate模版对象中，配置如下：</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jidbc模板对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> app.getBean(JdbcTemplate.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into account values(?,?)"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"user4"</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-JdbcTemplate的常用操作"><a href="#1-4-JdbcTemplate的常用操作" class="headerlink" title="1.4 JdbcTemplate的常用操作"></a>1.4 JdbcTemplate的常用操作</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">update(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-2">queryForMap(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-3">queryForList(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-4">query(sql,query的参数)</button></li><li class="tab"><button type="button" data-href="#1-5">queryForObject</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>执行DML语句。增、删、改语句</p><ol><li><p>修改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"update emp set salary = 10000 where id = 1001"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql)</span><br></pre></td></tr></tbody></table></figure></li><li><p>增加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>, <span class="string">"郭靖"</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"delete from emp where id = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>查询结果将结果集封装为map集合</p><p>将列名作为 key，将值作为value</p><p>将这条记录封装为一个map 集合</p><blockquote><p><strong>注意：这个方法查询的结果集长度只能是1</strong></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp where id = ? or id = ?"</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>查询结果将结果集封装为list集合</p><blockquote><p>注意：将每一条记录封装为一个Map集合，再将 Map集合装载到List集合中</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>查询结果，将结果封装为JavaBean对象 封装给对象</p><p>用封装类 不然 数值类型 不能被赋null</p></blockquote><ol><li><p>new BeanPropertyRowMapper&lt;类型&gt;(类型. class)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line"><span class="keyword">for</span> (Emp emp : list) { System.out.println(emp); }</span><br></pre></td></tr></tbody></table></figure></li><li><p>new RowMapper&lt;类型&gt;</p><blockquote><p>我们使用BeanPropertyRowMapper实现类</p><p>可 以完成数据到JavaBean的自动封装</p><p>不推荐)手动 设置 要接收的值的set与get</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span></span><br><span class="line"><span class="title class_">RowMapper</span>&lt;Emp&gt;() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> i)</span> <span class="keyword">throws</span></span><br><span class="line">SQLException {</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">emp.setId(id); </span><br><span class="line">    emp.setEname(ename);</span><br><span class="line"><span class="keyword">return</span> emp; }</span><br><span class="line">}</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><ol><li><p>聚合函数的查询 查询有多少记录</p><blockquote><p>还可以用主键代替要用主键</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select count(*) from emp"</span>; </span><br><span class="line"><span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> template.queryForObject(sql,Long.class);</span><br></pre></td></tr></tbody></table></figure></li><li><p>返回对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(</span><br><span class="line">    sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-事务控制"><a href="#2-事务控制" class="headerlink" title="2. 事务控制"></a>2. 事务控制</h1><h2 id="2-1-编程式事务控制相关对象"><a href="#2-1-编程式事务控制相关对象" class="headerlink" title="2.1 编程式事务控制相关对象"></a>2.1 编程式事务控制相关对象</h2><h3 id="2-1-1-PlatformTransactionManager-事务管理器"><a href="#2-1-1-PlatformTransactionManager-事务管理器" class="headerlink" title="2.1.1 PlatformTransactionManager 事务管理器"></a>2.1.1 PlatformTransactionManager 事务管理器</h3><p>PlatformTransactionManager 接口是 spring 的事务管理器</p><p>它里面提供了我们常用的操作事务的方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">TransactionStatus  getTransaction(TransactionDefination defination)</td><td align="center">获取事务的状态信息</td></tr><tr><td align="center">void commit(TransactionStatus status)</td><td align="center">提交事务</td></tr><tr><td align="center">void rollback(TransactionStatus status)</td><td align="center">回滚事务</td></tr></tbody></table><blockquote><p>注意： </p><p>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类<br>例如：Dao 层技术是jdbc  或 mybatis 时：</p><p>org.springframework.jdbc.datasource.DataSourceTransactionManager </p><p>Dao 层技术是hibernate时：</p><p>org.springframework.orm.hibernate5.HibernateTransactionManager</p></blockquote><h3 id="2-1-2-TransactionDefinition-事务的定义信息对象"><a href="#2-1-2-TransactionDefinition-事务的定义信息对象" class="headerlink" title="2.1.2 TransactionDefinition 事务的定义信息对象"></a>2.1.2 TransactionDefinition 事务的定义信息对象</h3><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int getIsolationLevel()</td><td align="center">获得事务的隔离级别</td></tr><tr><td align="center">int getPropogationBehavior()</td><td align="center">获得事务的传播行为</td></tr><tr><td align="center">int getTimeout()</td><td align="center">获得超时时间</td></tr><tr><td align="center">boolean isReadOnly()</td><td align="center">是否只读</td></tr></tbody></table><blockquote><p><strong>事务隔离级别</strong></p></blockquote><blockquote><p><strong>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读</strong></p></blockquote><p>数据库是要被广大客户所共享访问的，那么在数据库操作过程中很可能出现以下几种不确定情况。</p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">更新丢失(Lost update)</button></li><li class="tab"><button type="button" data-href="#1-2">脏读（Dirty reads）</button></li><li class="tab"><button type="button" data-href="#1-3">不可重复读（Non-repeatable Reads）</button></li><li class="tab"><button type="button" data-href="#1-4">幻读（Phantom Reads）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>两个事务都同时更新一行数据，一个事务对数据的更新把另一个事务对数据的更新覆盖了</p></blockquote><p>比如 CMS系统中，两个同时打开一篇文章进行修改，一个人先保存，另一个人后保存，后保存的就覆盖了先保存的那个人的内容，这就造成更新丢失</p><p>这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来</p><p>在并发事务处理带来的问题中，“更新丢失”通常应该是完全避免的</p><p>但防止更新丢失，并不能单靠数据库事务控制器来解决，需要应用程序对要更新的数据加必要的锁来解决，因此，防止更新丢失应该是应用的责任。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><p>一个事务读取到了另一个事务未提交的数据操作结果</p></blockquote><p>这是相当危险的，因为很可能所有的操作都被回滚。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><p>一个事务对同一行数据重复读取两次，但是却得到了不同的结果</p></blockquote><p>比如事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时得到与前一次不同的值。又叫虚读。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据或者缺少了第一次查询中出现的数据（这里并不要求两次查询的SQL语句相同）</p></blockquote><p>这是因为在两次查询过程中有另外一个事务插入数据造成的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>不可重复读的重点是修改某个记录字段，幻读的重点在于新增或者删除记录。<br>对于前者, 只需要锁住满足条件的记录。对于后者, 要锁住满足条件及其相近的记录。</p><p>“脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</p><table><thead><tr><th align="center">隔离级别</th><th align="center">读数据一致性</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">ISOLATION_DEFAULT(默认)</td><td align="center">默认</td><td align="center">默认</td><td align="center">默认</td><td align="center">默认</td></tr><tr><td align="center">ISOLATION_READ_UNCOMMITTED(未提交读)</td><td align="center">最低级别,只能保证不读取物理上损坏的数据</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_READ_COMMITTED(已提交读)</td><td align="center">语句级</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_REPEATABLE_READ(可重复读)</td><td align="center">事务级</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_SERIALIZABLE(可序列化)</td><td align="center">最高级别,事务级</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">默认(Default)</button></li><li class="tab"><button type="button" data-href="#1-2">未提交读取（Read Uncommitted）</button></li><li class="tab"><button type="button" data-href="#1-3">已提交读取（Read Committed）</button></li><li class="tab"><button type="button" data-href="#1-4">可重复读取（Repeatable Read）</button></li><li class="tab"><button type="button" data-href="#1-5">序列化（Serializable）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Spring中一个标识：ISOLATION_DEFAULT</p><p>表示使用后端数据库默认的隔离级别</p><p>大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle</p><p>MySQL的默认隔离级别是Repeatable read</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>Spring标识：ISOLATION_READ_UNCOMMITTED</p><p>允许脏读取，但不允许更新丢失</p><p>如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。</p><p>该隔离级别可以通过“排他写锁”实现。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>Spring标识：ISOLATION_READ_COMMITTED</p><p>允许不可重复读取，但不允许脏读取</p><p>这可以通过“瞬间共享读锁”和“排他写锁”实现</p><p>读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p>Spring标识：ISOLATION_REPEATABLE_READ</p><p>禁止不可重复读取和脏读取，但是有时可能出现幻读数据</p><p>这可以通过“共享读锁”和“排他写锁”实现</p><p>读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p>Spring标识：ISOLATION_SERIALIZABLE</p><p>提供严格的事务隔离</p><p>它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行</p><p>仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大</p><p>对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed</p><p>它能够避免脏读取，而且具有较好的并发性能</p><p>尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制</p></blockquote><blockquote><p><strong>事务传播行为</strong></p></blockquote><table><thead><tr><th align="center">名词</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>REQUIRED</code></td><td align="center"><code>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值)</code></td></tr><tr><td align="center"><code>SUPPORTS</code></td><td align="center"><code>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</code></td></tr><tr><td align="center">MANDATORY</td><td align="center">使用当前的事务，如果当前没有事务，就抛出异常</td></tr><tr><td align="center">REQUERS_NEW</td><td align="center">新建事务，如果当前在事务中，把当前事务挂起</td></tr><tr><td align="center">NOT_SUPPORTED</td><td align="center">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td></tr><tr><td align="center">NEVER</td><td align="center">以非事务方式运行，如果当前存在事务，抛出异常</td></tr><tr><td align="center">NESTED</td><td align="center">如果当前存在事务，则在嵌套事务内执行如果当前没有事务，则执行 REQUIRED 类似的操作</td></tr><tr><td align="center">超时时间</td><td align="center">默认值是-1，没有超时限制。如果有，以秒为单位进行设置</td></tr><tr><td align="center">是否只读</td><td align="center">建议查询时设置为只读</td></tr></tbody></table><h3 id="2-1-3-TransactionStatus-事务具体的运行状态"><a href="#2-1-3-TransactionStatus-事务具体的运行状态" class="headerlink" title="2.1.3 TransactionStatus  事务具体的运行状态"></a>2.1.3 TransactionStatus  事务具体的运行状态</h3><blockquote><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下</p></blockquote><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean hasSavepoint()</td><td align="center">是否存储回滚点</td></tr><tr><td align="center">boolean isCompleted()</td><td align="center">事务是否完成</td></tr><tr><td align="center">boolean isNewTransaction()</td><td align="center">是否是新事务</td></tr><tr><td align="center">boolean isRollbackOnly()</td><td align="center">事务是否回滚</td></tr></tbody></table><h2 id="2-2-基于-XML-的声明式事务控制"><a href="#2-2-基于-XML-的声明式事务控制" class="headerlink" title="2.2 基于 XML 的声明式事务控制"></a>2.2 基于 XML 的声明式事务控制</h2><h3 id="2-2-1-什么是声明式事务控"><a href="#2-2-1-什么是声明式事务控" class="headerlink" title="2.2.1 什么是声明式事务控"></a>2.2.1 什么是声明式事务控</h3><p>Spring 的声明式事务顾名思义就是采用<code>声明的方式来处理事务</code></p><p>这里所说的声明，就是指在配置文件中声明 ，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务</p><blockquote><p>声明式事务处理的作用</p></blockquote><ul><li><p>事务管理不侵入开发的组件</p><p>具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话， 也只需要在定义文件中重新配置即可 </p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译 ，这样维护起来极其方便</p></li></ul><blockquote><p>注意：Spring 声明式事务控制底层就是AOP</p></blockquote><h3 id="2-2-2-声明式事务控制的实现"><a href="#2-2-2-声明式事务控制的实现" class="headerlink" title="2.2.2 声明式事务控制的实现"></a>2.2.2 声明式事务控制的实现</h3><p>声明式事务控制明确事项：</p><ul><li>谁是切点？</li><li>谁是通知？</li><li>配置切面？</li></ul><ol><li><p>引入tx命名空间</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop="http://www.springframework.org/schema/tx"</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置事务增强</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置事务的信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中， &lt; tx:method &gt;代表切点方法的事务参数的配置，例如:</p><blockquote><p>&lt;tx:method name=”transfer” isolation=”REPEATABLE_READ” propagation=”REQUIRED” timeout=”-1” read-only=”false”/&gt;</p></blockquote><ul><li>name：切点方法名称 </li><li>isolation:事务的隔离级别</li><li>propogation：事务的传播行为</li><li>timeout：超时时间</li><li>read-only：是否只读</li></ul></li><li><p>配置事务 AOP 织入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务的aop增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">cn.jyw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="2-3-使用注解配置声明式事务控制"><a href="#2-3-使用注解配置声明式事务控制" class="headerlink" title="2.3 使用注解配置声明式事务控制"></a>2.3 使用注解配置声明式事务控制</h2><h3 id="2-3-1-使用注解配置声明式事务控制"><a href="#2-3-1-使用注解配置声明式事务控制" class="headerlink" title="2.3.1 使用注解配置声明式事务控制"></a>2.3.1 使用注解配置声明式事务控制</h3><ol><li><p>编写 AccoutDao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository("accountDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(String outMan, <span class="type">double</span> money)</span> {</span><br><span class="line">    jdbcTemplate.update(<span class="string">"update account set money=money-? where name=?"</span>,money,outMan);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">(String inMan, <span class="type">double</span> money)</span> {</span><br><span class="line">    jdbcTemplate.update(<span class="string">"update account set money=money+? where name=?"</span>,money,inMan);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写 AccoutService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> {</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写 applicationContext.xml 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--&gt;</span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="2-3-2-注解配置声明式事务控制解析"><a href="#2-3-2-注解配置声明式事务控制解析" class="headerlink" title="2.3.2 注解配置声明式事务控制解析"></a>2.3.2 注解配置声明式事务控制解析</h3><ol><li>使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离 级别、传播行为等</li><li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置</li><li>使用在方法上，不同的方法可以采用不同的事务参数配置</li><li>Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(四) 面向切面编程AOP</title>
      <link href="/javaee/spring/spring-si-mian-xiang-qie-mian-bian-cheng-aop/"/>
      <url>/javaee/spring/spring-si-mian-xiang-qie-mian-bian-cheng-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-的-AOP-简介"><a href="#1-Spring-的-AOP-简介" class="headerlink" title="1. Spring 的 AOP 简介"></a>1. Spring 的 AOP 简介</h1><h2 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h2><p>AOP 为 <em><strong>A</strong></em>spect <em><strong>O</strong></em>riented <em><strong>P</strong></em>rogramming 的缩写，意思为面向切面编程，<strong>是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</strong></p><p> <strong>AOP 是 OOP 的延续</strong>，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍 生范型。</p><blockquote><p><strong>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</strong></p></blockquote><p>在应用 AOP 编程时，仍然需要定义公共功能，但可以明确的定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类， 这样一来横切关注点就被模块化到特殊的对象(切面)里</p><h2 id="1-2-AOP-的作用及其优势"><a href="#1-2-AOP-的作用及其优势" class="headerlink" title="1.2 AOP 的作用及其优势"></a>1.2 AOP 的作用及其优势</h2><blockquote><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强 </p></blockquote><blockquote><p>优势：每个切面位于一个位置，代码不分散， 减少重复代码，提高开发效率，并且便于维护和升级，业务模块更简洁, 只包含核心业务代码</p></blockquote><h2 id="1-3-AOP-的底层实现"><a href="#1-3-AOP-的底层实现" class="headerlink" title="1.3 AOP 的底层实现"></a>1.3 AOP 的底层实现</h2><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。</p><p>在运行期间，Spring通过动态代理技术动态 的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强</p><h2 id="1-4-AOP-的动态代理技术"><a href="#1-4-AOP-的动态代理技术" class="headerlink" title="1.4 AOP 的动态代理技术"></a>1.4 AOP 的动态代理技术</h2><p>常用的动态代理技术 </p><ul><li><blockquote><p>JDK 代理 : 基于接口的动态代理技术 </p></blockquote><p>要求:   </p><ol><li><p>使用反射包下的 Proxy类及InvocationHandler接口</p></li><li><p>目标类必须要实现接口，代理类同样也要使用相同的接口</p></li><li><p>使用场合:struts拦截器，spring的AOP使用的都是jdk代理</p></li></ol></li><li><blockquote><p>cglib 代理：基于父类的动态代理技术</p></blockquote><p>code Generation lib(高性能开源的代码生成包，它采用非常底层的字节码技术，在程序执行期间对指定的目标类生成一个子类，并对子类进行增强)</p><p>它使用的底层框架是ASM（java字节码生成小框架）</p><p>要求：</p><ol><li><p>目标类不用实现任何接口，也可以实现接口</p></li><li><p>目标类不能被final 修饰，因为代理类是目标类的子类</p></li></ol><p>​       使用场合：hibernate中的session.load()得到的就是cglib的代理对象</p><ol start="3"><li>spring中也有使用</li></ol></li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/AOP%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="AOP 的动态代理技术示意图"></p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">JDK 的动态代理</button></li><li class="tab"><button type="button" data-href="#1-2">cglib 的动态代理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>目标类接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>目标类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态代理代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TargetInterface target=<span class="keyword">new</span> <span class="title class_">Target</span>();<span class="comment">//创建目标对象</span></span><br><span class="line">        <span class="comment">//创建代理对象 返回值就是动态生成的代理对象 目标对象和代理对象同级故都用多态来接收</span></span><br><span class="line">        <span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),<span class="comment">//目标对象类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),<span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">                    <span class="comment">//调用代理对象的任何方法,实质执行的哦都是invoke方法</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                            <span class="keyword">throws</span> Throwable {</span><br><span class="line">                        System.out.println(<span class="string">"前置增强代码..."</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);<span class="comment">//执行目标方法</span></span><br><span class="line">                        System.out.println(<span class="string">"后置增强代码..."</span>);</span><br><span class="line">                        <span class="keyword">return</span> invoke;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//调用代理对象的方法测试</span></span><br><span class="line">        proxy.method();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>目标类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态代理代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>(); <span class="comment">//创建增强器</span></span><br><span class="line">enhancer.setSuperclass(Target.class); <span class="comment">//设置父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() { <span class="comment">//设置回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects,</span></span><br><span class="line"><span class="params">                            MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(<span class="string">"前置代码增强...."</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, objects);</span><br><span class="line">        System.out.println(<span class="string">"后置代码增强...."</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="comment">//创建代理对象  基于父的代理对象 用子来接</span></span><br><span class="line"><span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) enhancer.create();</span><br><span class="line">proxy.method();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5AOP-相关概念"><a href="#1-5AOP-相关概念" class="headerlink" title="1.5AOP 相关概念"></a>1.5AOP 相关概念</h2><blockquote><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强</p></blockquote><p> 在正式讲解 AOP 的操作之前，我们必须理解 AOP 的<em><strong>相关术语</strong></em>，常用的术语如下：</p><ul><li>Target（目标对象）：代理的目标对象</li><li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li><li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方 法类型的连接点</li><li><code>Pointcut</code>（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li><li><code>Advice</code>（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li><li><code>Aspect</code>（切面）：是切入点和通知（引介）的结合</li><li><code>Weaving</code>（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而 AspectJ采用编译期织入和类装载期织入</li></ul><h2 id="1-6-AOP-开发明确的事项"><a href="#1-6-AOP-开发明确的事项" class="headerlink" title="1.6 AOP 开发明确的事项"></a>1.6 AOP 开发明确的事项</h2><h3 id="1-6-1-需要编写的内容"><a href="#1-6-1-需要编写的内容" class="headerlink" title="1.6.1 需要编写的内容"></a>1.6.1 需要编写的内容</h3><ul><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类，切面类中有通知(增强功能方法) </li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li></ul><h3 id="1-6-2-AOP-技术实现的内容"><a href="#1-6-2-AOP-技术实现的内容" class="headerlink" title="1.6.2 AOP 技术实现的内容"></a>1.6.2 AOP 技术实现的内容</h3><p>Spring 框架监控切入点方法的执行。</p><p>一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的 代理对象</p><p>根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行</p><h3 id="1-6-3-AOP-底层使用哪种代理方式"><a href="#1-6-3-AOP-底层使用哪种代理方式" class="headerlink" title="1.6.3 AOP 底层使用哪种代理方式"></a>1.6.3 AOP 底层使用哪种代理方式</h3><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式</p><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><blockquote><ul><li><p>aop：面向切面编程 </p></li><li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理 </p></li><li><p>aop的重点概念： Pointcut（切入点）：被增强的方法 </p><p>​                                Advice（通知/ 增强）：封装增强业务逻辑的方法</p><p>​                                Aspect（切面）：切点+通知 </p><p>​                                Weaving（织入）：将切点与通知结合的过程 </p></li><li><p>开发明确事项： </p><p>​                        谁是切点（切点表达式配置） </p><p>​                        谁是通知（切面类中的增强方法）</p><p>​                         将切点和通知进行织入配置</p></li></ul></blockquote><h1 id="2-基于-XML-的-AOP-开发"><a href="#2-基于-XML-的-AOP-开发" class="headerlink" title="2. 基于 XML 的 AOP 开发"></a>2. 基于 XML 的 AOP 开发</h1><h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h2><ol><li>导入 AOP 相关坐标 </li><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>将目标类和切面类的对象创建权交给 spring </li><li>在 applicationContext.xml 中配置织入关系</li><li>测试代码</li></ol><h3 id="2-1-1-导入-AOP-相关坐标"><a href="#2-1-1-导入-AOP-相关坐标" class="headerlink" title="2.1.1 导入 AOP 相关坐标"></a>2.1.1 导入 AOP 相关坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-2-创建目标接口和目标类（内部有切点）"><a href="#2-2-2-创建目标接口和目标类（内部有切点）" class="headerlink" title="2.2.2 创建目标接口和目标类（内部有切点）"></a>2.2.2 创建目标接口和目标类（内部有切点）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-3-将目标类和切面类的对象创建权交给-sprin"><a href="#2-1-3-将目标类和切面类的对象创建权交给-sprin" class="headerlink" title="2.1.3 将目标类和切面类的对象创建权交给 sprin"></a>2.1.3 将目标类和切面类的对象创建权交给 sprin</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.Target"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.MyAspect"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-4-在-applicationContext-xml-中配置织入关系"><a href="#2-1-4-在-applicationContext-xml-中配置织入关系" class="headerlink" title="2.1.4 在 applicationContext.xml 中配置织入关系"></a>2.1.4 在 applicationContext.xml 中配置织入关系</h3><blockquote><p>导入aop命名空间</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           </span></span></span><br><span class="line"><span class="string"><span class="tag">"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置切点表达式和前置增强的织入关系</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入,告诉spring框架 哪些方法需要哪写增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面:切点+通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void cn.jyw.aop.aop.Target.save())"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-5-测试代码"><a href="#2-1-5-测试代码" class="headerlink" title="2.1.5 测试代码"></a>2.1.5 测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">        target.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前置增强</span><br><span class="line">Target runing...</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-XML-配置-AOP-详解"><a href="#2-2-XML-配置-AOP-详解" class="headerlink" title="2.2 XML 配置 AOP 详解"></a>2.2 XML 配置 AOP 详解</h2><h3 id="2-2-1-切点表达式的写法"><a href="#2-2-1-切点表达式的写法" class="headerlink" title="2.2.1 切点表达式的写法"></a>2.2.1 切点表达式的写法</h3><p>表达式语法：</p><blockquote><p><strong>execution([修饰符] 返回值类型 包名.类名.方法名(参数)</strong></p></blockquote><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号* 代表任意</li><li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li><li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li></ul><p>例如:</p><blockquote><p>execution(public <strong>void</strong> cn.jyw.aop.Target.method())  //Target类下的 method 没有返回值没有参数</p><p>execution(<strong>void</strong> cn.jyw.aop.Target.*(..))  //Target类下的 任意方法任意参数(void 没有返回值的)</p><p>execution(* cn.jyw.aop.* .*(..)) // aop包下的任意类任意参数</p><p>execution(* cn.jyw.aop..* .*(..)) //aop包下及其子包下任何</p><p>execution(* * ..* .*(..))// 任意</p></blockquote><h3 id="2-2-2-通知的类型"><a href="#2-2-2-通知的类型" class="headerlink" title="2.2.2 通知的类型"></a>2.2.2 通知的类型</h3><p>通知的配置语法：</p><blockquote><p>&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式”&gt;&lt; /aop:通知类型&gt;</p></blockquote><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt; aop:before&gt;</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>&lt; aop:after-returning&gt;</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>&lt; aop:around&gt;</td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>&lt; aop:throwing&gt;</td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>&lt; aop:after&gt;</td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"后置增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//proceeding JoinPoint 正在执行的连接点===切点</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">    System.out.println(<span class="string">"增强前"</span>);</span><br><span class="line">    <span class="comment">//切点方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">"增前后"</span>);</span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"异常抛出增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"最终增强"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.Target"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.MyAspect"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置织入,告诉spring框架 哪些方法需要哪写增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面:切点+通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前置增强</span><br><span class="line">增强前</span><br><span class="line">//Target runing...</span><br><span class="line">//增强后</span><br><span class="line">//后置增强</span><br><span class="line">最终增强</span><br><span class="line">异常抛出增强</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-3-切点表达式的抽取"><a href="#2-2-3-切点表达式的抽取" class="headerlink" title="2.2.3 切点表达式的抽取"></a>2.2.3 切点表达式的抽取</h3><blockquote><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽 取后的切点表达式</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-4-知识要点"><a href="#2-2-4-知识要点" class="headerlink" title="2.2.4 知识要点"></a>2.2.4 知识要点</h2><blockquote><p>aop织入的配置</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">“切面类”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">“通知方法名称”</span> <span class="attr">pointcut</span>=<span class="string">“切点表达式</span>"&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</p></blockquote><blockquote><p>切点表达式的写法： execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p></blockquote><h1 id="3-基于注解的-AOP-开发"><a href="#3-基于注解的-AOP-开发" class="headerlink" title="3. 基于注解的 AOP 开发"></a>3. 基于注解的 AOP 开发</h1><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h2><p>基于注解的aop开发步骤：</p><h3 id="3-1-1-创建目标接口和目标类（内部有切点）"><a href="#3-1-1-创建目标接口和目标类（内部有切点）" class="headerlink" title="3.1.1 创建目标接口和目标类（内部有切点）"></a>3.1.1 创建目标接口和目标类（内部有切点）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"Target running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-2-创建切面类（内部有增强方法）"><a href="#3-1-2-创建切面类（内部有增强方法）" class="headerlink" title="3.1.2 创建切面类（内部有增强方法）"></a>3.1.2 创建切面类（内部有增强方法）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-3-将目标类和切面类的对象创建权交给-spring"><a href="#3-1-3-将目标类和切面类的对象创建权交给-spring" class="headerlink" title="3.1.3 将目标类和切面类的对象创建权交给 spring"></a>3.1.3 将目标类和切面类的对象创建权交给 spring</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("target")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"Target running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-4-在切面类中使用注解配置织入关系"><a href="#3-1-4-在切面类中使用注解配置织入关系" class="headerlink" title="3.1.4 在切面类中使用注解配置织入关系"></a>3.1.4 在切面类中使用注解配置织入关系</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="meta">@Before("execution(* cn.jyw.aop.*.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-5-在配置文件中开启组件扫描和-AOP-的自动代理"><a href="#3-1-5-在配置文件中开启组件扫描和-AOP-的自动代理" class="headerlink" title="3.1.5 在配置文件中开启组件扫描和 AOP 的自动代理"></a>3.1.5 在配置文件中开启组件扫描和 AOP 的自动代理</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.aop"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-6-测试"><a href="#3-1-6-测试" class="headerlink" title="3.1.6 测试"></a>3.1.6 测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    target.method();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><p>测试结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前置代码增强.....</span><br><span class="line">Target running....</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3-2-注解配置-AOP-详解"><a href="#3-2-注解配置-AOP-详解" class="headerlink" title="3.2 注解配置 AOP 详解"></a>3.2 注解配置 AOP 详解</h2><h3 id="3-2-1-注解通知的类型"><a href="#3-2-1-注解通知的类型" class="headerlink" title="3.2.1 注解通知的类型"></a>3.2.1 注解通知的类型</h3><blockquote><p>通知的配置语法：@通知注解(“切点表达式”)</p></blockquote><table><thead><tr><th>名称</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>@Before</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>@AfterReturning</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>@Around</td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>@AfterThrowing</td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>@After</td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h3 id="3-2-2-切点表达式的抽取"><a href="#3-2-2-切点表达式的抽取" class="headerlink" title="3.2.2 切点表达式的抽取"></a>3.2.2 切点表达式的抽取</h3><blockquote><p>同 xml 配置 aop 一样，我们可以将切点表达式抽取</p><p>抽取方式是在切面内定义方法</p><p>在该方法上使用@Pointcut 注解定义切点表达式</p><p>然后在在增强注解中进行引用。具体如下：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="meta">@Before("MyAspect.myPoint()")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Pointcut("execution(* cn.jyw.aop.*.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPoint</span><span class="params">()</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(三) IoC和DI注解开发</title>
      <link href="/javaee/spring/spring-san-ji-yu-zhu-jie-fang-shi-pei-zhi/"/>
      <url>/javaee/spring/spring-san-ji-yu-zhu-jie-fang-shi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring配置数据源"><a href="#1-Spring配置数据源" class="headerlink" title="1. Spring配置数据源"></a>1. Spring配置数据源</h1><h2 id="1-1-数据源（连接池）的作用"><a href="#1-1-数据源（连接池）的作用" class="headerlink" title="1.1 数据源（连接池）的作用"></a>1.1 数据源（连接池）的作用</h2><ul><li><p>数据源(连接池)是提高程序性能如出现的</p></li><li><p>事先实例化数据源，初始化部分连接资源</p></li><li><p>使用连接资源时从数据源中获取</p></li><li><p>使用完毕后将连接资源归还给数据源</p></li><li><p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p></li></ul><h2 id="1-2-数据源的开发步骤"><a href="#1-2-数据源的开发步骤" class="headerlink" title="1.2 数据源的开发步骤"></a>1.2 数据源的开发步骤</h2><ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据</li><li>使用数据源获取连接资源和归还连接资源</li></ol><h2 id="1-3-数据源的手动创建"><a href="#1-3-数据源的手动创建" class="headerlink" title="1.3 数据源的手动创建"></a>1.3 数据源的手动创建</h2><ol><li>导入<strong>c3p0</strong>和<strong>druid</strong>的坐标以及导入<strong>mysql</strong>数据库驱动坐标</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- C3P0连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>数据源的手动创建</li></ol><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306"</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>但是这种创建连接池高耦合了 用配置文件来解耦</p></blockquote><ol><li>提取jdbc.properties配置文件</li></ol><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>测试手动创建数据源(加载properties配置文件)</li></ol><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruidProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(rb.getString(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">        druidDataSource.setUrl(rb.getString(<span class="string">"jdbc.url"</span>));</span><br><span class="line">        druidDataSource.setUsername(rb.getString(<span class="string">"jdbc.username"</span>));</span><br><span class="line">        druidDataSource.setPassword(rb.getString(<span class="string">"jdbc.password"</span>));</span><br><span class="line">        <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0ByProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">    <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    dataSource.setDriverClass(rb.getString(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">    dataSource.setJdbcUrl(rb.getString(<span class="string">"jdbc.url"</span>));</span><br><span class="line">    dataSource.setUser(rb.getString(<span class="string">"jdbc.username"</span>));</span><br><span class="line">    dataSource.setPassword(rb.getString(<span class="string">"jdbc.password"</span>));</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-4-Spring配置数据源"><a href="#1-4-Spring配置数据源" class="headerlink" title="1.4 Spring配置数据源"></a>1.4 Spring配置数据源</h2><p>可以将DataSource的创建权交由Spring容器去完成 </p><ul><li>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</li><li>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试Spring容器产生数据源对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试Spring容器产生数据源对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) </span><br><span class="line">applicationContext.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-抽取jdbc配置文件"><a href="#1-5-抽取jdbc配置文件" class="headerlink" title="1.5 抽取jdbc配置文件"></a>1.5 抽取jdbc配置文件</h2><blockquote><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p><p>首先，需要引入context命名空间和约束路径：</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"  //命名空间</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context  </span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd //约束路径</span><br></pre></td></tr></tbody></table></figure>  <div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context:property-placeholder location="classpath:jdbc.properties"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context:property-placeholder location="classpath:jdbc.properties"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h1><h2 id="2-1-Spring原始注解"><a href="#2-1-Spring原始注解" class="headerlink" title="2.1 Spring原始注解"></a>2.1 Spring原始注解</h2><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率</p><p>所以注解开发是一种趋势，注解代替xml配置 文件可以简化配置，提高开发效率</p><blockquote><p>Spring原始注解主要是替代的配置           </p></blockquote><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>@Component</code></strong></td><td>使用在类上用于实例化Bean</td></tr><tr><td><strong><code>@Controller</code></strong></td><td>使用在web层类上用于实例化Bean</td></tr><tr><td><strong><code>@Service</code></strong></td><td>使用在service层类上用于实例化Bean</td></tr><tr><td><strong><code>@Repository</code></strong></td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td><strong><code>@Autowired</code></strong></td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td><strong><code>@Qualifier</code></strong></td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td><strong><code>@Resource</code></strong></td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td><strong><code>@Value</code></strong></td><td>注入普通属性</td></tr><tr><td><strong><code>@Scope</code></strong></td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><blockquote><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean 需要进行扫描以便识别使用注解配置的类、字段和方法</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 @Compont 或 @Repository 标识UserDaoImpl需要Spring进行实例化</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&lt;bean id="userDao" class="cn.jyw.dao.impl.UserDaoImpl/&gt;</span></span><br><span class="line"><span class="comment">//@Component("userDao")</span></span><br><span class="line"><span class="meta">@Repository("userDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"save running... ..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化 </p><p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&lt;bean id="Service" class="cn.jyw.service.impl.UserServiceImpl"&gt;</span></span><br><span class="line"><span class="comment">//@Component("userService")</span></span><br><span class="line"><span class="meta">@Service("userService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于&lt;property name="userDao" ref="userDao"/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Autowired  //只写@Autowired也可以注入 按照&lt;数据类型&gt;从Spring容器中进行匹配</span></span><br><span class="line">    <span class="comment">//@Qualifier("userDao") 按照id值从容器中进行匹配但是要结合@Autowired一起使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name="userDao")</span> <span class="comment">//相当于@Autowired+@Qualifier</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用注解方式可以不用写 这是配置文件用反射调用set方法进行注入</span></span><br><span class="line">    <span class="comment">/*public void setUserDao(UserDao userDao){</span></span><br><span class="line"><span class="comment">        this.userDao = userDao;</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    userDao.save(); <span class="comment">//  save running... ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Value进行字符串的注入</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository("userDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="meta">@Value("注入普通数据")</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="meta">@Value("${jdbc.driver}")</span> <span class="comment">//从spring容器中找key为jdbc.driver的值 并注入给下面</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(str); <span class="comment">//注入普通数据</span></span><br><span class="line">        System.out.println(driver); <span class="comment">// com.mysqll.jdbc.Driver</span></span><br><span class="line">        System.out.println(<span class="string">"save running... ..."</span>); <span class="comment">//</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Scope标注Bean的范围</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Scope("prototype")//产生多个对象</span></span><br><span class="line"><span class="meta">@Scope("singleton")</span> <span class="comment">//产生一个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="comment">//此处省略代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p><p>调用有这两个方法的时候就会产生效果</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"初始化方法...."</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"销毁方法....."</span>);</span><br><span class="line">}   </span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-Spring新注解"><a href="#2-2-Spring新注解" class="headerlink" title="2.2 Spring新注解"></a>2.2 Spring新注解</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中的<code>&lt;context:component-scan base-package="cn.jyw"/&gt;</code>一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties 文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><blockquote><p>相当于xml在配置</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//代替&lt;context:component-scan base-package="cn.jyw"/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan("cn.jyw")</span></span><br><span class="line"><span class="comment">//代替&lt;import resource=""&gt;</span></span><br><span class="line"><span class="meta">@Import({DataSourceConfiguration.class})</span> <span class="comment">//多个类是数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCofiguration</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替&lt;context:property-placeholder location="jdbc.properties"/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource("classpath:jdbc.properties")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> {</span><br><span class="line">    <span class="meta">@Value("${jdbc.driver}")</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value("${jdbc.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${jdbc.username}")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value("${jdbc.password}")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("dataSource")</span> <span class="comment">//Spring会将当前方法的返回值以指定名称储存到Spring容器中</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">geDataSource</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");</span></span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringCofiguration.class);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><h1 id="3-Spring集成Junit"><a href="#3-Spring集成Junit" class="headerlink" title="3. Spring集成Junit"></a>3. Spring集成Junit</h1><h2 id="3-1-原始Junit测试Spring的问题"><a href="#3-1-原始Junit测试Spring的问题" class="headerlink" title="3.1 原始Junit测试Spring的问题"></a>3.1 原始Junit测试Spring的问题</h2><blockquote><p>在测试类中，每个测试方法都有以下两行代码：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="type">IAccountService</span> <span class="variable">as</span> <span class="operator">=</span> ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br></pre></td></tr></tbody></table></figure><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉</p><h2 id="3-2-解决思路"><a href="#3-2-解决思路" class="headerlink" title="3.2 解决思路"></a>3.2 解决思路</h2><blockquote><p>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它<br>将需要进行测试Bean直接在测试类中进行注入</p></blockquote><h2 id="3-3-Spring集成Junit步骤"><a href="#3-3-Spring集成Junit步骤" class="headerlink" title="3.3 Spring集成Junit步骤"></a>3.3 Spring集成Junit步骤</h2><ol><li>导入spring集成Junit的坐标</li><li>使用@Runwith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><h2 id="3-4-Spring集成Junit代码实现"><a href="#3-4-Spring集成Junit代码实现" class="headerlink" title="3.4 Spring集成Junit代码实现"></a>3.4 Spring集成Junit代码实现</h2><ol><li>导入spring集成Junit的坐标</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用@Runwith注解替换原来的运行期</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>使用@ContextConfiguration指定配置文件或配置类</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = {"classpath:applicationContext.xml"})</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">}      </span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>使用@Autowired注入需要测试的对象</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>创建测试方法进行测试</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserService</span><span class="params">()</span>{</span><br><span class="line">        userService.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(二) IOC和DI</title>
      <link href="/javaee/spring/spring-er-ioc-he-di/"/>
      <url>/javaee/spring/spring-er-ioc-he-di/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IOC和DI的基本概念"><a href="#1-IOC和DI的基本概念" class="headerlink" title="1. IOC和DI的基本概念"></a>1. IOC和DI的基本概念</h1><h2 id="1-1-IOC-Inversion-of-Control-控制反转-："><a href="#1-1-IOC-Inversion-of-Control-控制反转-：" class="headerlink" title="1.1 IOC(Inversion of Control 控制反转)："></a>1.1 IOC(Inversion of Control 控制反转)：</h2><ol><li><p>其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。</p></li><li><p>而应用了 IOC 之后，则是容器主动地将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源。</p></li><li><p>这种行为也被称为查找的被动形式。这体现的是一种设计思想，而不是具体的实现。</p></li></ol><h2 id="1-2-DI-Dependency-Injection-依赖注入-—-IOC-的另一种表达方式"><a href="#1-2-DI-Dependency-Injection-依赖注入-—-IOC-的另一种表达方式" class="headerlink" title="1.2 DI(Dependency Injection 依赖注入) — IOC 的另一种表达方式"></a>1.2 DI(Dependency Injection 依赖注入) — IOC 的另一种表达方式</h2><ol><li><p>组件以一些预先定义好的方式(例如: setter 方法)接受来自于容器的资源注入。</p></li><li><p>DI是实现了IOC设计思想的具体行为，spring容器就是通过DI来实现了IOC的设计思想。</p></li><li><p>依赖注入的目的并不是给应用程序带来更多的功能,而是为了提升组件的重用频率,并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制,我们只要通过简单的配置就可指定目标需要的资源,完成自身的业务逻辑,而不需要关心具体的资源来自何处,由谁实现。</p></li></ol><h1 id="2-Spring配置文件"><a href="#2-Spring配置文件" class="headerlink" title="2. Spring配置文件"></a>2. Spring配置文件</h1><h2 id="2-1-Bean标签基本配置"><a href="#2-1-Bean标签基本配置" class="headerlink" title="2.1 Bean标签基本配置"></a>2.1 Bean标签基本配置</h2><p>用于配置<strong>对象交由Spring 来创建</strong>。</p><p>默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p><p>基本属性： id：Bean实例在Spring容器中的唯一标识   class：Bean的全限定名称</p><h2 id="2-2-Bean标签范围配置"><a href="#2-2-Bean标签范围配置" class="headerlink" title="2.2 Bean标签范围配置"></a>2.2 Bean标签范围配置</h2><p>scope：指对象的作用范围，取值如下：</p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认的,单列的</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 request 域中</td></tr><tr><td>session</td><td>WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 session 域中</td></tr><tr><td>global session</td><td>WEB 项目中，应用在 Portlet 环境，如果没有 Portlet 环境那么globalSession 相当 于 session</td></tr></tbody></table><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">singleton</button></li><li class="tab"><button type="button" data-href="#1-2">prototype</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Bean的实例化个数：1个 </p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>Bean的生命周期：</p><ul><li><p>对象创建：当应用加载，创建容器时，对象就被创建了</p></li><li><p>对象运行：只要容器在，对象一直活着</p></li><li><p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p></li></ul><p>示例</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">    System.out.println(userDao2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImp@4abdb505</span><br><span class="line">cn.jyw.impl.UserDaoImp@4abdb505</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>Bean的生命周期：</p><ul><li><p>对象创建：当使用对象时，创建新的对象实例</p></li><li><p>对象运行：只要对象在使用中，就一直活着</p></li><li><p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p></li></ul><p>示例</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">    System.out.println(userDao2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@587d1d39</span><br><span class="line">cn.jyw.impl.UserDaoImpl@58c1670b</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-Bean生命周期配置"><a href="#2-3-Bean生命周期配置" class="headerlink" title="2.3 Bean生命周期配置"></a>2.3 Bean生命周期配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p><em><strong>init-method</strong></em>：指定类中的初始化方法名称</p><p>创建对象后 执行init方法</p></li><li><p><em><strong>destroy-method</strong></em>：指定类中销毁方法名称</p><p>销毁之前执行 destroy方法</p></li></ul><p>ClassPathXmlApplicationContext.close 销毁执行</p><h2 id="2-4-Bean实例化三种方式"><a href="#2-4-Bean实例化三种方式" class="headerlink" title="2.4 Bean实例化三种方式"></a>2.4 Bean实例化三种方式</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">使用无参构造方法实例化</button></li><li class="tab"><button type="button" data-href="#1-2">工厂静态方法实例化</button></li><li class="tab"><button type="button" data-href="#1-3">工厂实例方法实例化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>工厂的静态方法返回Bean实例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> {</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>{</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImp</span>();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@13c27452</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>由于工厂是不是静态方法 无法在创建时就使用方法 所以在使用工厂方法前需要先创建工厂</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.factory.StaticFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@13c27452</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-Bean的依赖注入-DI-入门"><a href="#3-Bean的依赖注入-DI-入门" class="headerlink" title="3. Bean的依赖注入(DI)入门"></a>3. Bean的依赖注入(DI)入门</h1><ol><li>创建UserService，UserService 内部在调用 UserDao的save() 方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao)applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将 UserServiceImpl 的创建权交给 Spring</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>从 Spring 容器中获得 UserService 进行操作</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.save();</span><br></pre></td></tr></tbody></table></figure><h2 id="3-1-Bean的依赖注入分析"><a href="#3-1-Bean的依赖注入分析" class="headerlink" title="3.1 Bean的依赖注入分析"></a>3.1 Bean的依赖注入分析</h2><p>​    目前UserService实例和UserDao实例都存在与Spring容器中，当前的做法是在容器外部获得UserService 实例和UserDao实例，然后在程序中进行结合。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90.png" alt="Bean的依赖注入分析"></p><p>​    因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在 Spring容器中，将UserDao设置到UserService内部。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86.png" alt="Bean的依赖注入原理"></p><h2 id="3-2-Bean的依赖注入概念"><a href="#3-2-Bean的依赖注入概念" class="headerlink" title="3.2 Bean的依赖注入概念"></a>3.2 Bean的依赖注入概念</h2><p>依赖注入（<em><strong>Dependency Injection</strong></em>）：它是 Spring 框架核心 IOC 的具体实现。 </p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p><p> IOC 解耦只是降低他们的依赖关系，但不会消除。</p><p>例如：<strong>业务层</strong>仍会<strong>调用持久层</strong>的方法。 </p><p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。 </p><p><strong>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</strong></p><h2 id="3-3-Bean的依赖注入方式"><a href="#3-3-Bean的依赖注入方式" class="headerlink" title="3.3 Bean的依赖注入方式"></a>3.3 Bean的依赖注入方式</h2><ul><li>构造方法</li><li>set方法</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">属性注入(set方法注入)</button></li><li class="tab"><button type="button" data-href="#1-2">构造方法注入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>属性注入是最常用的注入方式，通过 setter方法注入Bean 的属性值或依赖的对象。属性注入使用 <code>&lt;property&gt; </code>元素, 使用 name 属性指定 Bean 的属性名称，value 属性或<code>&lt;value&gt;</code>子节点指定属性值</p><p>在UserServiceImpl中添加setUserDao方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> {</span><br><span class="line"><span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Spring容器调用set方法进行注入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下： 首先，需要引入P命名空间：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span> <span class="attr">p:userDao-ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>通过构造方法注入Bean 的属性值或依赖的对象，它保证了 Bean 实例在实例化后就可以使用。构造器注入在 <code>&lt;constructor-arg&gt;</code> 元素里声明属性, <code>&lt;constructor-arg&gt; </code>中没有 name 属性，可以按索引匹配入参，也可以按类型匹配入参</p><p>创建有参构造</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    pub1ic <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> {</span><br><span class="line">        <span class="built_in">this</span>. userDao = userDao;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Spring容器调用有参构造时进行注入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-4-Bean的依赖注入的数据类型"><a href="#3-4-Bean的依赖注入的数据类型" class="headerlink" title="3.4 Bean的依赖注入的数据类型"></a>3.4 Bean的依赖注入的数据类型</h2><div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2-1">普通数据类型注入</button></li><li class="tab"><button type="button" data-href="#2-2">集合数据类型（List）的注入</button></li><li class="tab"><button type="button" data-href="#2-3">集合数据类型（ Map ）的注入</button></li><li class="tab"><button type="button" data-href="#2-4">集合数据类型（Properties）的注入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2-1"><p>可用字符串表示的值，可以通过 <value> 元素标签或 value 属性进行注入</value></p><p>基本数据类型及其封装类、String 等类型都可以采取字面值注入的方式</p><p>若字面值中包含特殊字符（会使用到xml文件中的一些专用字符），可以使用 <code>&lt;![CDATA[]]&gt; </code>把字面值包裹起来</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> {</span><br><span class="line"><span class="built_in">this</span>.company = company;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">System.out.println(company+<span class="string">"==="</span>+age);</span><br><span class="line">System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">value</span>=<span class="string">"哈哈哈哈"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-2"><p>配置 java.util.List 类型的属性, 需要指定 <code>&lt;list&gt;</code> 标签, 在标签里包含一些元素.</p><p>这些标签可以通过 <code>&lt;value&gt; </code>指定简单的常量值, 通过 <code>&lt;ref&gt; </code>指定对其他 Bean 的引用</p><p>通过<code>&lt;bean&gt;</code> 指定内置 Bean 定义. 通过 <code>&lt;null/&gt;</code> 指定空元素. 甚至可以内嵌其他集合。</p><p>数组的定义和 List 一样, 都使用 <code>&lt;list&gt;</code></p><p>配置 java.util.Set 需要使用<code> &lt;set&gt;</code> 标签, 定义元素的方法与 List 一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> {</span><br><span class="line">    <span class="built_in">this</span>.strList = strList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(strList);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"strList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>集合数据类型对象（List）的注入</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> {</span><br><span class="line">    <span class="built_in">this</span>.userList = userList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u1"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u2"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"u1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"u2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-3"><p>Java.util.Map 通过 <code>&lt;map&gt; </code>标签定义, <code>&lt;map&gt;</code> 标签里可以使用多个 <code>&lt;entry&gt;</code> 作为子标签. 每个条目包含一个键和一个值.。</p><p>   必须在 <code>&lt;key&gt;</code> 标签里定义键。</p><p> 因为键和值的类型没有限制, 所以可以自由地为它们指定<code> &lt;value&gt;</code>, <code>&lt;ref&gt;</code>, <code>&lt;bean&gt;</code> 或 <code>&lt;null&gt; </code>元素.。</p><p>   可以将 Map 的键和值作为 <code>&lt;entry&gt; </code>的属性定义: 简单常量使用 key 和 value 来定义; Bean 引用通过 key-ref 和 value-ref 属性定义。</p><p>   使用 <code>&lt;props&gt;</code> 定义 java.util.Properties, 该标签使用多个 <prop> 作为子标签。 每个 <prop> 标签必须定义 key 属性</prop></prop></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> {</span><br><span class="line">    <span class="built_in">this</span>.userMap = userMap;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u1"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u2"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user1"</span> <span class="attr">value-ref</span>=<span class="string">"u1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user2"</span> <span class="attr">value-ref</span>=<span class="string">"u2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-4"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> {</span><br><span class="line">    <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(properties);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p1"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p2"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p3"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-5-Bean的自动装配"><a href="#3-5-Bean的自动装配" class="headerlink" title="3.5 Bean的自动装配"></a>3.5 Bean的自动装配</h2><p>Spring IOC 容器可以自动装配 Bean。需要做的仅仅是在 <code>&lt;bean&gt;</code>的 autowire 属性里指定自动装配的模式</p><ol><li>byType(根据类型自动装配): 若 IOC 容器中有多个与目标 Bean 类型一致的 Bean. 在这种情况下, Spring 将无法判定哪个 Bean 最合适该属性, 所以不能执行自动装配</li><li>byName(根据名称自动装配): 必须将目标 Bean 的名称和属性名设置的完全相同。</li><li>constructor(通过构造器自动装配): 当 Bean 中存在多个构造器时, 此种自动装配方式将会很复杂. 不推荐使用</li><li>在 Bean 配置文件里设置 autowire 属性进行自动装配将会装配 Bean 的所有属性. 然而, 若只希望装配个别属性时, autowire 属性就不够灵活了</li><li>autowire 属性要么根据类型自动装配, 要么根据名称自动装配, 不能两者兼而有之</li><li>一般情况下，在实际的项目中很少使用自动装配功能，因为和自动装配功能所带来的好处比起来，明确清晰的配置文档更有说服力一些</li></ol><h2 id="3-6-Bean-的作用域"><a href="#3-6-Bean-的作用域" class="headerlink" title="3.6 Bean 的作用域"></a>3.6 Bean 的作用域</h2><ol><li><p>在 Spring 中, 可以在 <code>&lt;bean&gt;</code> 元素的 <code>scope</code> 属性里设置 Bean 的作用域。</p></li><li><p>默认情况下, Spring 只为每个在 IOC 容器里声明的 Bean 创建唯一一个实例</p><p>整个 IOC 容器范围内都能共享该实例，所有后续的 getBean() 调用和 Bean 引用都将返回这个唯一的 Bean 实例</p><p>该作用域被称为 singleton, 它是所有 Bean 的默认作用域。</p></li></ol><h2 id="3-7-使用外部属性文件"><a href="#3-7-使用外部属性文件" class="headerlink" title="3.7 使用外部属性文件"></a>3.7 使用外部属性文件</h2><ol><li><p>在配置文件里配置 Bean 时, 有时需要在 Bean 的配置里混入系统部署的细节信息(例如: 文件路径, 数据源配置信息等)。 而这些部署细节实际上需要和 Bean 配置相分离。</p></li><li><p>可通过 &lt; context:property-placeholder&gt; 元素来加载属性文件（.properties）中的属性值</p></li><li><p>Spring 允许在value属性中使用 ${propName}，以实现属性之间的相互引用</p></li></ol><p>​    &lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt;</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:</span> <span class="attr">property-placeholder</span> <span class="attr">location</span>= <span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">"dataSource"</span> <span class="attr">class</span>= <span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用外部化属性文件的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${user}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${driverclass}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbcurl}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-8-引入其他配置文件（分模块开发）"><a href="#3-8-引入其他配置文件（分模块开发）" class="headerlink" title="3.8 引入其他配置文件（分模块开发）"></a>3.8 引入其他配置文件（分模块开发）</h2><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-xxx.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-9-Bean-的生命周期"><a href="#3-9-Bean-的生命周期" class="headerlink" title="3.9 Bean 的生命周期"></a>3.9 Bean 的生命周期</h2><blockquote><p>Spring IOC容器可以管理Bean的生命周期, Spring 允许在 Bean 生命周期的特定点执行定制的任务。</p></blockquote><blockquote><p>Spring IOC 容器对 Bean 的生命周期进行管理的过程:</p></blockquote><ol><li>通过构造器或工厂方法创建 Bean 实例</li><li>为 Bean 的属性设置值和对其他 Bean 的引用</li><li>调用 Bean 的初始化方法</li><li>Bean 可以使用了</li><li>当容器关闭时, 调用 Bean 的销毁方法</li><li>在Bean的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法</li></ol><blockquote><p>Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：</p></blockquote><ol><li>Bean自身的方法：<br>这个包括了Bean本身调用的方法和通过配置文件中<code>&lt;bean&gt;</code>的init-method和destroy-method指定的方法。</li><li>Bean级生命周期接口方法：　　<br>这个包括了<strong>BeanNameAware</strong>、<strong>BeanFactoryAware</strong>、<strong>InitializingBean</strong>和<strong>DiposableBean</strong>这些接口的方法。</li><li>容器级生命周期接口方法：<br>这个包括了<strong>InstantiationAwareBeanPostProcessor</strong> 和 <strong>BeanPostProcessor</strong> 这两个接口实现，一般称它们的实现类为“后处理器”。</li><li>工厂后处理器接口方法：<br>这个包括了<strong>AspectJWeavingEnabler</strong>, <strong>ConfigurationClassPostProcessor</strong>, <strong>CustomAutowireConfigurer</strong>等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用</li></ol><blockquote><p>创建 Bean 后置处理器</p></blockquote><ol><li><p>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理</p></li><li><p>Bean 后置处理器对 IOC 容器里的所有 Bean 实例逐一处理, 而非单一实例.</p><p>其典型应用是: 检查 Bean 属性的正确性或根据特定的标准更改 Bean 的属性。</p></li><li><p>对Bean 后置处理器而言, 需要实现接口（BeanPostProcessor）</p><p>在初始化方法被调用前后, Spring 将把每个 Bean 实例分别传递给上述接口的以下两个方法:</p><p>Object <em><strong>postProcessAfterInitialization</strong></em> (Object bean,String bname)</p><p>Object <em><strong>postProcessBeforeInitialization</strong></em> (Object bean,String bname)</p></li></ol><blockquote><p>添加 Bean 后置处理器后 Bean 的生命周期<br>Spring IOC 容器对 Bean 的生命周期进行管理的过程:</p></blockquote><ol><li><p>通过构造器或工厂方法创建 Bean 实例;</p></li><li><p>为 Bean 的属性设置值和对其他 Bean 的引用;</p></li><li><p>将Bean例传递给Bean后置处理器的 <em><strong>postProcessBeforeInitialization</strong></em> 方法;</p></li><li><p>调用 Bean 的初始化方法;</p></li><li><p>将Bean实例传递给Bean后置处理器的<em><strong>postProcessAfterInitialization</strong></em>方法;</p></li><li><p>Bean 可以使用了</p></li><li><p>当容器关闭时, 调用 Bean 的销毁方法</p></li></ol><p> 后置处理器主要应用在spring容器的底层，spring容器的原生AOP要使用它实现对Bean的切面编程</p><h2 id="Spring的重点配置"><a href="#Spring的重点配置" class="headerlink" title="Spring的重点配置"></a>Spring的重点配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span>标签</span><br><span class="line">    id属性:在容器中Bean实例的唯一标识，不允许重复</span><br><span class="line">    class属性:要实例化的Bean的全限定名</span><br><span class="line">    scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>标签：属性注入</span><br><span class="line">        name属性：属性名称</span><br><span class="line">        value属性：注入的普通属性值</span><br><span class="line">        ref属性：注入的对象引用值</span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span>&gt;</span>标签:导入其他的Spring的分文件</span><br></pre></td></tr></tbody></table></figure><h1 id="4-Spring相关API"><a href="#4-Spring相关API" class="headerlink" title="4. Spring相关API"></a>4. Spring相关API</h1><h2 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/ClassPathXmlApplicationContext.png" alt="ClassPathXmlApplicationContext"></p><p>Spring 提供了两种类型的 IOC 容器实现：</p><ul><li><p><strong>BeanFactory: IOC</strong> 容器的基本实现，是 Spring 框架的基础设施，面向 Spring 本身</p></li><li><p><strong>ApplicationContext</strong>:供了更多的高级特性. 是 BeanFactory 的子接口，面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory，无论使用何种方式, 配置文件是相同的</p></li></ul><h2 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h2><p><em><strong>applicationContext</strong></em>：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p><ol><li><p><em><strong>ClassPathXmlApplicationContext</strong></em></p><p>它是从类的根路径下加载配置文件 推荐使用这种</p></li><li><p><em><strong>FileSystemXmlApplicationContext</strong></em></p><p>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p></li><li><p><em><strong>AnnotationConfigApplicationContext</strong></em></p><p>当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p></li><li><p><em><strong>ConfigurableApplicationContext</strong></em></p><p>扩展于 ApplicationContext，新增加两个主要方法：refresh() 和 close()， 让 ApplicationContext 具有启动、刷新和关闭上下文的能力</p></li><li><p><em><strong>WebApplicationContext</strong></em></p><p>是专门为**<code>WEB</code>**应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作</p></li></ol><h2 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h2><p>getBean()的源码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。 当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时， 则此方法会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService1</span> <span class="operator">=</span> (UserService) </span><br><span class="line">applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService2</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-Spring的重点API"><a href="#4-4-Spring的重点API" class="headerlink" title="4.4 Spring的重点API"></a>4.4 Spring的重点API</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClasspathXmlApplicationContext</span>(<span class="string">"xml文件"</span>)</span><br><span class="line">app.getBean(<span class="string">"id"</span>)</span><br><span class="line">app.getBean(Class)</span><br></pre></td></tr></tbody></table></figure><p>当容器中某一类型的对象有多个 用不同的id获取</p><p>有一个可以用.class获取</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(一) Spring的入门概念</title>
      <link href="/javaee/spring/spring-yi-spring-de-ru-men-gai-nian/"/>
      <url>/javaee/spring/spring-yi-spring-de-ru-men-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1. Spring简介"></a>1. Spring简介</h1><h2 id="1-1-Spring是什么"><a href="#1-1-Spring是什么" class="headerlink" title="1.1 Spring是什么"></a>1.1 Spring是什么</h2><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 <em><strong>IOC</strong></em>（Inverse Of Control：<strong>反转控制</strong>）和 <em><strong>AOP</strong></em>（Aspect Oriented Programming：<strong>面向切面编程</strong>）为内核。</p><p> 提供了<strong>展现层 SpringMVC</strong> 和<strong>持久层 Spring JDBCTemplate</strong> 以及<strong>业务层事务管理</strong>等众多的企业级应用技术 ，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p><h2 id="1-2-Spring的优势"><a href="#1-2-Spring的优势" class="headerlink" title="1.2 Spring的优势"></a>1.2 Spring的优势</h2><ol><li>方便解耦，简化开发</li></ol><blockquote><p>通过 Spring 提供的 <strong><strong><strong>IoC</strong></strong></strong>容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度耦合。 用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p></blockquote><ol start="2"><li><em><strong>AOP</strong></em> 编程的支持</li></ol><blockquote><p>通过 Spring的 <em><strong>AOP</strong></em> 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 <em><strong>AOP</strong></em> 轻松实现。</p></blockquote><ol start="3"><li>声明式事务的支持</li></ol><blockquote><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p></blockquote><ol start="4"><li>方便程序的测试</li></ol><blockquote><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p></blockquote><ol start="5"><li>方便集成各种优秀框架</li></ol><blockquote><p>Spring对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的支持。</p></blockquote><ol start="6"><li>降低 JavaEE API 的使用难度</li></ol><blockquote><p>Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p></blockquote><ol start="7"><li>Java 源码是经典学习范例</li></ol><blockquote><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深 造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p></blockquote><h2 id="1-3-Spring的相关描述"><a href="#1-3-Spring的相关描述" class="headerlink" title="1.3 Spring的相关描述"></a>1.3 Spring的相关描述</h2><ol><li><p>轻量级</p><p>Spring 是非侵入性的 - 基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API。</p></li><li><p>依赖注入(DI — dependency injection、IOC)</p></li><li><p>面向切面编程(AOP — aspect oriented programming)</p></li><li><p>容器</p><p>Spring 是一个容器, 因为它包含并且管理应用对象的生命周期。</p></li><li><p>框架</p><p>Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。</p></li><li><p>一站式</p><p>在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库 （实际上 Spring </p><p>自身也提供了展现层的 SpringMVC 和 持久层的 Spring JDBC）。</p></li></ol><h2 id="1-4-Spring的体系结构"><a href="#1-4-Spring的体系结构" class="headerlink" title="1.4 Spring的体系结构"></a>1.4 Spring的体系结构</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Spring的体系结构"></p><h1 id="2-Spring快速入门"><a href="#2-Spring快速入门" class="headerlink" title="2. Spring快速入门"></a>2. Spring快速入门</h1><h2 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.png" alt="Spring程序开发步骤"></p><ol><li>导入 Spring 开发的基本包坐标</li><li>编写 Dao 接口和实现类</li><li>创建 Spring 核心配置文件</li><li>创建 Spring 核心配置文件 </li><li>使用 Spring 的 API 获得 Bean 实例</li></ol><h2 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">接口</button></li><li class="tab"><button type="button" data-href="#1-2">实现类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h2><div class="note info flat"><p>在类路径下（resources）创建applicationContext.xml配置文件</p></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    userDao.save();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Spring的开发步骤"><a href="#Spring的开发步骤" class="headerlink" title="Spring的开发步骤"></a>Spring的开发步骤</h2><ol><li>导入坐标</li><li>创建Bean</li><li>创建applicationContext.xml</li><li>在配置文件中进行配置</li><li>创建ApplicationContext对象getBean</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog美化记录</title>
      <link href="/blog/blog-mei-hua/bolg-mei-hua-ji-lu/"/>
      <url>/blog/blog-mei-hua/bolg-mei-hua-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">添加emoji表情支持（可选的）</button></li><li class="tab"><button type="button" data-href="#test-2">代码高亮</button></li><li class="tab"><button type="button" data-href="#test-3">搜索</button></li><li class="tab"><button type="button" data-href="#test-4">中文链接转拼音（可选的）</button></li><li class="tab"><button type="button" data-href="#test-5">文章字数统计插件 （可选的）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><h3 id="1-添加emoji表情支持（可选的）"><a href="#1-添加emoji表情支持（可选的）" class="headerlink" title="1. 添加emoji表情支持（可选的）"></a>1. 添加emoji表情支持（可选的）</h3><p><strong>本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）转变成会跳跃的emoji表情</strong> <strong>安装命令如下：</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><h3 id="2-代码高亮"><a href="#2-代码高亮" class="headerlink" title="2. 代码高亮"></a>2. 代码高亮</h3><p><strong>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮</strong> <strong>安装命令如下:</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></tbody></table></figure><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'tomorrow'</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></tbody></table></figure><p>当你添加代码块时一定要加上语言的名字不然此功能会无效！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><h3 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3. 搜索"></a>3. 搜索</h3><p><strong>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><h3 id="4-中文链接转拼音（可选的）"><a href="#4-中文链接转拼音（可选的）" class="headerlink" title="4. 中文链接转拼音（可选的）"></a>4. 中文链接转拼音（可选的）</h3><p><strong>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin Hexo</a> 插件使在生成文章时生成中文拼音的永久链接</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: '-' # default: '-'</span><br></pre></td></tr></tbody></table></figure><p>注：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><p><strong>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></tbody></table></figure><p>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordCount:</span><br><span class="line">  enable: false # 将这个值设置为 true 即可.</span><br><span class="line">  postWordCount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalCount: true</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="btn-center"><a class="btn-beautify outline blue larger" href="/blog-mei-hua-yi/" title="详情步骤"><span>详情步骤</span></a></div><h1 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">hexo-githubcalendar 插件</button></li><li class="tab"><button type="button" data-href="#test-2">透明特效</button></li><li class="tab"><button type="button" data-href="#test-3">字体样式修改</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><h3 id="1-hexo-githubcalendar-插件"><a href="#1-hexo-githubcalendar-插件" class="headerlink" title="1. hexo-githubcalendar 插件"></a>1. hexo-githubcalendar 插件</h3><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/hexo-githubcalendar%E6%8F%92%E4%BB%B6%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA.png" alt="hexo-githubcalendar 插件 效果演示"></p><blockquote><p>NPM 插件安装的部署方法</p></blockquote><blockquote><p>执行 npm 安装操作</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-githubcalendar</span> <span class="literal">--save</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cnpm i hexo<span class="literal">-githubcalendar</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure><div class="note info flat"><p>注意，一定要加 <code>--save</code>，不然本地预览的时候可能不会显示！！！</p></div><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ice Kano Plus_in</span></span><br><span class="line"><span class="comment"># hexo-githubcalendar 插件 1.0</span></span><br><span class="line"><span class="comment"># Author: Ice Kano</span></span><br><span class="line"><span class="comment"># Modify: Lete乐特 https://zfe.space/post/hexo-githubcalendar.html</span></span><br><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启插件</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">WindAndStill</span> <span class="comment"># 你的 github 或者 gitee 用户名</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">'&lt;div class="recent-post-item" style="width:100%;height:auto;padding:10px;"&gt;&lt;div id="github_loading" style="width:10%;height:100%;margin:0 auto;display: block"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable-background:new 0 0 50 50" xml:space="preserve"&gt;&lt;path fill="#d0d0d0" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z" transform="rotate(275.098 25 25)"&gt;&lt;animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id="github_container"&gt;&lt;/div&gt;&lt;/div&gt;'</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"['#ebedf0', '#cdeefd', '#9bcffc', '#6ab6fa', '#389df8', '#0889f5', '#0672c4', '#055492', '#033354', '#022d48', '#021f30']"</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure><p>更多主题配置请前往：<a href="https://github.com/Zfour/hexo-github-calendar/issues">https://github.com/Zfour/hexo-github-calendar/issues</a><br>也欢迎共享自己的配置和进行修改。</p><p>接下来来简单说明一下配置项的含义：</p><blockquote><p>enable</p></blockquote><p><strong>参数：</strong>true/false<br><strong>含义：</strong>是否开启插件</p><blockquote><p>enable_page</p></blockquote><p><strong>参数：</strong>/<br><strong>含义：</strong>路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</p><blockquote><p>user</p></blockquote><p><strong>参数：</strong>zfour<br><strong>含义：</strong>你的 github 或者 gitee 用户名</p><blockquote><p>layout</p></blockquote><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 gihubcalendar 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><blockquote><p>githubcalendar_html</p></blockquote><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含 loading，和挂载容器</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是墙"</span> <span class="attr">id</span>=<span class="string">"recent-posts"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是画框"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是纸"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里通过js挂载githubcalendar，也就是画画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>githubcalendar_html</p></blockquote><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含 loading，和挂载容器</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recent-post-item"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:auto;padding:10px;"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个是画框，顾名思义就是借用文章样式给加个框--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是loading的样式，可自行调整--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"github_loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"width:10%;height:100%;margin:0 auto;display: block"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">viewBox</span>=<span class="string">"0 0 50 50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"enable-background:new 0 0 50 50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xml:space</span>=<span class="string">"preserve"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">"#d0d0d0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">d</span>=<span class="string">"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">transform</span>=<span class="string">"rotate(275.098 25 25)"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateTransform</span></span></span><br><span class="line"><span class="tag">          <span class="attr">attributeType</span>=<span class="string">"xml"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">attributeName</span>=<span class="string">"transform"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"rotate"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">from</span>=<span class="string">"0 25 25"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">to</span>=<span class="string">"360 25 25"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">dur</span>=<span class="string">"0.6s"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是github_containner容器，也就是纸--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"github_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>pc_minheight</p></blockquote><p><strong>参数：</strong>280px<br><strong>含义：</strong>电脑端插件的最小高度，减少加载带来的视觉偏移</p><blockquote><p>mobile_minheight</p></blockquote><p><strong>参数：</strong>0px<br><strong>含义：</strong>手机端插件的最小高度，减少加载带来的视觉偏移</p><blockquote><p>color</p></blockquote><p><strong>参数：</strong>“[‘#ebedf0’, ‘#fdcdec’, ‘#fc9bd9’, ‘#fa6ac5’, ‘#f838b2’, ‘#f5089f’, ‘#c4067e’, ‘#92055e’, ‘#540336’, ‘#48022f’, ‘#30021f’]”<br><strong>含义：</strong>calendar 的主题色</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下色调选择喜欢的一行保留即可。其余注释。—————akilar的糖果色</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">"['#e4dfd7', '#f9f4dc', '#f7e8aa', '#f7e8aa', '#f8df72', '#fcd217', '#fcc515', '#f28e16', '#fb8b05', '#d85916', '#f43e06']"</span> <span class="comment">#橘黄色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f']" #浅紫色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#f0fff4', '#dcffe4', '#bef5cb', '#85e89d', '#34d058', '#28a745', '#22863a', '#176f2c', '#165c26', '#144620']" #翠绿色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#f1f8ff', '#dbedff', '#c8e1ff', '#79b8ff', '#2188ff', '#0366d6', '#005cc5', '#044289', '#032f62', '#05264c']" #天青色调</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>api</p></blockquote><p><strong>参数：</strong><a href="https://python-github-calendar-api.vercel.app/api">https://python-github-calendar-api.vercel.app/api</a><br>或 <a href="https://python-gitee-calendar-api.vercel.app/api">https://python-gitee-calendar-api.vercel.app/api</a><br><strong>含义：</strong>这里提供的是公用的 api，仅供日常使用，请不要滥用。如果想搭建自用 api，具体的部署方案可看考 <a href="https://github.com/Zfour/python_github_calendar_api">python_github_calendar_api</a> 及 <a href="https://github.com/Zfour/python_gitee_calendar_api">python_gitee_calendar_api</a> 的文档说明，这里不多加赘述。</p><blockquote><p>calendar_js</p></blockquote><p><strong>参数：</strong><a href="https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</a><br><strong>含义：</strong>jsd 加速的 js，将 github calendar 挂载入容器中<br><strong>目前已知 bug：</strong>在 1.21 适配 retina 屏幕后虽解决了模糊问题，但部分用户的 tooltip 会出现数据错误。降级到 @1.16 使用即可解决。</p><p>plus_style</p><p><strong>参数：</strong>“”<br><strong>含义：</strong>提供可自定义的 style</p><p>如果你是 butterfly 主题，你需要修改用户名即可，如果你想在友链或者个人介绍挂载，你可以在 md 中增加墙 —— 也就是具有某一的 id 的 div。因为是在 md 中所以通过去掉 class 隐藏画框的样式，即可。同时需要调整 <code>enable_page</code> 来限定展示的页面。</p><p>如果你是其他主题用户，你可以尝试使用墙 &gt; 画框 &gt; 画的方式挂载，也可以通过修改主题模板来挂载。如<br><a href="https://imciraos.com/posts/353f0aee/">给萌典主题加上 git-calendar</a> 的方法。</p><blockquote><p>hexo 三连</p></blockquote><p>执行 hexo 三连</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://www.wwru.cn/archives/125" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><h3 id="2-透明特效"><a href="#2-透明特效" class="headerlink" title="2. 透明特效"></a>2. 透明特效</h3><p><strong><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E8%83%8C%E6%99%AF%E4%B8%BB%E9%A2%98.png" alt="背景主题"></strong></p><blockquote><p>首页部分</p></blockquote><p>把横幅图片<code>top_img</code>与背景图<code>background</code>设置成一样的</p><blockquote><p>页脚部分</p></blockquote><p>在<code>footer.styl</code>（位置直接搜索）里的<code>#footer</code>里</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br></pre></td></tr></tbody></table></figure><p>首先在主题配置文件里全部把这些页面的图片值改为<code>false</code></p><blockquote><p>其他页面头部</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><p>然后在<code>head.styl</code>里把<em><strong>background-color: $light-blue</strong></em>注释</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background-color: $light-blue</span></span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://sady0.com/archives/d6cfcb1a.html" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><h3 id="3-字体样式修改"><a href="#3-字体样式修改" class="headerlink" title="3. 字体样式修改"></a>3. 字体样式修改</h3><ol><li><p>首先需要下载心仪的字体。得到相应的字体文件。为了方便起见，我将其重命名为 <code>Candy.ttf</code>。</p></li><li><p>将下载好的字体包放到本地文件夹下，这里推荐新建一个 <code>fonts</code> 文件夹。例如我是放在 <code>[Blogroot]\themes\butterfly\source\fonts\</code> 目录下。</p></li><li><p>在自定义样式 <code>custom.css</code> 中引入字体包：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>{</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">'Candyhome'</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">'/fonts/Candy.ttf'</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">    <span class="attribute">font-display</span> : swap;</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Candyhome'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p></li></ol><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://akilar.top/posts/ebf20e02/" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><p>1</p><p><strong>更改整体字体</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="第三次优化"><a href="#第三次优化" class="headerlink" title="第三次优化"></a>第三次优化</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">引入全局吸底Aplayer</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Aplayer%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="Aplayer音乐播放器效果展示"></p><ol><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令安装 <a href="https://www.npmjs.com/package/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-tag-aplayer</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在站点配置文件 <code>[Blogroot]\_config.yml</code> 中新增配置项，建议直接加在最底下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="comment"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 中关于 Aplayer 的配置内容</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置成功后会发现 Aplayer 的吸底标签一直占据着左下角的一片空间，对手机端阅读不太友好，可以添加一下 CSS 样式使其自动缩进隐藏。在 <code>[Blogroot]\themes\butterfly\source\css\custom.css</code> 中 (没有这个文件就按照路径自己新建) 添加如下内容</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> {</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 的 inject 配置项中添加 Aplayer 的容器</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">   <span class="attr">head:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/custom.css"</span>  <span class="string">media="defer"</span> <span class="string">onload="this.media='all'"&gt;</span></span><br><span class="line">   <span class="attr">bottom:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class="aplayer</span> <span class="literal">no</span><span class="string">-destroy"</span> <span class="string">data-id="5183531430"</span> <span class="string">data-server="netease"</span> <span class="string">data-type="playlist"</span> <span class="string">data-fixed="true"</span> <span class="string">data-mini="true"</span> <span class="string">data-listFolded="false"</span> <span class="string">data-order="random"</span> <span class="string">data-preload="none"</span> <span class="string">data-autoplay="false"</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>更多详情请查看</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://akilar.top/posts" title="大佬的博客(Akilar)"><i class="far fa-hand-point-right"></i><span>大佬的博客(Akilar)</span></a></div><h1 id="想要添加的功能的功能"><a href="#想要添加的功能的功能" class="headerlink" title="想要添加的功能的功能"></a>想要添加的功能的功能</h1><p>封面图片加载自动切换</p><p>图册</p><p>live2d</p><p>以及很多</p><h1 id="先放着以后再写"><a href="#先放着以后再写" class="headerlink" title="先放着以后再写"></a>先放着以后再写</h1>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> blog 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE中上传图片的方式</title>
      <link href="/javaee/servlet/utils/javaee-zhong-shang-chuan-tu-pian-de-fang-shi/"/>
      <url>/javaee/servlet/utils/javaee-zhong-shang-chuan-tu-pian-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h1><div class="note info flat"><p>1.要有一个<em><strong>form</strong></em>标签,<em><strong>method=post</strong></em>请求,以及在<em><strong>form</strong></em>标签中使用<em><strong>input type=file</strong></em>添加上传文件</p></div><p>因为传输的带有图片文件 数据会很大 <em><strong>get</strong></em>请求用容量限制 <em><strong>post</strong></em>没有 所以如果需要传输文件就要用<em><strong>post</strong></em>请求</p><div class="note info flat"><p>2.<em><strong>form</strong></em>标签的<em><strong>encType</strong></em>属性必须为<em><strong>multipart/form-data</strong></em></p></div><p>​    在http协议中  请求头中有这样一个信息</p><p>Content-Type: <em><strong>multipart/form-data</strong></em>; <em><strong>boundary</strong></em>=—-WebKitFormBoundarysrd39rxk51BB2BtB</p><p>Content-Type表示提交的数据类型<br>而<em><strong>encType=multipart/form-data</strong></em>表示提交的数据,以多段(每一个表单项一个数据段)的形式进行拼接,然后<strong>以二进制流的形式发送给服务器</strong><br><em><strong>boundary</strong></em> 表示每段数据的分隔符</p><ol><li>表示数据的开始</li><li>每次都由浏览器随机生成</li><li>结束会再生成一个多了两个-的分隔符</li></ol><h1 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h1><p>导入<em><strong>conmons-fileupload.jar</strong></em>  而 这个jar包又依赖于 <em><strong>conmmons-io.jar</strong></em>  所以这两个都要导入</p><div class="note info flat"><p>jar包中常用的类与方法</p></div><p>ServletFileUpload类  , 用于解析上传数据</p><p>Fileltem类，表示每一一个表单项。</p><div class="note info flat"><ul><li>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</li></ul></div><p>​    判断当前上传的数据格式是否是多段的格式。</p><ul><li><p>public List<fileitem> parseRequest(HttpServletRequest request)<br>​    解释上传的文件</fileitem></p></li><li><p>boolean FileItem.isFormField()</p><p>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。<br>true  表示普通类型的表单项</p><p>false 表示上传文件内容</p></li><li><p>String FileItem.getFieldName()<br>获取表单项的name属性值</p></li><li><p>String FileItem. getString( )<br>获取当前表单项的值。</p></li><li><p>String FileItem. getName();<br>获取上传的文件名</p></li><li><p>void FileItem.write( file );<br>将上传的文件写到参数file所指向抽硬盘位置。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客标签外挂的写法</title>
      <link href="/blog/bo-ke-biao-qian-wai-gua-de-xie-fa/"/>
      <url>/blog/bo-ke-biao-qian-wai-gua-de-xie-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="标签外挂（Tag-Plugins）"><a href="#标签外挂（Tag-Plugins）" class="headerlink" title="标签外挂（Tag Plugins）"></a>标签外挂（Tag Plugins）</h1><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89" title="本文章来源"><span>本文章来源</span></a><h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">通用设置</button></li><li class="tab"><button type="button" data-href="#test1-2">用法1</button></li><li class="tab"><button type="button" data-href="#test1-3">用法2(自定义icon)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>移植于next主题，并进行修改。</p><p>修改 主题配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><em><strong>icons</strong></em>和<em><strong>light_bg_offset</strong></em>只对用法1生效</p><p><strong>Note</strong> 标签外挂有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="note info simple"><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note simple %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default simple %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary simple %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success simple %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info simple %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning simple %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger simple %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><div class="note info modern"><h2 id="modern"><a href="#modern" class="headerlink" title="modern"></a>modern</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note modern %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default modern %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary modern %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success modern %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info modern %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning modern %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger modern %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><div class="note info flat"><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note flat %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default flat %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary flat %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success flat %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info flat %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning flat %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger flat %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><div class="note info disabled"><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note disabled %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default disabled %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary disabled %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success disabled %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info disabled %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning disabled %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger disabled %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><div class="note info no-icon flat"><h2 id="no-icon"><a href="#no-icon" class="headerlink" title="no-icon"></a>no-icon</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note no-icon %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default no-icon %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary no-icon %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success no-icon %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info no-icon %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning no-icon %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger no-icon %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><div class="note info flat"><p>3.2.0 以上版本支持</p></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% note [color] [icon] [style] %}</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>color</td><td>【可选】顔色(default / blue / pink / red / purple / orange / green)</td></tr><tr><td>icon</td><td>【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{% note 'fab fa-cc-visa' flat %}</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note blue 'fas fa-bullhorn' flat %}</span><br><span class="line">加油</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note pink 'fas fa-car-crash' flat %}</span><br><span class="line">小心开车 安全至上</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note red 'fas fa-fan' flat%}</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note orange 'fas fa-battery-half' flat %}</span><br><span class="line">电量不足</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note purple 'far fa-hand-scissors' flat %}</span><br><span class="line">剪刀石头布</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note green 'fab fa-internet-explorer' flat %}</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>加油</p></div><div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>电量不足</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h1><p>写法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup '原神' 'Q版头像' 'gallery/原神q版头像'https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg%}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>Q版头像</p>  <a href="/gallery/%E5%8E%9F%E7%A5%9Eq%E7%89%88%E5%A4%B4%E5%83%8F"></a>  </figcaption>  </figure>  </div><h1 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% gallery %}</span><br><span class="line">markdown 图片格式</span><br><span class="line">{% endgallery %}</span><br></pre></td></tr></tbody></table></figure><p>例如</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageBean的一些用法</title>
      <link href="/javaee/servlet/utils/pagebean-de-yi-xie-yong-fa/"/>
      <url>/javaee/servlet/utils/pagebean-de-yi-xie-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h1><p>下面有分页选项的时候 有一个PageBean就可以对该列表进行多种不同分页查询</p><h1 id="PaheBean对象的创建"><a href="#PaheBean对象的创建" class="headerlink" title="PaheBean对象的创建"></a>PaheBean对象的创建</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//分页Bean，它会在各层之间传递！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span>&lt;T&gt; {</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNow;<span class="comment">//当前页码</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> totalRecords;<span class="comment">//总记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageSize;<span class="comment">//每页记录数</span></span><br><span class="line"><span class="keyword">private</span> String url;<span class="comment">//请求路径和参数，例如：/BookServlet?method=findXXX&amp;cid=1&amp;bname=2</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; beanList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算总页数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageCount</span><span class="params">()</span> {</span><br><span class="line"><span class="type">int</span> <span class="variable">pageCount</span> <span class="operator">=</span> totalRecords / pageSize;</span><br><span class="line"><span class="keyword">return</span> totalRecords % pageSize == <span class="number">0</span> ? pageCount : pageCount + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageNow</span><span class="params">()</span> { <span class="keyword">return</span> pageNow; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNow</span><span class="params">(<span class="type">int</span> pageNow)</span> { <span class="built_in">this</span>.pageNow = pageNow; }</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalRecords</span><span class="params">()</span> { <span class="keyword">return</span> totalRecords; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalRecords</span><span class="params">(<span class="type">int</span> totalRecords)</span> { <span class="built_in">this</span>.totalRecords = totalRecords; }</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> { <span class="keyword">return</span> pageSize; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> { <span class="built_in">this</span>.pageSize = pageSize; }</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> { <span class="keyword">return</span> url; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> { <span class="built_in">this</span>.url = url; }</span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getBeanList</span><span class="params">()</span> { <span class="keyword">return</span> beanList; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanList</span><span class="params">(List&lt;T&gt; beanList)</span> { <span class="built_in">this</span>.beanList = beanList; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="封装每页记录数的类"><a href="#封装每页记录数的类" class="headerlink" title="封装每页记录数的类"></a>封装每页记录数的类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageConstants</span> {</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOOK_PAGE_SIZE</span> <span class="operator">=</span> <span class="number">12</span>;<span class="comment">//图书每页记录数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ORDER_PAGE_SIZE</span> <span class="operator">=</span> <span class="number">8</span>;<span class="comment">//订单每页记录数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h1><h2 id="通用的查询方法"><a href="#通用的查询方法" class="headerlink" title="通用的查询方法"></a>通用的查询方法</h2><p>通用的查询方法只需要对应查询传过来sql语句与pageNow即可返回封装好的PagebBean对象与查询对象的List集合</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入sql 返回分页查询结果</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCriteria</span><span class="params">(String sql, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> PageConstants.BOOK_PAGE_SIZE;<span class="comment">//每页记录数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">totalRecords</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//查询一共有多少条数据</span></span><br><span class="line">    List&lt;Book&gt; list = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class));</span><br><span class="line">    <span class="comment">//得到了总记录数</span></span><br><span class="line">   <span class="keyword">for</span>(Book book :list){</span><br><span class="line">       totalRecords++;</span><br><span class="line">   }</span><br><span class="line">    <span class="comment">//得到beanList，即当前页记录</span></span><br><span class="line">    sql = sql+<span class="string">" order by orderBy limit ?,?"</span>;</span><br><span class="line">    List&lt;Book&gt; beanList = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class),</span><br><span class="line">    (pageNow-<span class="number">1</span>) * pageSize,pageSize);</span><br><span class="line">    PageBean&lt;Book&gt; pb = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//其中PageBean没有url，这个任务由Servlet完成</span></span><br><span class="line">    pb.setBeanList(beanList);</span><br><span class="line">    pb.setPageNow(pageNow);</span><br><span class="line">    pb.setPageSize(pageSize);</span><br><span class="line">    pb.setTotalRecords(totalRecords);</span><br><span class="line">    <span class="keyword">return</span> pb;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按书名模糊查询</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByBname</span><span class="params">(String bname, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">        String sql=<span class="string">"select * from t_book where bname like '%"</span> + bname + <span class="string">"%'"</span>;</span><br><span class="line">        <span class="keyword">return</span> findByCriteria(sql,pageNow);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件组合查询</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCombination</span><span class="params">(Book criteria, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    String sql=<span class="string">"select * from t_book where 1=1 "</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getBname())){</span><br><span class="line">        sql = sql+ <span class="string">"AND bname like '%"</span> + criteria.getBname() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getAuthor())){</span><br><span class="line">        sql = sql+ <span class="string">"AND author like '%"</span> + criteria.getAuthor() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getPress())){</span><br><span class="line">        sql = sql+ <span class="string">"AND press like '%"</span> + criteria.getPress() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//将sql传入findByCriteria方法即可</span></span><br><span class="line">    <span class="keyword">return</span> findByCriteria(sql, pageNow);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h1><p>直接调用相应方法即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByBname</span><span class="params">(String bname, <span class="type">int</span> pageNow)</span>  {</span><br><span class="line">    <span class="keyword">return</span> bookDao.findByBname(bname,pageNow);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCombination</span><span class="params">(Book book, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.findByCombination(book,pageNow);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Servlet层"><a href="#Servlet层" class="headerlink" title="Servlet层"></a>Servlet层</h1><h2 id="获取当前页码"><a href="#获取当前页码" class="headerlink" title="获取当前页码"></a>获取当前页码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前页码</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPageNow</span><span class="params">(HttpServletRequest req)</span> {</span><br><span class="line"><span class="comment">//默认pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> req.getParameter(<span class="string">"pageNow"</span>);</span><br><span class="line">    <span class="comment">//用来确定传过来的pageNow是否为空 如果不为空就转成整形赋给pageNow</span></span><br><span class="line">    <span class="comment">//trim()方法用来返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line">    <span class="keyword">if</span>(param != <span class="literal">null</span> &amp;&amp; !param.trim().isEmpty()) {</span><br><span class="line">            pageNow = Integer.parseInt(param);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pageNow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="获取需要分页的url"><a href="#获取需要分页的url" class="headerlink" title="获取需要分页的url"></a>获取需要分页的url</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 截取url，页面中的分页导航中需要使用它做为超链接的目标！</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/BookeWeb/user/bookServlet?methed=findByBname&amp;bid=xxx&amp;pageNow=3</span></span><br><span class="line"><span class="comment"> * /BookeWeb/user/bookServlet + methed=findByBname&amp;bid=xxx&amp;pageNow=3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getUrl</span><span class="params">(HttpServletRequest req)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURI() + <span class="string">"?"</span> + req.getQueryString();</span><br><span class="line">     <span class="comment">//如果url中存在pageNow参数，截取掉，如果不存在那就不用截取。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> url.lastIndexOf(<span class="string">"&amp;pageNow="</span>);</span><br><span class="line">    <span class="keyword">if</span>(index != -<span class="number">1</span>) {</span><br><span class="line">        url = url.substring(<span class="number">0</span>, index);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按书名查</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findByBname</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span>  {</span><br><span class="line">    <span class="comment">//1. 得到pageNow：如果页面传递，使用页面的，如果没传，pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> getPageNow(req);</span><br><span class="line">    <span class="comment">//2. 得到url:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getUrl(req);</span><br><span class="line">    <span class="type">String</span> <span class="variable">bname</span> <span class="operator">=</span> req.getParameter(<span class="string">"bname"</span>);</span><br><span class="line">    PageBean&lt;Book&gt; pb = bookService.findByBname(bname, pageNow);</span><br><span class="line">    <span class="comment">//3. 给PageBean设置url，保存PageBean，转发到/jsps/book/list.jsp</span></span><br><span class="line">    pb.setUrl(url);</span><br><span class="line">    req.setAttribute(<span class="string">"pb"</span>, pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"f:/jsps/book/list.jsp"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合查询</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findByCombination</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> {</span><br><span class="line">    <span class="comment">//1. 得到pageNow：如果页面传递，使用页面的，如果没传，pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> getPageNow(req);</span><br><span class="line">    <span class="comment">//2. 得到url：...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getUrl(req);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setBname(req.getParameter(<span class="string">"bname"</span>));</span><br><span class="line">    book.setAuthor(req.getParameter(<span class="string">"author"</span>));</span><br><span class="line">    book.setPress(req.getParameter(<span class="string">"press"</span>));</span><br><span class="line">    PageBean&lt;Book&gt; pb = bookService.findByCombination(book, pageNow);</span><br><span class="line">    <span class="comment">//3. 给PageBean设置url，保存PageBean，转发到/jsps/book/list.jsp</span></span><br><span class="line">    pb.setUrl(url);</span><br><span class="line">    req.setAttribute(<span class="string">"pb"</span>, pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"f:/jsps/book/list.jsp"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Jsp页面"><a href="#Jsp页面" class="headerlink" title="Jsp页面"></a>Jsp页面</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">_go</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pageNow = $(<span class="string">"#pageCode"</span>).<span class="title function_">val</span>();<span class="comment">//获取文本框中的当前页码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!<span class="regexp">/^[1-9]\d*$/</span>.<span class="title function_">test</span>(pageNow)) {<span class="comment">//对当前页码进行整数校验</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">'请输入正确的页码！'</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(pageNow &gt; ${pb.<span class="property">pageCount</span>}) {<span class="comment">//判断当前页码是否大于最大页</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">'请输入正确的页码！'</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        location = <span class="string">"${pb.url}&amp;pageNow="</span> + pageNow;</span></span><br><span class="line"><span class="language-javascript">   }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divBody"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divContent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;%--上一页 --%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq 1 }"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnDisabled"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${pb.pageNow-1}"</span> <span class="attr">class</span>=<span class="string">"aBtn bold"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">&lt;%--</span><br><span class="line">我们需要计算页码列表的开始和结束位置，即两个变量begin和end</span><br><span class="line">计算它们需要通过当前页码！</span><br><span class="line">1. 总页数不足6页--&gt; begin=1, end=最大页</span><br><span class="line">2. 通过公式设置begin和end，begin=当前页-1，end=当前页+3</span><br><span class="line">3. 如果begin&lt;1，那么让begin=1，end=6</span><br><span class="line">4. 如果end&gt;tp, 让begin=pageCount-5, end=pageCount</span><br><span class="line"> --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            &lt;%--1. 总页数不足6页--&gt; begin=1, end=最大页--%&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageCount &lt;= 6}"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                &lt;%--2. 通过公式设置begin和end，begin=当前页-1，end=当前页+3--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow-2}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow+3}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                &lt;%--3. 如果begin&lt;1，那么让begin=1，end=6--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${begin &lt;= 1}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">                &lt;%--4. 如果end&gt;tp, 让begin=pageCount-5, end=pageCount--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${end &gt;= pb.pageCount}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount-5}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">           &lt;%--开始根据获取到的begin和end来遍历生成页码--%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">"${begin}"</span> <span class="attr">end</span>=<span class="string">"${end}"</span> <span class="attr">var</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                &lt;%--如果是本页面就不生成链接--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq i}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnSelect"</span>&gt;</span>${i}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${i}"</span> <span class="attr">class</span>=<span class="string">"aBtn"</span>&gt;</span>${i}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    &lt;%-- 显示点点点 --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${end &lt; pb.pageCount}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanApostrophe"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">     &lt;%--下一页 --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq pb.pageCount }"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnDisabled"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${pb.pageNow+1}"</span> <span class="attr">class</span>=<span class="string">"aBtn bold"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    &lt;%-- 共N页 到M页 --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>共${pb.pageCount}页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>到<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"inputPageCode"</span> <span class="attr">id</span>=<span class="string">"pageCode"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:_go();"</span> <span class="attr">class</span>=<span class="string">"aSubmit"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用时在jsp页面中导如即可</p><p>比如</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"/jsps/pager/pager.jsp"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于BaseServlet的使用方法</title>
      <link href="/javaee/servlet/utils/guan-yu-baseservlet-de-shi-yong-fang-fa/"/>
      <url>/javaee/servlet/utils/guan-yu-baseservlet-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>在访问服务器的时候在后面带上?methon=方法名 即可调用方法</p><p>比如访问TestServlet?method=regist 就会调用下面的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/TestServlet")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">regist</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            response.sendRedirect(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="BaseServlet-源码"><a href="#BaseServlet-源码" class="headerlink" title="BaseServlet 源码"></a>BaseServlet 源码</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">//获取表单路径后面带的参数method=方法名中的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//获得方法对象</span></span><br><span class="line">            method = <span class="built_in">this</span>.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception var10) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"您要调用的方法："</span> + methodName + <span class="string">"它不存在！"</span>, var10);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获取调用请求后处理的方法返回的字符串,来确定是转发还是重定向</span></span><br><span class="line"><span class="comment">             * "/index.jsp" 表示转发到index.jsp</span></span><br><span class="line"><span class="comment">             * "f:/index.jsp" f前缀表示forward 转发到index.jsp</span></span><br><span class="line"><span class="comment">             * "r:/index.jsp" r前缀表示redirect 重定向到index.jsp</span></span><br><span class="line"><span class="comment">             * null 或者 "" 表示既不转发又不重定向</span></span><br><span class="line"><span class="comment">             *  想重定向到百度,return null 自己去设置重定向</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            result = (String)method.invoke(<span class="built_in">this</span>, request, response);</span><br><span class="line">        } <span class="keyword">catch</span> (IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (InvocationTargetException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; !result.trim().isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> result.indexOf(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) {</span><br><span class="line">                request.getRequestDispatcher(result).forward(request, response);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> result.substring(<span class="number">0</span>, index);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> result.substring(index + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (start.equals(<span class="string">"f"</span>)) {</span><br><span class="line">                        request.getRequestDispatcher(path).forward(request, response);</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (start.equals(<span class="string">"r"</span>)) {</span><br><span class="line">                        response.sendRedirect(request.getContextPath() + path);</span><br><span class="line"></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客写法</title>
      <link href="/blog/bo-ke-xie-fa/"/>
      <url>/blog/bo-ke-xie-fa/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Front-matter的使用"><a href="#Front-matter的使用" class="headerlink" title="Front-matter的使用"></a>Front-matter的使用</h1><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p><strong>Page Front-matter 用于页面配置</strong><br><strong>Post Front-matter 用于文章页配置</strong></p><h2 id="Page-Front-matter-用于页面配置"><a href="#Page-Front-matter-用于页面配置" class="headerlink" title="Page Front-matter 用于页面配置"></a>Page Front-matter 用于页面配置</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>sticky</td><td>【可选】数字  数值越大，置顶的优先级越大。</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h2 id="Post-Front-matter用于文章页配置"><a href="#Post-Front-matter用于文章页配置" class="headerlink" title="Post Front-matter用于文章页配置"></a>Post Front-matter用于文章页配置</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>标签与分类的写法</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 123</span><br><span class="line">  - 456</span><br><span class="line">tags: [123, 456]</span><br></pre></td></tr></tbody></table></figure><p>多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这是默认的写法，给文章添加一个分类。</span><br><span class="line">categories: 123</span><br><span class="line"># 这会将文章分类123/456子分类目录下。</span><br><span class="line">categories: [123, 456]</span><br><span class="line">这会将文章分类到123/456子分类目录下。</span><br><span class="line">categories:</span><br><span class="line">   - 123</span><br><span class="line">   - 456</span><br><span class="line">多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。</span><br><span class="line">categories:</span><br><span class="line">   - [123]</span><br><span class="line">   - [456]</span><br><span class="line">   - [123, 789]</span><br></pre></td></tr></tbody></table></figure><h1 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h1><p>写法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup '原神' 'Q版头像' 'gallery/原神q版头像'https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg%}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>Q版头像</p>  <a href="/gallery/%E5%8E%9F%E7%A5%9Eq%E7%89%88%E5%A4%B4%E5%83%8F"></a>  </figcaption>  </figure>  </div><h1 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% gallery %}</span><br><span class="line">markdown 图片格式</span><br><span class="line">{% endgallery %}</span><br></pre></td></tr></tbody></table></figure><p>例如</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读hexo的config.yml文件</title>
      <link href="/blog/jie-du-hexo-de-config.yml-wen-jian/"/>
      <url>/blog/jie-du-hexo-de-config.yml-wen-jian/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br></pre></td></tr></tbody></table></figure><p>Hexo <a href="https://so.csdn.net/so/search?q=Configuration&amp;spm=1001.2101.3001.7020">Configuration</a>下的两行表示hexo文档的相关文档，Docs指的是hexo的文档，Source指的是hexo的GitHub源码</p><h1 id="Site-网站"><a href="#Site-网站" class="headerlink" title="# Site 网站"></a># Site 网站</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo  #网站的名字，会写在hexo generator命令生成后的public文件夹下的index.html文件的title标签里</span><br><span class="line"></span><br><span class="line">subtitle: '' #网站的副标题，生成的时候默认为空</span><br><span class="line"></span><br><span class="line">description: '' #主要用于SEO，告诉搜索引擎一个关于站点的简单描述，在官方文档中建议在这段描述中增加自己的一</span><br><span class="line"></span><br><span class="line">keywords: #网站的关键词，使用半角逗号分隔开多个关键词，关键词对SEO的优化有一定的作用</span><br><span class="line"></span><br><span class="line">author: John Doe #顾名思义就是作者，这个也只是署个名而已</span><br><span class="line"></span><br><span class="line">language: zh-CN #这里就写了网站使用的语言</span><br><span class="line"></span><br><span class="line">timezone: 'Asia/Shanghai' #网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure><h1 id="URL-网址"><a href="#URL-网址" class="headerlink" title="# URL 网址"></a># URL 网址</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url: #网站的网址</span><br><span class="line"></span><br><span class="line">permalink: :title/ #文章的永久链接格式，可以在permalink这里配置 也就是文章打开url显示的格式</span><br><span class="line"></span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # 设置为false时会将末尾的index.html去掉</span><br><span class="line">  trailing_html: true # 设置为false时会将末尾的.html去掉，对index.html无效</span><br></pre></td></tr></tbody></table></figure><p>对应上面的年，月，天和标题，我们自己配置时，使用:加上要设置的对应属性，以/分隔，可以配置的有以下内容，</p><table><thead><tr><th>变量</th><th align="left">描述</th></tr></thead><tbody><tr><td>:year</td><td align="left">文章的发表年份(4 位数)</td></tr><tr><td>:motnth</td><td align="left">文章的发表月份(2 位数)</td></tr><tr><td>:i_month</td><td align="left">文章的发表月份(去掉开头的零)</td></tr><tr><td>:i_day</td><td align="left">文章的发表日期(去掉开头的零)</td></tr><tr><td>:hour</td><td align="left">文章发表时的小时(2位数)</td></tr><tr><td>:minute</td><td align="left">文章发表时的分钟(2位数)</td></tr><tr><td>:title</td><td align="left">文件名称</td></tr><tr><td>:post_title</td><td align="left">文章标题</td></tr><tr><td>:id</td><td align="left">文章ID (not persistent across cache reset)</td></tr><tr><td>:category</td><td align="left">分类。如果文章没有分类,则是default_ category 配置信息。</td></tr></tbody></table><p>比如默认生成的hello-world.md中这里要注意的是，如果使用id的话，在使用hexo clean后重新hexo g会使得id发生改变，将permalink改为:year/:month/:day/:title/:id/使用hexo g构造文件，然后使用hexo clean后重新使用hexo g构造，发现前后两次文章的id是不一样的</p><p>除了上面的变量外，也可以使用Font-matter中的值，Font-matter是文章文件最上方以—分隔的区域，用于指定个别文件的变量</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签(不适用于分页)</td><td></td></tr><tr><td>categories</td><td>分类(不适用于分页)</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>keywords</td><td>仅用于meta标签和Open Graph的关键词(不推荐使用)</td><td></td></tr></tbody></table><h1 id="Directory-目录"><a href="#Directory-目录" class="headerlink" title="#Directory 目录"></a>#Directory 目录</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source_dir: source #存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是source</span><br><span class="line"></span><br><span class="line">public_dir: public #存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是public</span><br><span class="line"></span><br><span class="line">tag_dir: tags #按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同）</span><br><span class="line"></span><br><span class="line">archive_dir: archives #归档文件夹，存放归档文件，默认值为archives</span><br><span class="line"></span><br><span class="line">category_dir: categories #分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹</span><br><span class="line"></span><br><span class="line">code_dir: downloads/code #Include code 文件夹，source_dir 下的子目录，默认值为downloads/code</span><br><span class="line"></span><br><span class="line">i18n_dir: :lang #国际化（i18n）文件夹，默认值:lang</span><br><span class="line"></span><br><span class="line">skip_render: #跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章</span><br></pre></td></tr></tbody></table></figure><h1 id="Writing-文章"><a href="#Writing-文章" class="headerlink" title="#Writing 文章"></a>#Writing 文章</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md #新文章的默认名称，我们是使用hexo new来构造文章的，生成的文章名就是通过这里配置的，默认为:title.md，也就是标题.md</span><br><span class="line"></span><br><span class="line">default_layout: post #预设布局，hexo new可以创建三种文件，post/帖子，draft/草稿，page/页面，这里设置默认值在使用hexo new就可以直接创建对应默认类型的文章，设置了post就等同于说在命令行执行hexo new &lt;name&gt;和执行hexo new post &lt;name&gt;是一样的，也可以设置为draft和page</span><br><span class="line"></span><br><span class="line">titlecase: false #把标题转换为 title case</span><br><span class="line"></span><br><span class="line">external_link:</span><br><span class="line">  enable: true #是否在新标签中打开链接</span><br><span class="line">  field: site #external_link.enable的配置对当前网站（site）生效或仅对文章（post）生效，默认为site</span><br><span class="line">  exclude: '' #需要排除的域名</span><br><span class="line">  </span><br><span class="line">filename_case: 0 #把文件名称转换为小写(1)或者大写(2)，默认不转换(0)</span><br><span class="line"></span><br><span class="line">render_drafts: false #否渲染草稿文件，默认为false不渲染</span><br><span class="line"></span><br><span class="line">post_asset_folder: false #是否启动资源文件夹，对于我们的网站，如果我们的文章里面有图片，我们可以在source文件夹下建立一个统一的images文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为true，这样在source文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源，比如我设置为true，然后执行hexo new newPost</span><br><span class="line"></span><br><span class="line">relative_link: false #是否把链接改为与根目录的相对地址，默认为false</span><br><span class="line"></span><br><span class="line">future: true #是否显示当前时间之后的文章，默认为true，如果设置为false的话，我们设置的日期如果是未来的日期的话，就不会显示</span><br><span class="line"></span><br><span class="line">highlight: #代码块的设置</span><br><span class="line">  enable: true #开启代码高亮，默认为true</span><br><span class="line">  line_number: true #显示代码的行数，默认为true</span><br><span class="line">  auto_detect: false #如果未指定语言，就自动检测，默认为false</span><br><span class="line">  tab_replace: '' #用n个空格来代表tab键，如果值为空，则不会代替tab键</span><br><span class="line">  wrap: true #是否将代码放在table标签里，默认为true</span><br><span class="line">  hljs: false #是否对CSS类使用hljs-*前缀，默认为false</span><br><span class="line">  </span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: ''</span><br></pre></td></tr></tbody></table></figure><h1 id="Home-page-setting-主页设置"><a href="#Home-page-setting-主页设置" class="headerlink" title="#Home page setting 主页设置"></a>#Home page setting 主页设置</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator: #index_generator：主页相关的设置</span><br><span class="line">  path: '' #path：主页对应的路径，默认为’’，即域名根目录就是主页的路径</span><br><span class="line">  per_page: 10 #per_page：每页显示的帖子数，默认为10</span><br><span class="line">  order_by: -date #order_by：帖子的排序，默认为-date，即按日期倒序排</span><br></pre></td></tr></tbody></table></figure><h1 id="Category-amp-Tag-分类和标签"><a href="#Category-amp-Tag-分类和标签" class="headerlink" title="#Category &amp; Tag 分类和标签"></a>#Category &amp; Tag 分类和标签</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">default_category: uncategorized #默认分类</span><br><span class="line"></span><br><span class="line">category_map: #分类别名</span><br><span class="line"></span><br><span class="line">tag_map: #标签别名</span><br></pre></td></tr></tbody></table></figure><h1 id="Metadata-elements-元数据元素"><a href="#Metadata-elements-元数据元素" class="headerlink" title="#Metadata elements 元数据元素"></a>#Metadata elements 元数据元素</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta_generator: true #是否在页面开头插入下面的meta标签，默认为true</span><br></pre></td></tr></tbody></table></figure><h1 id="日期-x2F-时间格式"><a href="#日期-x2F-时间格式" class="headerlink" title="#日期/时间格式"></a>#日期/时间格式</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date_format: YYYY-MM-DD #日期格式，默认为YYYY-MM-DD，即年月日</span><br><span class="line"></span><br><span class="line">time_format: HH:mm:ss #时间格式，默认为HH:mm:ss，即时分秒</span><br><span class="line"></span><br><span class="line">## updated_option supports 'mtime', 'date', 'empty'</span><br><span class="line">updated_option: 'mtime' #启用以后，如果 Front Matter 中没有指定 updated（文件更新日期），post.updated 将会使用 date 的值而不是文件的创建时间，默认值为true</span><br></pre></td></tr></tbody></table></figure><h1 id="Pagination-分页"><a href="#Pagination-分页" class="headerlink" title="#Pagination 分页"></a>#Pagination 分页</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">per_page: 10 #分页时每页的文章数，如果为0则不分页，默认为10</span><br><span class="line"></span><br><span class="line">pagination_dir: page #分页的目录，默认为page，对应于public文件夹下的archives文件夹下的page文件夹，如果只有一页是不会生成这个文件夹的</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Include-x2F-Exclude-file-s-包括或不包括目录和文件"><a href="#Include-x2F-Exclude-file-s-包括或不包括目录和文件" class="headerlink" title="#Include / Exclude file(s) 包括或不包括目录和文件"></a>#Include / Exclude file(s) 包括或不包括目录和文件</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include: #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等</span><br><span class="line"></span><br><span class="line">exclude: #Hexo 会忽略这些文件和目录</span><br><span class="line"></span><br><span class="line">ignore: #忽略的文件 要注意的是，这里要写入的是数组，而yaml的数组要用-值表示数组中一个元素或者直接采用js中数组的写法[]</span><br></pre></td></tr></tbody></table></figure><h1 id="Extensions-主题"><a href="#Extensions-主题" class="headerlink" title="#Extensions 主题"></a>#Extensions 主题</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line"></span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line">theme: butterfly # 当前使用的主题名</span><br></pre></td></tr></tbody></table></figure><h1 id="Deployment-部署"><a href="#Deployment-部署" class="headerlink" title="#Deployment 部署"></a>#Deployment 部署</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:  # 库地址</span><br><span class="line">  branch: master # 分支名称</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做这个博客的一些步骤</title>
      <link href="/blog/zuo-zhe-ge-bo-ke-de-yi-xie-bu-zou/"/>
      <url>/blog/zuo-zhe-ge-bo-ke-de-yi-xie-bu-zou/</url>
      
        <content type="html"><![CDATA[<p>本博客基于node.js 完成的hexo博客 </p><p>欢迎大家共同学习</p><h1 id="做这个博客的一些步骤"><a href="#做这个博客的一些步骤" class="headerlink" title="做这个博客的一些步骤"></a>做这个博客的一些步骤</h1><h2 id="1-前置安装"><a href="#1-前置安装" class="headerlink" title="1.前置安装"></a>1.前置安装</h2><ol><li><p>安装Nodejs</p></li><li><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>    #安装淘宝的cnpm 管理器</p></li><li><p>cnpm install -g hexo-cli    #安装hexo框架</p><h6 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h6></li></ol><ul><li>node -v    #查看node版本</li><li>npm -v    #查看npm版本</li><li>cnpm -v    #查看cnpm版本</li><li>hexo -v    #查看hexo版本</li></ul><h2 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="2.创建目录"></a>2.创建目录</h2><ol><li>mkdir blog    #创建blog目录</li><li>cd blog     #进入blog目录</li><li>sudo hexo init     #生成博客 初始化博客</li><li>hexo s    #启动本地博客服务</li><li><a href="http://localhost:4000/">http://localhost:4000/</a>    #本地访问地址</li></ol><h2 id="3-开始写文章"><a href="#3-开始写文章" class="headerlink" title="3.开始写文章"></a>3.开始写文章</h2><ol><li><p>hexo n 我的第一篇文章 #创建新的文章 </p></li><li><p>#返回blog目录</p></li><li><p>hexo clean #清理</p></li><li><p>hexo g #生成</p></li></ol><h2 id="4-推送到GitHub"><a href="#4-推送到GitHub" class="headerlink" title="4.推送到GitHub"></a>4.推送到GitHub</h2><ol><li>Github创建一个的仓库 WindAndStill.github.io</li><li>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</li><li>hexo d    #部署到Github仓库里</li><li><a href="https://windandstill.github.io/">https://WindAndStill.github.io/</a>  #访问这个地址可以查看博客</li></ol><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><ol><li><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  #下载yilia主题到本地</p></li><li><p>配置_config.yml</p></li></ol><p><em>Deployment</em></p><p><em>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></em></p><p>​    <em>deploy:</em><br>          <em>type: git</em><br>         <em>repo: <a href="https://github.com/WindAndStill/WindAndStill.github.io.git">https://github.com/WindAndStill/WindAndStill.github.io.git</a></em><br>          <em>branch: master</em><br><em>-—-</em></p><p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><ol start="3"><li>hexo c    #清理一下</li><li>hexo g    #生成</li><li>hexo d    #部署到远程Github仓库</li></ol><p>如果文字描述不清晰 请到下方链接去学习</p><p>本博客 制作来源于视频<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p><p>本博客主题来源于<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> </p><p>文档教程：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>作者博客：<a href="https://immyw.com/">https://immyw.com/</a></p><h2 id="非常感谢该作者"><a href="#非常感谢该作者" class="headerlink" title="非常感谢该作者"></a>非常感谢该作者</h2>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
