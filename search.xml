<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySql(三) 数据的CRUD</title>
      <link href="/mysql-san-shu-ju-de-crud/"/>
      <url>/mysql-san-shu-ju-de-crud/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DML-操作表中的数据用于对表中的记录进行增删改操作"><a href="#1-DML-操作表中的数据用于对表中的记录进行增删改操作" class="headerlink" title="1 DML 操作表中的数据用于对表中的记录进行增删改操作"></a>1 DML 操作表中的数据<br>用于对表中的记录进行增删改操作</h1><h2 id="1-1-插入记录"><a href="#1-1-插入记录" class="headerlink" title="1.1 插入记录"></a>1.1 插入记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> [<span class="keyword">into</span>] 表名 [字段名] <span class="keyword">values</span> (字段值)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名：<span class="comment">-- 表示往哪张表中添加数据</span></span><br><span class="line">(字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, …)：<span class="comment">-- 要给哪些字段设置值</span></span><br><span class="line"><span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, …)：<span class="comment">-- 设置具体的值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入全部字段</span></span><br><span class="line"><span class="comment">-- 所有的字段名都写出来</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, 字段名 <span class="number">3</span>…) <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, 值 <span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 不写字段名</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, 值 <span class="number">3</span>…);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入部分数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, ...) <span class="keyword">values</span> (值 <span class="number">1</span>, 值 <span class="number">2</span>, ...);</span><br></pre></td></tr></tbody></table></figure><p><code>注：没有添加数据的字段会使用 NULL</code></p><h2 id="1-2-蠕虫复制"><a href="#1-2-蠕虫复制" class="headerlink" title="1.2 蠕虫复制"></a>1.2 蠕虫复制</h2><blockquote><p>将一张已经存在的表中的数据复制到另一张表中</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将表名 2 中的所有的列复制到表名 1 中</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="number">1</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 只复制部分列</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="number">1</span>(列 <span class="number">1</span>, 列 <span class="number">2</span>) <span class="keyword">select</span> 列 <span class="number">1</span>, 列 <span class="number">2</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-更新表记录"><a href="#1-3-更新表记录" class="headerlink" title="1.3 更新表记录"></a>1.3 更新表记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="operator">=</span>值 [<span class="keyword">where</span> 条件表达式]</span><br><span class="line"><span class="keyword">update</span>: 需要更新的表名</span><br><span class="line"><span class="keyword">set</span>: 修改的列值</span><br><span class="line"><span class="keyword">where</span>: 符合条件的记录才更新</span><br><span class="line">你可以同时更新一个或多个字段。</span><br><span class="line">你可以在 <span class="keyword">where</span> 子句中指定任何条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不带条件修改数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值; <span class="comment">-- 修改所有的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带条件修改数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值 <span class="keyword">where</span> 字段名<span class="operator">=</span>值;</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-删除表记录"><a href="#1-4-删除表记录" class="headerlink" title="1.4 删除表记录"></a>1.4 删除表记录</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 表名 [<span class="keyword">where</span> 条件表达式]</span><br><span class="line">如果没有指定 <span class="keyword">where</span> 子句，MySQL 表中的所有记录将被删除。</span><br><span class="line">你可以在 <span class="keyword">where</span> 子句中指定任何条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不带条件删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带条件删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 truncate 删除表中所有记录</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>truncate 和 delete 的区别： truncate 相当于删除表的结构，再创建一张表</p></blockquote><h1 id="2-DQL-查询表中的数据"><a href="#2-DQL-查询表中的数据" class="headerlink" title="2. DQL 查询表中的数据"></a>2. DQL 查询表中的数据</h1><blockquote><p>查询不会对数据库中的数据进行修改.只是一种显示数据的方式</p></blockquote><h2 id="2-1-简单查询"><a href="#2-1-简单查询" class="headerlink" title="2.1 简单查询"></a>2.1 简单查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用*表示所有列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定列的数据,多个列之间以逗号分隔</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>, 字段名 <span class="number">3</span>, ... fromm 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-指定列的别名进行查询"><a href="#2-2-指定列的别名进行查询" class="headerlink" title="2.2 指定列的别名进行查询"></a>2.2 指定列的别名进行查询</h2><blockquote><p>使用别名的好处： 显示的时候使用新的名字，并不修改表的结构</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对列指定别名</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span> <span class="keyword">as</span> 别名, 字段名 <span class="number">2</span> <span class="keyword">as</span> 别名... <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对列和表同时指定别名</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="number">1</span> <span class="keyword">as</span> 别名, 字段名 <span class="number">2</span> <span class="keyword">as</span> 别名... <span class="keyword">from</span> 表名 <span class="keyword">as</span> 表别名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>表使用别名的原因：用于多表查询操作</p></blockquote><h2 id="2-3-清除重复值"><a href="#2-3-清除重复值" class="headerlink" title="2.3 清除重复值"></a>2.3 清除重复值</h2><blockquote><p>查询指定列并且结果不出现重复数据</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-查询结果参与运算"><a href="#2-4-查询结果参与运算" class="headerlink" title="2.4 查询结果参与运算"></a>2.4 查询结果参与运算</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 某列数据和固定值运算</span></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="number">1</span> <span class="operator">+</span> 固定值 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">某列数据和其他列数据参与运算</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="number">1</span> <span class="operator">+</span> 列名 <span class="number">2</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意: 参与运算的必须是数值类型</p></blockquote><h2 id="2-5-条件查询"><a href="#2-5-条件查询" class="headerlink" title="2.5 条件查询"></a>2.5 条件查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line">流程：取出表中的每条数据，满足条件的记录就返回，不满足条件的记录不返回</span><br></pre></td></tr></tbody></table></figure><blockquote><p>运算符</p></blockquote><table><thead><tr><th align="center">比较运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;、&lt;、&lt;=、&gt;=、=、<code>&lt;&gt; </code></td><td align="center">&lt;&gt;在 SQL 中表示不等于，在 mysql 中也可以使用!= <code>没有==</code></td></tr><tr><td align="center">BETWEEN…AND</td><td align="center">在一个范围之内，如：between 100 and 200<br>相当于条件在 100 到 200 之间，包头又包尾</td></tr><tr><td align="center">IN(集合)</td><td align="center">集合表示多个值，使用逗号分隔</td></tr><tr><td align="center">LIKE ‘张%’</td><td align="center">模糊查询</td></tr><tr><td align="center">IS NULL</td><td align="center">查询某一列为 NULL 的值，注：不能写=NULL</td></tr></tbody></table><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th align="center">逻辑运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">and 或 &amp;&amp;</td><td align="center">与，SQL 中建议使用前者，后者并不通用</td></tr><tr><td align="center">or 或 ||</td><td align="center">或</td></tr><tr><td align="center">not 或 !</td><td align="center">非</td></tr></tbody></table><blockquote><p>in 关键字</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">in</span> (数据 <span class="number">1</span>, 数据 <span class="number">2.</span>..);</span><br><span class="line"><span class="keyword">in</span> 里面的每个数据都会作为一次条件，只要满足条件的就会显示</span><br></pre></td></tr></tbody></table></figure><blockquote><p>范围查询</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">between</span> 值 <span class="number">1</span> <span class="keyword">and</span> 值 <span class="number">2</span></span><br><span class="line">表示从值 <span class="number">1</span> 到值 <span class="number">2</span> 范围，包头又包尾</span><br><span class="line">比如：age <span class="keyword">between</span> <span class="number">80</span> adn <span class="number">100</span> <span class="comment">-- 相当于： age&gt;=80 &amp;&amp; age&lt;=100</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>like 关键字</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- like 表示模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">WHERE</span> 字段名 <span class="keyword">like</span> <span class="string">'通配符字符串'</span>;</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">通配符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%</td><td align="center">匹配多个字符串</td></tr><tr><td align="center">_</td><td align="center">匹配一个字符</td></tr></tbody></table><h1 id="3-高级DQL"><a href="#3-高级DQL" class="headerlink" title="3. 高级DQL"></a>3. 高级DQL</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过 order by 子句，可以将查询出的结果进行排序(排序只是显示方式，不会影响数据库中数据的顺序)</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段<span class="operator">=</span>值 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="keyword">asc</span>: 升序，默认值</span><br><span class="line"><span class="keyword">desc</span>: 降序</span><br></pre></td></tr></tbody></table></figure><blockquote><p>单列排序</p></blockquote><p>只按某一个字段进行排序，单列排序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据,使用年龄降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>组合排序</p></blockquote><p>同时对多个字段进行排序，如果第 1 个字段相等，则按第 2 个字段排序，依次类推</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段<span class="operator">=</span>值 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="number">1</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>], 字段名 <span class="number">2</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="comment">-- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>, math <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-聚合函数"><a href="#3-2-聚合函数" class="headerlink" title="3.2 聚合函数"></a>3.2 聚合函数</h2><p>使用聚合函数查询是纵向查询， 它是对一列的值进行计算，然后返回一个结果值<br>聚合函数会忽略空值 NULL</p><blockquote><p>五个聚合函数</p></blockquote><table><thead><tr><th align="center">SQL中的聚合函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">max(列名)</td><td align="center">求这一列的最大值</td></tr><tr><td align="center">min(列名)</td><td align="center">求这一列的最小值</td></tr><tr><td align="center">avg(列名)</td><td align="center">求这一列的平均值</td></tr><tr><td align="center">count(列名)</td><td align="center">统计这一列有多少条记录</td></tr><tr><td align="center">sum(列名)</td><td align="center">对这一列求总和</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(列名) <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="comment">-- 查询学生总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">as</span> 总人数 <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 总人数 <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><p>我们发现对于 NULL 的记录不会统计，建议如果统计个数则不要使用有可能为 null 的列</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifnull(列名，默认值)   <span class="comment">-- 如果列名不为空，返回这列的值。如果为 NULL，则返回默认值。</span></span><br><span class="line"><span class="comment">-- 查询 id 字段，如果为 null，则使用 0 代替</span></span><br><span class="line"><span class="keyword">select</span> ifnull(id,<span class="number">0</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 我们可以利用 IFNULL()函数，如果记录为 NULL，给个默认值，这样统计的数据就不会遗漏</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ifnull(id,<span class="number">0</span>)) <span class="keyword">from</span> student;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-分组"><a href="#3-3-分组" class="headerlink" title="3.3 分组"></a>3.3 分组</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组查询是指使用 group by 语句对查询信息进行分组，相同数据作为一组</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="number">1</span>,字段 <span class="number">2.</span>.. <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 [<span class="keyword">having</span> 条件];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>group by 将分组字段结果中相同内容作为一组，并且返回每组的第一条数据，所以单独分组没什么用处。<br><code>分组的目的就是为了统计，一般分组会跟聚合函数一起使用。</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按性别进行分组，求男生和女生数学的平均分</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> student3 <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>having 与 where 的区别</p></blockquote><table><thead><tr><th>子句</th><th>作用</th></tr></thead><tbody><tr><td>where 子句</td><td>1) 对查询结果进行分组前,将不符合where条件的行去掉,即在<code>分组之前</code>过滤数据,即先过滤在分组<br>2) where后面<code>不可以</code>使用聚合函数</td></tr><tr><td>having 子句</td><td>1) having 子句的作用是筛选满足条件的组,即在<code>分组之后</code>过滤数据,即先分组再过滤<br>2) having 后面<code>可以</code>使用聚合函数</td></tr></tbody></table><h2 id="3-4-limit-语句"><a href="#3-4-limit-语句" class="headerlink" title="3.4 limit 语句"></a>3.4 limit 语句</h2><blockquote><p>limit 是限制的意思，所以 limit 的作用就是限制查询记录的条数</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="operator">|</span>字段列表 [<span class="keyword">as</span> 别名] <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 子句] [<span class="keyword">group</span> <span class="keyword">by</span> 子句][<span class="keyword">having</span> 子句][<span class="keyword">order</span> <span class="keyword">by</span> 子</span><br><span class="line">句][limit 子句];</span><br><span class="line"></span><br><span class="line">LIMIT <span class="keyword">offset</span>,length;</span><br><span class="line"><span class="keyword">offset</span>：起始行数，从 <span class="number">0</span> 开始计数，如果省略，默认就是 <span class="number">0</span></span><br><span class="line">length： 返回的行数</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生表中数据，从第 3 条开始显示，显示 6 条。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student3 limit <span class="number">2</span>,<span class="number">6</span>;</span><br></pre></td></tr></tbody></table></figure><h1 id="4-表连接查询"><a href="#4-表连接查询" class="headerlink" title="4. 表连接查询"></a>4. 表连接查询</h1><h2 id="4-1-多表查询"><a href="#4-1-多表查询" class="headerlink" title="4.1 多表查询"></a>4.1 多表查询</h2><blockquote><p>多表查询的作用</p></blockquote><p>如果一条 SQL 语句查询多张表，因为查询结果在多张不同的表中，每张表取 1 列或多列</p><blockquote><p>多表查询的分类</p></blockquote><ol><li>内连接<ul><li>隐式内连接</li><li>显示内连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li></ol><h2 id="4-2-笛卡尔积现象"><a href="#4-2-笛卡尔积现象" class="headerlink" title="4.2 笛卡尔积现象"></a>4.2 笛卡尔积现象</h2><blockquote><p>什么是笛卡尔积</p></blockquote><p>左表的每一条数据和右边的每一条数据组合,这种效果成为笛卡儿乘积</p><blockquote><p>如何清除笛卡尔积现象的影响</p></blockquote><p>我们发现不是所有的数据组合都是有用的，只有员工表.dept_id = 部门表.id 的数据才是有用的<br>所以需要通过条件过滤掉没用的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置过滤条件 Column 'id' in where clause is ambiguous</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br><span class="line"><span class="comment">-- 查询员工和部门的名字</span></span><br><span class="line"><span class="keyword">select</span> emp.`name`, dept.`name` <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-内连接"><a href="#4-3-内连接" class="headerlink" title="4.3 内连接"></a>4.3 内连接</h2><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示。如：从表.外键=主表.主键</p><blockquote><p>隐式内连接 : 看不到 JOIN 关键字，条件使用 WHERE 指定</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表, 右表 <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>显示内连接：使用 INNER JOIN … ON 语句, 可以省略 INNER</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 [<span class="keyword">inner</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.`dept_id` <span class="operator">=</span> d.`id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-左外连接"><a href="#4-4-左外连接" class="headerlink" title="4.4 左外连接"></a>4.4 左外连接</h2><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示；否则，显示 NULL</p><p><code>可以理解为：在内连接的基础上保证左表的数据全部显示</code></p><blockquote><p>左外连接：使用 LEFT OUTER JOIN … ON，OUTER 可以省略</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">inner</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左外连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-5-右外连接"><a href="#4-5-右外连接" class="headerlink" title="4.5 右外连接"></a>4.5 右外连接</h2><p>用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示 NULL</p><p>可以理解为：在内连接的基础上保证右表的数据全部显示</p><blockquote><p>右外连接：使用 RIGHT OUTER JOIN … ON，OUTER 可以省略</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span> ]<span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">inner</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.`id` <span class="operator">=</span> emp.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">right</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.`id` <span class="operator">=</span> emp.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h1 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5. 子查询"></a>5. 子查询</h1><h2 id="5-1-什么是子查询"><a href="#5-1-什么是子查询" class="headerlink" title="5.1 什么是子查询"></a>5.1 什么是子查询</h2><blockquote><p>子查询的概念</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql(二) 库和表属性</title>
      <link href="/mysql-er-ku-he-biao-shu-xing/"/>
      <url>/mysql-er-ku-he-biao-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL-的概念"><a href="#1-SQL-的概念" class="headerlink" title="1. SQL 的概念"></a>1. SQL 的概念</h1><h2 id="1-1-什么是-SQL"><a href="#1-1-什么是-SQL" class="headerlink" title="1.1 什么是 SQL"></a>1.1 什么是 SQL</h2><p><strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage 结构化查询语言</p><h2 id="1-2-SQL-作用"><a href="#1-2-SQL-作用" class="headerlink" title="1.2 SQL 作用"></a>1.2 SQL 作用</h2><ol><li>是一种所有关系型数据库的查询规范，不同的数据库都支持</li><li>通用的数据库操作语言，可以用在不同的数据库中</li><li>不同的数据库 SQL 语句有一些区别</li></ol><blockquote><p>SQL规范(普通话)         MySQL特有(方言)        Oracle特有(方言)</p></blockquote><h2 id="1-3-SQL-语句分类"><a href="#1-3-SQL-语句分类" class="headerlink" title="1.3 SQL 语句分类"></a>1.3 SQL 语句分类</h2><ol><li>Data Definition Language (DDL 数据定义语言) <br>如：建库，建表</li><li><code>Data Manipulation Language(DML 数据操纵语言)</code><br><code>如：对表中的记录操作增删改</code></li><li><code>Data Query Language(DQL 数据查询语言)</code><br><code>如：对表中的查询操作</code></li><li>Data Control Language(DCL 数据控制语言)<br>如：对用户权限的设置</li></ol><h2 id="1-4-MySQL-的语法"><a href="#1-4-MySQL-的语法" class="headerlink" title="1.4 MySQL 的语法"></a>1.4 MySQL 的语法</h2><ol><li>每条语句以分号结尾</li><li>SQL 中不区分大小写，关键字中认为大写和小写是一样的</li><li>3 种注释：</li></ol><table><thead><tr><th>注释的语法</th><th>说明</th></tr></thead><tbody><tr><td>–空格</td><td>单行注释</td></tr><tr><td>/* */</td><td>多行注释</td></tr><tr><td>#</td><td>这是 mysql 特有的注释方式</td></tr></tbody></table><h1 id="2-DDL-操作数据库"><a href="#2-DDL-操作数据库" class="headerlink" title="2. DDL 操作数据库"></a>2. DDL 操作数据库</h1><h2 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h2><blockquote><p>创建数据库的几种方式</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line"><span class="comment">-- 判断数据库是否已经存在，不存在则创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名;</span><br><span class="line"><span class="comment">-- 创建数据库并指定字符集</span></span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集; </span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-查看数据库"><a href="#2-2-查看数据库" class="headerlink" title="2.2 查看数据库"></a>2.2 查看数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 查看某个数据库的定义信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db3;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-修改数据库"><a href="#2-3-修改数据库" class="headerlink" title="2.3 修改数据库"></a>2.3 修改数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库默认的字符集</span></span><br><span class="line"><span class="comment">-- ALTER DATABASE 数据库名 DEFAULT CHARACTER SET 字符集;</span></span><br><span class="line"><span class="keyword">alter</span> database db3 <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2.4 删除数据库"></a>2.4 删除数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-使用数据库"><a href="#2-5-使用数据库" class="headerlink" title="2.5 使用数据库"></a>2.5 使用数据库</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看正在使用的数据库  使用的一个 mysql 中的全局函数</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="comment">-- 使用/切换数据库</span></span><br><span class="line">use 数据库名</span><br></pre></td></tr></tbody></table></figure><h1 id="3-DDL-操作表结构"><a href="#3-DDL-操作表结构" class="headerlink" title="3. DDL 操作表结构"></a>3. DDL 操作表结构</h1><h2 id="3-1-MySQL-数据类型"><a href="#3-1-MySQL-数据类型" class="headerlink" title="3.1 MySQL 数据类型"></a>3.1 MySQL 数据类型</h2><blockquote><p>常用数据类型</p></blockquote><table><thead><tr><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">int</td><td>整形</td></tr><tr><td align="center">double</td><td>浮点型</td></tr><tr><td align="center">varchar</td><td>字符串型</td></tr><tr><td align="center">date</td><td>日期类型<br>格式为 yyyy-MM-dd,只有年月日,没有时分秒</td></tr></tbody></table><blockquote><p>详细的数据类型</p></blockquote> <table border="1" cellpadding="5px" cellspacing="0px">    <tbody><tr>      <th>分类</th>      <th>类型名称</th>      <th>类型说明</th>    </tr>    <tr>      <th rowspan="4">整形</th>      <td>tinyInt</td>      <td>微整型：很小的整数(占 8 位二进制)</td>    </tr>    <tr>      <td>smallint</td>      <td>小整型：小的整数(占 16 位二进制)</td>    </tr>    <tr>      <td>mediumint</td>      <td>中整型：中等长度的整数(占 24 位二进制)</td>    </tr>    <tr>      <td>int(integer)</td>      <td>整型：整数类型(占 32 位二进制)</td>    </tr>    <tr>      <th rowspan="2">小数</th>      <td>float</td>      <td>单精度浮点数，占 4 个字节</td>    </tr>    <tr>      <td>double</td>      <td>双精度浮点数，占 8 个字节</td>    </tr>    <tr>      <th rowspan="3">日期</th>      <td>double</td>      <td>双精度浮点数，占 8 个字节</td>    </tr>    <tr>      <td>time</td>      <td>表示时间类型</td>    </tr>    <tr>      <td>datetime</td>      <td>同时可以表示日期和时间类型</td>    </tr>    <tr>      <th rowspan="2">字符串</th>      <td>char(m)</td>      <td>固定长度的字符串，无论使用几个字符都占满全部，M 为 0~255 之间的整数</td>    </tr>    <tr>      <td>varchar(m)</td>      <td>可变长度的字符串，使用几个字符就占用几个，M 为 0~65535 之间的整数</td>    </tr>    <tr>      <th rowspan="4">大二进制</th>      <td>tinyblob Big Large Object</td>      <td>允许长度 0~255 字节</td>    </tr>    <tr>      <td>blob</td>      <td>允许长度 0~65535 字节</td>    </tr>    <tr>      <td>mediumblob</td>      <td>允许长度 0~167772150 字节</td>    </tr>    <tr>      <td>longblob</td>      <td>允许长度 0~4294967295 字节</td>    </tr>    <tr>      <th rowspan="4">大文本</th>      <td>tinytext</td>      <td>允许长度 0~255 字节</td>    </tr>    <tr>      <td>text</td>      <td>允许长度 0~65535 字节</td>    </tr>    <tr>      <td>mediumtext</td>      <td>允许长度 0~167772150 字节</td>    </tr>    <tr>      <td>longtext</td>      <td>允许长度 0~4294967295 字节</td>    </tr>  </tbody></table><h2 id="3-2-创建表"><a href="#3-2-创建表" class="headerlink" title="3.2 创建表"></a>3.2 创建表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">字段名 <span class="number">1</span> 字段类型 <span class="number">1</span>,</span><br><span class="line">字段名 <span class="number">2</span> 字段类型 <span class="number">2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 student 表包含 id,name,birthday 字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">id <span class="type">int</span>, <span class="comment">-- 整数</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 字符串</span></span><br><span class="line">birthday <span class="type">date</span> <span class="comment">-- 生日，最后没有逗号</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-查看表"><a href="#3-3-查看表" class="headerlink" title="3.3 查看表"></a>3.3 查看表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use 表名称;</span><br><span class="line"><span class="comment">-- 查看某个数据库中的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"><span class="comment">-- 查看创建表的 SQL 语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-快速创建一个表结构相同的表"><a href="#3-4-快速创建一个表结构相同的表" class="headerlink" title="3.4 快速创建一个表结构相同的表"></a>3.4 快速创建一个表结构相同的表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> 新表名 <span class="keyword">like</span> 旧表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个 s1 的表与 student 结构相同</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1 <span class="keyword">like</span> student;</span><br><span class="line"><span class="keyword">desc</span> s1;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-5-删除表"><a href="#3-5-删除表" class="headerlink" title="3.5 删除表"></a>3.5 删除表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="comment">-- 判断表是否存在，如果存在则删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">create</span>`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 直接删除表 s1 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> s1;</span><br><span class="line"><span class="comment">-- 判断表是否存在并删除 s1 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">create</span>`;</span><br></pre></td></tr></tbody></table></figure><p><code>与直接删除的区别 如果表不存在，不删除，存在则删除</code></p><h2 id="3-6-修改表结构"><a href="#3-6-修改表结构" class="headerlink" title="3.6 修改表结构"></a>3.6 修改表结构</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加表列 ADD</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改列类型 MODIFY</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新的类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改列名 CHANGE</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧列名 新列名 类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列 DROP</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line">rename <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改字符集 character set</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集;</span><br></pre></td></tr></tbody></table></figure><h1 id="4-数据库备份和还原"><a href="#4-数据库备份和还原" class="headerlink" title="4. 数据库备份和还原"></a>4. 数据库备份和还原</h1><h2 id="4-1-备份的应用场景"><a href="#4-1-备份的应用场景" class="headerlink" title="4.1 备份的应用场景"></a>4.1 备份的应用场景</h2><p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏<br>这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的</p><h2 id="4-2-备份与还原的语句"><a href="#4-2-备份与还原的语句" class="headerlink" title="4.2 备份与还原的语句"></a>4.2 备份与还原的语句</h2><blockquote><p>备份格式： DOS 下，未登录的时候。这是一个可执行文件 exe，在 bin 文件夹</p></blockquote><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 密码 数据库 &gt; 文件的路径</span><br></pre></td></tr></tbody></table></figure><blockquote><p>还原格式：mysql 中的命令，需要登录后才可以操作</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库；</span><br><span class="line">SOURCE 导入文件的路径;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 备份 day21 数据库中的数据到 d:\day21.sql 文件中</span></span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>proot day21 <span class="operator">&gt;</span> d:<span class="operator">/</span>day21.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原 day21 数据库中的数据到 d:\day21.sql 文件中</span></span><br><span class="line">use day21;</span><br><span class="line">source d:<span class="operator">/</span>day21.sql;</span><br></pre></td></tr></tbody></table></figure><h1 id="5-数据库约束的概述"><a href="#5-数据库约束的概述" class="headerlink" title="5.  数据库约束的概述"></a>5.  数据库约束的概述</h1><h2 id="5-1-数据库约束的概述"><a href="#5-1-数据库约束的概述" class="headerlink" title="5.1 数据库约束的概述"></a>5.1 数据库约束的概述</h2><blockquote><p>约束的作用</p></blockquote><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性</p><p>一个表如果添加了约束，不正确的数据将无 法插入到表中。约束在创建表的时候添加比较合适</p><blockquote><p>约束种类</p></blockquote><table><thead><tr><th align="center">约束名</th><th align="center">约束关键字</th></tr></thead><tbody><tr><td align="center">主键</td><td align="center">primary key</td></tr><tr><td align="center">唯一</td><td align="center">unique</td></tr><tr><td align="center">非空</td><td align="center">not null</td></tr><tr><td align="center">外键</td><td align="center">foreign key</td></tr><tr><td align="center">检查约束</td><td align="center">check <code>注mysql不支持</code></td></tr></tbody></table><h2 id="5-2-主键约束"><a href="#5-2-主键约束" class="headerlink" title="5.2 主键约束"></a>5.2 主键约束</h2><blockquote><p>主键的作用</p></blockquote><p>用来唯一标识数据库中的每一条记录</p><blockquote><p>哪个字段应该作为表的主键？</p></blockquote><p>通常不用业务字段作为主键，单独给每张表设计一个 id 的字段，把 id 作为主键<br><code>主键是给数据库和程序使用的，不是给最终的客户使用的</code><br><code>所以主键有没有含义没有关系，只要不重复，非空就行</code></p><blockquote><p>创建主键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候给字段添加主键</span></span><br><span class="line">字段名 字段类型 <span class="keyword">primary</span> key</span><br><span class="line"><span class="comment">-- 在已有表中添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表学生表 st5, 包含字段(id, name, age)将 id 做为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st5 (</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key, <span class="comment">-- id 为主键</span></span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> age <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">desc</span> st5;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除主键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 st5 表的主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st5 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st5 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>主键自增</p></blockquote><p>主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auto_increment 表示自动增长(字段类型必须是整数类型)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 默认地 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,请使用下列 SQL 语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表时指定起始值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名 <span class="type">int</span> <span class="keyword">primary</span> key auto_increment</span><br><span class="line">) auto_increment<span class="operator">=</span>起始值;</span><br><span class="line"><span class="comment">-- 指定起始值为 1000</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st4 (</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) auto_increment <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建好以后修改起始值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment<span class="operator">=</span>起始值;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st4 auto_increment <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>DELETE 和 TRUNCATE 对自增长的影响</p></blockquote><ul><li>DELETE：删除所有的记录之后，自增长没有影响</li><li>TRUNCATE：删除以后，自增长又重新开始</li></ul><h2 id="5-3-唯一约束"><a href="#5-3-唯一约束" class="headerlink" title="5.3 唯一约束"></a>5.3 唯一约束</h2><blockquote><p>什么是唯一约束： 表中某一列不能出现重复的值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">unique</span></span><br><span class="line"><span class="comment">-- 创建学生表 st7, 包含字段(id, name),name 这一列设置唯一约束,不能出现同名的学生</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st7 (</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 如果插入相同的数据就会变成null,null没有数据不存在重复的问题</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-非空约束"><a href="#5-4-非空约束" class="headerlink" title="5.4 非空约束"></a>5.4 非空约束</h2><blockquote><p>什么是非空约束：某一列不能为 nul</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="comment">-- 创建表学生表 st8, 包含字段(id,name,gender)其中 name 不能为 NULL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st8 (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>默认值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">default</span> 默认值</span><br><span class="line"><span class="comment">-- 创建一个学生表 st9，包含字段(id,name,address)， 地址默认值是广州</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st9 (</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">'广州'</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>如果一个字段设置了非空与唯一约束，该字段与主键的区别?</p><ol><li><code>主键数在一个表中，只能有一个</code>。不能出现多个主键。主键可以单列，也可以是多列</li><li>自增长只能用在主键上</li></ol><h2 id="5-5-外键约束"><a href="#5-5-外键约束" class="headerlink" title="5.5 外键约束"></a>5.5 外键约束</h2><blockquote><p> 什么是外键：<code>在从表中</code>与主表主键对应的那一列</p><ul><li>主表： 一方，用来约束别人的表</li><li>从表： 多方，被别人约束的表</li></ul><p>在<code>从表</code>中通过外键去<code>主表</code>中获取信息</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建表时增加外键：</span></span><br><span class="line">[<span class="keyword">constraint</span>] [外键约束名称] <span class="keyword">foreign</span> key(外键字段名)  <span class="keyword">references</span> 主表名(主键字段名)</span><br><span class="line"><span class="comment">-- 已有表增加外键：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">add</span> [<span class="keyword">constraint</span>] [外键约束名称] <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主</span><br><span class="line">键字段名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1) 删除副表/从表 employee</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2) 创建从表 employee 并添加外键约束 emp_depid_fk</span></span><br><span class="line"><span class="comment">-- 多方，从表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="comment">-- 创建外键约束</span></span><br><span class="line"><span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> department(id)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除外键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除 employee 表的 emp_depid_fk 外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">foreign</span> key emp_depid_fk;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 employee 表存在的情况下添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> department(id);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>外键的级联</p></blockquote><p><code>在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</code></p><table><thead><tr><th align="center">级联操作语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">on update cascade</td><td align="center">级联更新，只能是创建表的时候创建级联关系<br>更新主表中的主键，从表中的外键列也自动同步更新</td></tr><tr><td align="center">on delete cascade</td><td align="center">级联删除</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 employee 表，重新创建 employee 表，添加级联更新和级联删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="comment">-- 创建外键约束</span></span><br><span class="line"><span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> key (dep_id) <span class="keyword">references</span> </span><br><span class="line">department(id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h1 id="6-表与表之间的关系"><a href="#6-表与表之间的关系" class="headerlink" title="6. 表与表之间的关系"></a>6. 表与表之间的关系</h1><h2 id="6-1-表关系的概念"><a href="#6-1-表关系的概念" class="headerlink" title="6.1 表关系的概念"></a>6.1 表关系的概念</h2><blockquote><p>表与表之间的三种关系</p></blockquote><table><thead><tr><th align="center">三种关系</th><th align="center">栗子</th></tr></thead><tbody><tr><td align="center">一对多</td><td align="center">最常用的关系部门和员工</td></tr><tr><td align="center">多对多</td><td align="center">学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</td></tr><tr><td align="center">一对一</td><td align="center">相对使用比较少。员工表 简历表， 公民表 护照表</td></tr></tbody></table><h2 id="6-2-一对多"><a href="#6-2-一对多" class="headerlink" title="6.2 一对多"></a>6.2 一对多</h2><p>一对多（1:n） 例如：班级和学生，部门和员工，客户和订单，分类和商品 </p><p>一对多建表原则: 在<code>从表(多方)</code>创建一个字段,字段作为外键指向<code>主表(一方)</code>的主键</p><h2 id="6-3-多对多"><a href="#6-3-多对多" class="headerlink" title="6.3 多对多"></a>6.3 多对多</h2><p>多对多（m:n） 例如：老师和学生，学生和课程，用户和角色 </p><p>多对多关系建表原则: <strong>需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键</strong></p><h2 id="6-4-一对一"><a href="#6-4-一对一" class="headerlink" title="6.4 一对一"></a>6.4 一对一</h2><p>一对一（1:1） 在实际的开发中应用不多.因为一对一可以创建成一张表</p><p>两种建表原则</p><table><thead><tr><th align="center">一对一的建表原则</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">外键唯一</td><td align="center">主表的主键和从表的外键（唯一），形成主外键关系，外键唯一 UNIQUE</td></tr><tr><td align="center">外键是主键</td><td align="center">主表的主键和从表的主键，形成主外键关系</td></tr></tbody></table><h1 id="7-数据库设计"><a href="#7-数据库设计" class="headerlink" title="7. 数据库设计"></a>7. 数据库设计</h1><h2 id="7-1-数据规范化"><a href="#7-1-数据规范化" class="headerlink" title="7.1 数据规范化"></a>7.1 数据规范化</h2><blockquote><p>什么是范式</p></blockquote><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响<br>建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式</p><blockquote><p>三大范式</p></blockquote><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）<br> 满足最低要求的范式是第一范式（1NF）<br>在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推<br>一般说来，数据库只需满足第三范式(3NF）就行了</p><h2 id="7-2-1NF"><a href="#7-2-1NF" class="headerlink" title="7.2 1NF"></a>7.2 1NF</h2><blockquote><p>概念</p></blockquote><p>数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项<br>即表中的某个列有多个值时，必须拆分为不同的列<br><code>简而言之，第一范式每一列不可再拆分，称为原子性</code></p><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">班级</th></tr></thead><tbody><tr><td align="center"><code>1</code></td><td align="center">张三</td><td align="center">一班</td></tr><tr><td align="center"><code>2</code></td><td align="center">李四</td><td align="center">二班</td></tr><tr><td align="center"><code>3</code></td><td align="center">王五</td><td align="center">三班</td></tr></tbody></table><h2 id="7-3-2NF"><a href="#7-3-2NF" class="headerlink" title="7.3 2NF"></a>7.3 2NF</h2><blockquote><p>概念</p></blockquote><p>在满足第一范式的前提下，表中的每一个字段都完全依赖于主键<br>所谓完全依赖是指不能存在仅依赖主键一部分的列<br><code>简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列</code><br>当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况<br>比如有一个主键有 两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式</p><p>第二范式的特点： </p><ol><li>一张表只描述一件事情</li><li>表中的每一列都完全依赖于主键</li></ol><p>借书证表</p><table><thead><tr><th><code>学生证号</code></th><th>学生证名称</th><th>学生证办理时间</th><th><code>借书证号</code></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table><p>分成两张表    </p><table><thead><tr><th><code>学生证号</code></th><th>学生证名称</th><th>学生证办理时间</th></tr></thead></table><table><thead><tr><th><code>借书证号</code></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table><h2 id="7-4-3NF"><a href="#7-4-3NF" class="headerlink" title="7.4 3NF"></a>7.4 3NF</h2><blockquote><p>概念</p></blockquote><p>在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键<br>简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足 2NF 的基础上，任何非主列不得传递依赖于主键<br>所谓传递依赖，指的是如果存在”A → B → C”的决定关系，则 C 传递依赖于 A<br>因此，满足第三范式的数据库表应该不存在如下依赖关系：主键列 → 非主键列 x → 非主键列 y</p><blockquote><p>学生信息表</p></blockquote><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">年龄</th><th align="center"><code>所在学院</code></th><th align="center"><code>学院地点</code></th></tr></thead></table><p>存在传递的决定关系： <code>学号---&gt;所在学院---&gt;学院地点</code></p><p>拆分成两张表</p><table><thead><tr><th align="center"><code>学号</code></th><th align="center">姓名</th><th align="center">年龄</th><th align="center">所在学院的编号(外键)</th></tr></thead></table><table><thead><tr><th align="center"><code>学院编号 </code></th><th align="center">所在学院</th><th align="center">学院地点</th></tr></thead></table><h2 id="7-5-三大范式小结"><a href="#7-5-三大范式小结" class="headerlink" title="7.5 三大范式小结"></a>7.5 三大范式小结</h2><table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性：表中每列不可再拆分</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql(一) 认识与安装Mysql数据库</title>
      <link href="/mysql-yi-ren-shi-yu-an-zhuang-mysql-shu-ju-ku/"/>
      <url>/mysql-yi-ren-shi-yu-an-zhuang-mysql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1 数据库概述"></a>1 数据库概述</h1><blockquote><h2 id="1-1-数据存储的方式"><a href="#1-1-数据存储的方式" class="headerlink" title="1.1 数据存储的方式"></a>1.1 数据存储的方式</h2></blockquote><table><thead><tr><th>储存位置</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>内存</td><td>速度快</td><td>不能永久保存,数据是临时状态</td></tr><tr><td>文件</td><td>数据可以永久保存</td><td>操作数据不方便,查询某个数据</td></tr><tr><td>数据库</td><td>1. 数据库可以永久保存<br>2.查询速度快<br>3.对数据的管理方便</td><td>占用资源,需要购买</td></tr></tbody></table><blockquote><h2 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h2></blockquote><ol><li>存储数据的仓库</li><li>本是上是一个系统文件,还是以文件的方式存在服务器电脑上的</li><li>所有的关系型数据库都可以使用通用的<strong>SQL</strong>语句进行管理  <strong>DBMS DataBase Management System</strong></li></ol><h1 id="2-常见数据库"><a href="#2-常见数据库" class="headerlink" title="2 常见数据库"></a>2 常见数据库</h1><ul><li><code>MySQL</code>：开源免费的数据库，小型的数据库，已经被 Oracle 收购了。MySQL6.x 版本也开始收费。后来 Sun 公司收购了 MySQL，而 Sun 公司又被 Oracle 收购</li><li><code>Oracle</code>：收费的大型数据库，Oracle 公司的产品</li><li><code>DB2</code> ：IBM 公司的数据库产品,收费的。常应用在银行系统中</li><li><code>SQL Server</code>：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用</li><li><code>SQLite</code>: 嵌入式的小型数据库，应用在手机端，如：Android</li></ul><h1 id="3-数据库的安装与卸载"><a href="#3-数据库的安装与卸载" class="headerlink" title="3.  数据库的安装与卸载"></a>3.  数据库的安装与卸载</h1><blockquote><h2 id="3-1-数据库的安装"><a href="#3-1-数据库的安装" class="headerlink" title="3.1 数据库的安装"></a>3.1 <strong>数据库的安装</strong></h2><p>安装过程分成两个部分</p><ol><li>文件解压和复制过程，默认的安装目录：C:\Program Files\MySQL\MySQL Server 5.7\</li><li>安装好以后必须对 MySQL 服务器进行配置    在 mysql 中管理员的名字：root</li></ol></blockquote><ol><li>打开下载的 mysql 安装文件双击解压缩，运行“mysql-5.5.40-win32.msi</li><li>选择安装类型，有“Typical（默认）”、“Complete（完全）”、“Custom（用户自定义）”三个选项，选择“Custom”， 按“next”键继续</li><li>点选“Browse”，手动指定安装目录</li><li>填上安装目录</li><li>确认一下先前的设置，如果有误，按“Back”返回重做。按“Install”开始安装</li><li>正在安装中，请稍候</li><li>安装完成了，将进入 mysql 配置向导</li><li>选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程</li><li>选择服务器类型<br>“Developer Machine（开发测试类，mysql 占用很少资源）”<code>[练习选这个]</code><br>“Server Machine（服务器类型，mysql 占用较多资源）”<br>“Dedicated MySQL Server Machine（专门的数据库服务器，mysql 占 用所有可用资源）</li><li>选择mysql数据库的大致用途<br>“Multifunctional Database（通用多功能型，好）”<code>[练习选这个]</code><br>“Transactional Database Only（服务器类型，专注于事务处理，一般）”<br>“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对 MyISAM 数据类型的支持仅限于 non-transactional），按“Next” 继续</li><li>选择网站并发连接数，同时连接的数目<br>“Decision Support(DSS)/OLAP（20个左右）“Online ”<br> Transaction Processing(OLTP)（500 个左右）”<br>“Manual Setting（手动设置，自己输一个数）[我选择20个]</li><li>是否启用 TCP/IP 连接，设定端口，如果不启用，就只能在自己的机器上访问 mysql 数据库了<code>[3306端口]</code>在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），这样 MySQL 就不会允许细小的语法错误<br>如果是新手，建议您取消标准模式以减少麻烦。但熟悉 MySQL 以后，尽量使用标准模式，因为它可以降低有害数据进入数据库的可能性<code>[想什么哇,肯定标准走起]</code><br>按“Next”继续</li><li>就是对 mysql 默认数据库语言编码进行设置（重要），一般选 UTF-8，按 “Next”继续</li><li>选择是否将 mysql 安装为 windows 服务，还可以指定 Service Name（服务标识名称），是否将 mysql 的 bin 目录加入到 Windows PATH（加入后，就可以直接使用 bin 下的文件，而不用指出目录名，比如连接， “mysql.exe -uusername -ppassword;”就可以了，不用指出 mysql.exe 的完整地址，很方便），我这里全部 打上了勾，Service Name 不变。按“Next”继续</li><li>询问是否要修改默认 root 用户（超级管理）的密码<br>“Enable root access from remote machines（是否允许 root 用户在其它的机器上登陆，如果要安全，就不要勾上，如果要方便，就勾上它）” <code>[勾上 直接账号密码都是root]</code><br>“Create An Anonymous Account（新建一个匿名用户，匿名用户可以连接数据库，不能操作数据，包括查询）”一般就不用勾了，设置完毕，按“Next”继续</li><li>确认设置无误，按“Execute”使设置生效，即完成 MYSQL 的安装和配置</li></ol><blockquote><p>注意：设置完毕，按“Finish”后有一个比较常见的错误，就是不能“Start service”，一般出现在以前有安装 mysql 的服务器上，解决的办法，先保证以前安装的 mysql 服务器彻底卸载掉了；不行的话，检查是否按上面一步所说， 之前的密码是否有修改，照上面的操作；如果依然不行，将 mysql 安装目录下的 data 文件夹备份，然后删除，在 安装完成后，将安装生成的 data 文件夹删除，备份的 data 文件夹移回来，再重启 mysql 服务就可以了，这种情况 下，可能需要将数据库检查一下，然后修复一次，防止数据出错</p><p><code>解决方法：卸载 MySQL,重装 MySQL</code></p></blockquote><blockquote><h2 id="3-2-数据库的卸载"><a href="#3-2-数据库的卸载" class="headerlink" title="3.2 数据库的卸载"></a>3.2 <strong>数据库的卸载</strong></h2></blockquote><ol><li>停止 window 的 MySQL 服务。 找到“控制面板”-&gt; “管理工具”-&gt; “服务”，停止 MySQL 后台服务</li><li>卸载 MySQL 安装程序。找到“控制面板”-&gt; “程序和功能”，卸载 MySQL 程序</li><li>删除 MySQL 安装目录下的所有文件</li><li>删除 c 盘 ProgramDate 目录中关于 MySQL 的目录。路径为：C:\ProgramData\MySQL(是隐藏文件,需要显示 出来)</li></ol><h1 id="4-数据库服务的启动与登录"><a href="#4-数据库服务的启动与登录" class="headerlink" title="4. 数据库服务的启动与登录"></a>4. 数据库服务的启动与登录</h1><blockquote><p>MySQL 服务器启动方式有两种</p></blockquote><ol><li><p>通过服务的方式自动启动</p><p><code>此电脑</code>—右键<code>管理</code>—服务于应用程序—服务—右键MySQL</p></li><li><p>手动启动的方式</p><p><code>win+r</code>—<code>cmd</code>–<code>net start mysql</code></p><p><code>win+r</code>—<code>cmd</code>–<code>net stop mysql</code></p></li></ol><blockquote><p>控制台连接数据库</p></blockquote><p>MySQL 是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的 root 账号，使用安装时设置 的密码即可登录</p><p>登录格式 1：u 和 p 后面没有空格</p><blockquote><p>mysql -u用户名 -p密码</p><p>mysql -uroot -poot</p></blockquote><p>登录格式 2:</p><blockquote><p>mysql -hip 地址 -u用户名 -p密码</p><p>mysql -h127.0.0.1 -uroot -proot</p></blockquote><p>登录格式 3：</p><blockquote><p>mysql –host=ip 地址 –user=用户名 –password=密码</p><p>mysql –host=127.0.0.1 –user=root –password=root</p></blockquote><p>退出 MySQL：</p><blockquote><p>quit 或 exit</p></blockquote><h2 id="5-MySQL-目录结构"><a href="#5-MySQL-目录结构" class="headerlink" title="5. MySQL 目录结构"></a>5. MySQL 目录结构</h2><table><thead><tr><th>MySQL 的目录结构</th><th>描述</th></tr></thead><tbody><tr><td>bin&lt;目录&gt;</td><td>所有 mysql 的可执行文件，如：mysql.exe</td></tr><tr><td>MySQLInstanceConfig.exe</td><td>数据库的配置向导，在安装时出现的内容</td></tr><tr><td>data&lt;目录&gt;</td><td>系统必须的数据库所在的目录</td></tr><tr><td>my.ini 文件</td><td>mysql 的配置文件，一般不建议去修改</td></tr><tr><td>c:\ProgramData\MySQL\MySQ L Server 5.7\data\</td><td>我们自己创建的数据库所在的文件夹</td></tr></tbody></table><h2 id="6-数据库管理系统"><a href="#6-数据库管理系统" class="headerlink" title="6. 数据库管理系统"></a>6. 数据库管理系统</h2><p>​    数据库管理系统（<strong>DataBase Management System，DBMS</strong>）：指一种操作和管理数据库的大型软件，用于建 立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理 系统访问数据库中<code>表内的数据</code></p><h2 id="7-数据库管理系统、数据库和表的关系"><a href="#7-数据库管理系统、数据库和表的关系" class="headerlink" title="7. 数据库管理系统、数据库和表的关系"></a>7. 数据库管理系统、数据库和表的关系</h2><p>​        数据库管理程序(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用 中实体的数据，一般会在数据库创建多个表，以保存程序中实体 User 的数据</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="数据库管理系统、数据库和表的关系"></p><ol><li>一个数据库服务器包含多个库</li><li>一个数据库包含多张表</li><li>一张表包含多条记录</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsp页面中自定义标签的使用</title>
      <link href="/jsp-ye-mian-zhong-zi-ding-yi-biao-qian-de-shi-yong/"/>
      <url>/jsp-ye-mian-zhong-zi-ding-yi-biao-qian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Utils文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTag</span> <span class="keyword">extends</span> <span class="title class_">TagSupport</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doStartTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException{</span><br><span class="line">        <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="built_in">super</span>.pageContext.getOut();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            out.print(<span class="string">"这是一个自定义标签输出的内容"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.doStartTag();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编写tld描述文件 myTag.tld</p><blockquote><p>注意url要和jsp的一致</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">taglib</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">"-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="string">"http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>myTag<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://jyw.cn/myTag/<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>out<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.jyw.crm.utils.MyTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>JSP<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意taglib中url要与tld文件中一致</p></blockquote><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"mtTag"</span> uri=<span class="string">"http://jyw.cn/myTag/"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;mtTag:out&gt;&lt;/mtTag:out&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/ssm-kuang-jia-zheng-he/"/>
      <url>/ssm-kuang-jia-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="1-原始方式整合"><a href="#1-原始方式整合" class="headerlink" title="1. 原始方式整合"></a>1. 原始方式整合</h1><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h2><table><thead><tr><th align="center">名称</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td></tr><tr><td align="center">name</td><td align="center">varchar(100)</td></tr><tr><td align="center">money</td><td align="center">double(7,2)</td></tr></tbody></table><h2 id="1-2-创建Maven工程"><a href="#1-2-创建Maven工程" class="headerlink" title="1.2 创建Maven工程"></a>1.2 创建Maven工程</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring上下文--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectj织入 Aop用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-mvc用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet和jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis整合spring包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-编写实体类"><a href="#1-3-编写实体类" class="headerlink" title="1.3 编写实体类"></a>1.3 编写实体类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money;</span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-编写Mapper接口"><a href="#1-4-编写Mapper接口" class="headerlink" title="1.4 编写Mapper接口"></a>1.4 编写Mapper接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> {</span><br><span class="line">    <span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//查询账户数据</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-编写Service接口"><a href="#1-5-编写Service接口" class="headerlink" title="1.5 编写Service接口"></a>1.5 编写Service接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>; <span class="comment">//保存账户数据</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>; <span class="comment">//查询账户数据</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-6-编写Service接口实现"><a href="#1-6-编写Service接口实现" class="headerlink" title="1.6 编写Service接口实现"></a>1.6 编写Service接口实现</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> {</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">            resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">           <span class="comment">//获得session工厂对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">            <span class="comment">//获得session会话对象</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">            <span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">           accountMapper.save(account);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            sqlSession.close();</span><br><span class="line">           } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">        resourceAsStream = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">           <span class="comment">//获得session工厂对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">            <span class="comment">//获得session会话对象</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">          <span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line"><span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-编写Controller"><a href="#1-7-编写Controller" class="headerlink" title="1.7 编写Controller"></a>1.7 编写Controller</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">//设置相应编码</span></span><br><span class="line">    <span class="meta">@RequestMapping(value="/save",produces="text/html;harset=UTF-8")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(Account account)</span>{</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping("/findAll")</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"accountList"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"accountList"</span>,accountService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-8-编写添加页面"><a href="#1-8-编写添加页面" class="headerlink" title="1.8 编写添加页面"></a>1.8 编写添加页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>保存账户信息表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/save.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        用户名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        账户金额<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-9-编写列表页面"><a href="#1-9-编写列表页面" class="headerlink" title="1.9 编写列表页面"></a>1.9 编写列表页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"${accountList}"</span> <span class="attr">var</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.id}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.name}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${account.money}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-10-编写相应配置文件"><a href="#1-10-编写相应配置文件" class="headerlink" title="1.10 编写相应配置文件"></a>1.10 编写相应配置文件</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">数据库连接信息文件：jdbc.properties</button></li><li class="tab"><button type="button" data-href="#1-2">日志文件：log4j.properties</button></li><li class="tab"><button type="button" data-href="#1-3">MyBatis核心文件：sqlMapConfig.xml</button></li><li class="tab"><button type="button" data-href="#1-4">MyBatis映射文件：AccountMapper.xml</button></li><li class="tab"><button type="button" data-href="#1-5">SprngMVC配置文件：spring-mvc.xml</button></li><li class="tab"><button type="button" data-href="#1-6">Spring配置文件：applicationContext.xml</button></li><li class="tab"><button type="button" data-href="#1-7">Web.xml文件：web.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hibernate, Relational Persistence for Idiomatic Java</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span></span><br><span class="line"><span class="comment"># See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html&gt;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct messages to file hibernate.log ###</span></span><br><span class="line"><span class="comment">#log4j.appender.file=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.file.File=hibernate.log</span></span><br><span class="line"><span class="comment">#log4j.appender.file.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change 'info' to 'debug' ###</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="cn.jyw.pojo.Account" alias="account"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"developement"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"developement"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="cn/jyw/mapper/AccountMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        insert into account values(#{id},#{name},#{money})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描  主要扫描controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内部资源视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发静态资源访问权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描 扫描service和mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除controller的扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-7"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring 监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Spring整合MyBatis"><a href="#2-Spring整合MyBatis" class="headerlink" title="2. Spring整合MyBatis"></a>2. Spring整合MyBatis</h1><h2 id="2-1-整合思路"><a href="#2-1-整合思路" class="headerlink" title="2.1 整合思路"></a>2.1 整合思路</h2><blockquote><p><strong>在Service中将Session工厂交给Spring容器管理,从容器中获得执行操纵的的Mapper实例即可</strong></p><p>  resourceAsStream = Resources.getResourceAsStream(“sqlMapConfig.xml”);<br>           //获得session工厂对象<br>            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);<br>            //获得session会话对象<br>            SqlSession sqlSession = sqlSessionFactory.openSession();<br>           AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);</p></blockquote><blockquote><p><strong>将事务的控制交给Spring容器进行声明事务控制</strong></p><p>sqlSession.commit();<br> sqlSession.close();</p></blockquote><h2 id="2-2-将SqlSessionFactory配置到Spring容器中"><a href="#2-2-将SqlSessionFactory配置到Spring容器中" class="headerlink" title="2.2 将SqlSessionFactory配置到Spring容器中"></a>2.2 将SqlSessionFactory配置到Spring容器中</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置MyBatis的sessionFactory--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--加载mybatis核心文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-扫描Mapper，让Spring容器产生Mapper实现类"><a href="#2-3-扫描Mapper，让Spring容器产生Mapper实现类" class="headerlink" title="2.3 扫描Mapper，让Spring容器产生Mapper实现类"></a>2.3 扫描Mapper，让Spring容器产生Mapper实现类</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Mapper扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-配置声明式事务控制"><a href="#2-4-配置声明式事务控制" class="headerlink" title="2.4 配置声明式事务控制"></a>2.4 配置声明式事务控制</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transacionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transacionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>此时sqlMapConfig-spring.xml</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="cn.jyw.pojo.Account" alias="account"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-修改Service实现类代码"><a href="#2-5-修改Service实现类代码" class="headerlink" title="2.5 修改Service实现类代码"></a>2.5 修改Service实现类代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> {</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-整体整合思路-项目"><a href="#3-整体整合思路-项目" class="headerlink" title="3. 整体整合思路(项目)"></a>3. 整体整合思路(项目)</h1><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">Spring</button></li><li class="tab"><button type="button" data-href="#1-2">MyBatis</button></li><li class="tab"><button type="button" data-href="#1-3">日志</button></li><li class="tab"><button type="button" data-href="#1-4">json</button></li><li class="tab"><button type="button" data-href="#1-5">jstl</button></li><li class="tab"><button type="button" data-href="#1-6">文件上传</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aspectj织入 aop用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springmvc用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis整合spring包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--json的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsp中jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-6"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-2-整合思路"><a href="#3-2-整合思路" class="headerlink" title="3.2 整合思路"></a>3.2 整合思路</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">Dao层</button></li><li class="tab"><button type="button" data-href="#1-2">Service层</button></li><li class="tab"><button type="button" data-href="#1-3">Controller层</button></li><li class="tab"><button type="button" data-href="#1-4">Web.xml文件</button></li><li class="tab"><button type="button" data-href="#1-5">1 5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><ol><li><code>sqlMapConfig.xml</code> 空文件即可但是要文件头</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><code>applicationContext-dao.xml</code><ol><li>数据库链接</li><li>sqlSessionFactory对象,需要spirng和mybatis整合包下的</li><li>配置mapper扫描器</li></ol></li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置MyBatis的sessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载mybatis核心文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置这个之后mapper文件里面就可以直接写对应类名不用写全路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.crm.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Mapper扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置Mapper扫描包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.jyw.crm.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>数据库配置文件(jdbc.properties)</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/crm</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><ol><li><code>applicationContext-service.xml</code>包扫描器,扫描@service注解的类</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置@Service类的包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.crm.service"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><code>applciationContext-trans.xml</code>配置事务</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--传播行为--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.crm.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>springmvc.xml</p><ol><li>包扫描器,扫描@Controller注解的类</li><li>配置注解驱动</li><li>配置视图解析器</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描  主要扫描controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.crm.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发静态资源访问权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><ol><li>配置spring</li><li>配置前端控制器</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置全局参数，指定ContextLoaderListener监听器所用到的contextConfigLocation值(spring配置文件的位置)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--由指定的监听器来创建并管理spring的容器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置springmvc什么时候启动,参数必须为整数--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果为0或者大于0,则springmvc随着容器启动而启动--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果小于0,则在第一次请求进来的时候启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有的请求进入springmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><blockquote><ol><li>web.xml配置时,是设置所有的请求都进入SpirngMVC,但是SpringMVC无法处理css、js等静态资源，所以无法正常显示</li></ol></blockquote><blockquote><p>解决方案</p></blockquote><ol><li>在springmvc.xml中配置</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>修改web.xml,让所有以action结尾的请求都进入SpringMVC</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有的请求进入springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spirng(六) SpringMVC</title>
      <link href="/spring-liu-springmvc/"/>
      <url>/spring-liu-springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring集成web环境"><a href="#1-Spring集成web环境" class="headerlink" title="1. Spring集成web环境"></a>1. Spring集成web环境</h1><h2 id="1-1-ApplicationContext应用上下文获取方式"><a href="#1-1-ApplicationContext应用上下文获取方式" class="headerlink" title="1.1 ApplicationContext应用上下文获取方式"></a>1.1 ApplicationContext应用上下文获取方式</h2><blockquote><p>应用上下文对象是通过<code>new ClasspathXmlApplicationContext(spring配置文件) </code>方式获取的<br>但是每次从容器中获得Bean时都要编写<code>new ClasspathXmlApplicationContext(spring配置文件) </code><br>这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p></blockquote><blockquote><p>在Web项目中，可以使用<code>ServletContextListener</code>监听Web应用的启动，我们可以在Web应用启动时,<br>就加载Spring的配置文件，创建应用上下文对象<code>ApplicationContext</code>，在将其存储到最大的域<code>servletContext</code>域 中，<br>这样就可以在任意位置从域中获得应用上下文<code>ApplicationContext</code>对象了。</p></blockquote><h2 id="1-2-Spring提供获取应用上下文的工具"><a href="#1-2-Spring提供获取应用上下文的工具" class="headerlink" title="1.2 Spring提供获取应用上下文的工具"></a>1.2 Spring提供获取应用上下文的工具</h2><p>上面的分析不用手动实现，Spring提供了一个监听器<code>ContextLoaderListener</code>就是对上述功能的封装<br>该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到<code>ServletContext</code>域中<br>提供了一个客户端工 具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象</p><p>所以我们需要做的只有两件事：</p><ol><li>在web.xml中配置<code>ContextLoaderListener</code>监听器（导入spring-web坐标）</li><li>使用<code>WebApplicationContextUtils</code>获得应用上下文对象<code>ApplicationContext</code></li></ol><h2 id="1-3-导入Spring集成web的坐标"><a href="#1-3-导入Spring集成web的坐标" class="headerlink" title="1.3 导入Spring集成web的坐标"></a>1.3 导入Spring集成web的坐标</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-配置ContextLoaderListener监听器"><a href="#1-4-配置ContextLoaderListener监听器" class="headerlink" title="1.4 配置ContextLoaderListener监听器"></a>1.4 配置ContextLoaderListener监听器</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-通过工具获得应用上下文对象"><a href="#1-5-通过工具获得应用上下文对象" class="headerlink" title="1.5 通过工具获得应用上下文对象"></a>1.5 通过工具获得应用上下文对象</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span>  WebApplicationContextUtils.getWebApplicationContext(servletContext); <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">"id"</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="2-SpringMVC-简介"><a href="#2-SpringMVC-简介" class="headerlink" title="2.  SpringMVC 简介"></a>2.  SpringMVC 简介</h1><h2 id="2-1-SpringMVC概述"><a href="#2-1-SpringMVC概述" class="headerlink" title="2.1 SpringMVC概述"></a>2.1 SpringMVC概述</h2><p><code>SpringMVC </code>是一种基于 Java 的实现 <code>MVC 设计模型</code>的请求驱动类型的<code>轻量级 Web 框架</code>，属于 <code>SpringFrameWork</code> 的后续产品，已经融合在 Spring Web Flow 中</p><p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。<br>它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时 它还支持 <code>RESTful</code> 编程风格的请求。</p><h2 id="2-2-SpringMVC快速入门"><a href="#2-2-SpringMVC快速入门" class="headerlink" title="2.2 SpringMVC快速入门"></a>2.2 SpringMVC快速入门</h2><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringMVC%E5%85%A5%E9%97%A8%E6%AD%A5%E9%AA%A4.png" alt="SpringMVC入门步骤"></p><blockquote><h3 id="1-导入坐标"><a href="#1-导入坐标" class="headerlink" title="1. 导入坐标"></a>1. 导入坐标</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-在web-xml配置SpringMVC的核心控制器"><a href="#2-在web-xml配置SpringMVC的核心控制器" class="headerlink" title="2. 在web.xml配置SpringMVC的核心控制器"></a>2. 在web.xml配置SpringMVC的核心控制器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-创建Controller和业务方法"><a href="#3-创建Controller和业务方法" class="headerlink" title="3. 创建Controller和业务方法"></a>3. 创建Controller和业务方法</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Controller save running......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Ciallo&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="4-配置注解"><a href="#4-配置注解" class="headerlink" title="4. 配置注解"></a>4. 配置注解</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/quick")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Controller save running......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="5-创建spring-mvc-xml"><a href="#5-创建spring-mvc-xml" class="headerlink" title="5. 创建spring-mvc.xml"></a>5. 创建spring-mvc.xml</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%20MVC%E6%B5%81%E7%A8%8B%E8%A7%86%E5%9B%BE.png" alt="Spring MVC流程视图"></p><h2 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h2><p>SpringMVC的开发步骤</p><ol><li>导入SpringMVC相关坐标</li><li>配置SpringMVC核心控制器DispathcerServlet</li><li>创建Controller类和视图页面</li><li>使用注解配置Controller类中业务方法的映射地址</li><li>配置SpringMVC核心文件 spring-mvc.xml</li><li>客户端发起请求测试</li></ol><h1 id="3-组件解析MVC"><a href="#3-组件解析MVC" class="headerlink" title="3. 组件解析MVC"></a>3. 组件解析MVC</h1><h2 id="3-1-SpringMVC的执行流程"><a href="#3-1-SpringMVC的执行流程" class="headerlink" title="3.1 SpringMVC的执行流程"></a>3.1 SpringMVC的执行流程</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC的执行流程 "></p><p>① 用户发送请求至前端控制器DispatcherServlet</p><p>② DispatcherServlet收到请求调用HandlerMapping处理器映射器</p><p>③ 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果 有则生成)一并返回给DispatcherServlet</p><p>④ DispatcherServlet调用HandlerAdapter处理器适配器</p><p>⑤ HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)</p><p>⑥ Controller执行完成返回ModelAndView</p><p>⑦ HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</p><p>⑧ DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p><p>⑨ ViewReslover解析后返回具体View</p><p>⑩ DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p><h2 id="3-2-SpringMVC组件解析"><a href="#3-2-SpringMVC组件解析" class="headerlink" title="3.2 SpringMVC组件解析"></a>3.2 SpringMVC组件解析</h2><ol><li><p><code>前端控制器：DispatcherServlet</code></p><blockquote><p>用户请求到达前端控制器，它就相当于 MVC 模式中的 C<br>DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求<br>DispatcherServlet 的存在降低了组件之间的耦合性</p></blockquote></li><li><p><code>处理器映射器：HandlerMapping</code></p><blockquote><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器<br>SpringMVC 提供了不同的映射器实现不同的映射方式<br>例如：配置文件方式，实现接口方式，注解方式等</p></blockquote></li><li><p><code>处理器适配器：HandlerAdapter</code></p><blockquote><p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</p></blockquote></li><li><p><code>处理器：Handler</code></p><blockquote><p>它就是我们开发中要编写的具体业务控制器<br>由 DispatcherServlet 把用户请求转发到 Handler<br>由 Handler 对具体的用户请求进行处理</p></blockquote></li><li><p><code>视图解析器：View Resolver</code></p><blockquote><p>View Resolver 负责将处理结果生成 View 视图<br>View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址<br>再生成 View 视图对象<br>最后对 View 进行渲染将处理结果通过页面展示给用户</p></blockquote></li><li><p><code>视图：View</code></p><blockquote><p>SpringMVC 框架提供了很多的 View 视图类型的支持<br>包括：jstlView、freemarkerView、pdfView等，最常用的视图就是 jsp<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p></blockquote></li></ol><h2 id="3-3-SpringMVC注解解析"><a href="#3-3-SpringMVC注解解析" class="headerlink" title="3.3 SpringMVC注解解析"></a>3.3 SpringMVC注解解析</h2><p><code>@RequestMapping</code></p><p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p><p>位置：</p><ul><li>类上，请求URL 的第一级访问目录<br>此处不写的话，就相当于应用的根目录 </li><li>方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</li></ul><p>属性：</p><ul><li><p><code>value</code>：用于指定请求的URL<br>它和path属性的作用是一样的</p></li><li><p><code>method</code>：用于指定请求的方式</p><p>例如：method = RequestMethod.POST</p></li><li><p><code>params</code>：用于指定限制请求参数的条件<br>它支持简单的表达式<br>要求请求参数的key和value必须和配置的一模一样</p><p>例如：</p><ul><li>params = {“accountName”}，表示请求参数必须有accountName</li><li>params = {“moeny!100”}，表示请求参数中money不能是100</li></ul></li></ul><blockquote><h3 id="1-mvc命名空间引入"><a href="#1-mvc命名空间引入" class="headerlink" title="1. mvc命名空间引入"></a>1. mvc命名空间引入</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--命名空间：--&gt;</span></span><br><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">xmlns:mvc="http://www.springframework.org/schema/mvc"</span><br><span class="line"><span class="comment">&lt;!--约束地址：--&gt;</span></span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc </span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-组件扫描"><a href="#2-组件扫描" class="headerlink" title="2. 组件扫描"></a>2. 组件扫描</h3></blockquote><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中<br>如果使用@Controller注解标注的话，就需要使用<code>&lt;context:component-scan base-package=“cn.jyw.controller"/&gt;</code>进行组件扫描</p><h2 id="3-4-SpringMVC的XML配置解析"><a href="#3-4-SpringMVC的XML配置解析" class="headerlink" title="3.4 SpringMVC的XML配置解析"></a>3.4 SpringMVC的XML配置解析</h2><blockquote><h3 id="1-视图解析器"><a href="#1-视图解析器" class="headerlink" title="1. 视图解析器"></a>1. 视图解析器</h3></blockquote><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的<br>该配置文件地址 org/springframework/web/servlet/DispatcherServlet.properties<br>该文件中配置了默认的视图解析器，如下：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></tbody></table></figure><p>翻看该解析器源码，可以看到该解析器的默认设置，如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REDIRECT_URL_PREFIX = <span class="string">"redirect:"</span> <span class="comment">//重定向前缀</span></span><br><span class="line">FORWARD_URL_PREFIX = <span class="string">"forward:"</span> <span class="comment">//转发前缀（默认值）</span></span><br><span class="line">prefix = <span class="string">""</span>; <span class="comment">//视图名称前缀</span></span><br><span class="line">suffix = <span class="string">""</span>;<span class="comment">//视图名称后缀</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以通过属性注入的方式修改视图的的前后缀</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="4-SpringMVC的数据响应"><a href="#4-SpringMVC的数据响应" class="headerlink" title="4. SpringMVC的数据响应"></a>4. SpringMVC的数据响应</h1><h2 id="4-1-SpringMVC的数据响应方式"><a href="#4-1-SpringMVC的数据响应方式" class="headerlink" title="4.1 SpringMVC的数据响应方式"></a>4.1 SpringMVC的数据响应方式</h2><blockquote><ol><li>页面跳转</li></ol></blockquote><ul><li>直接返回字符串</li><li>通过ModeAndView对象返回</li></ul><blockquote><ol start="2"><li>回写数据</li></ol></blockquote><ul><li>直接返回字符串</li><li>返回对象或集合</li></ul><h2 id="4-2-页面跳转"><a href="#4-2-页面跳转" class="headerlink" title="4.2 页面跳转"></a>4.2 页面跳转</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">返回字符串形式</button></li><li class="tab"><button type="button" data-href="#1-2">返回ModelAndView对象</button></li><li class="tab"><button type="button" data-href="#1-3">向request域存储数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">()</span>{ </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>转发资源地址：<code>/WEB-INF/views/index.jsp</code></p><p>返回带有前缀的字符串：</p><ul><li>转发：<code>forward:/WEB-INF/views/index.jsp </code></li><li>重定向：<code>redirect:/index.jsp</code></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick2")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod2</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"redirect:/WEB-INF/views/index.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br><span class="line"><span class="meta">@RequestMapping("/quick3")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod3</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>在进行转发时，往往要向request域中存储数据，在jsp页面中显示<br>那么Controller中怎样向request 域中存储数据呢？</p><blockquote><ol><li>通过SpringMVC框架注入的request对象setAttribute()方法设置 (不常用)</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">(HttpServletRequest request)</span>{</span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>通过ModelAndView的addObject()方法设置</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick3")</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod3</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index.jsp"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-3-回写数据"><a href="#4-3-回写数据" class="headerlink" title="4.3 回写数据"></a>4.3 回写数据</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">直接返回字符串</button></li><li class="tab"><button type="button" data-href="#1-2">返回json串</button></li><li class="tab"><button type="button" data-href="#1-3">返回json对象或集合</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话<br>只需要使用 response.getWriter().print(“hello world”) 即可<br>那么在Controller中想直接回写字符串该怎样呢？</p><blockquote><ol><li>通过SpringMVC框架注入的response对象<br>使用response.getWriter().print(“hello world”) 回写数据<br>此时不需要视图跳转，业务方法返回值为void。</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick4")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod4</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">response.getWriter().print(<span class="string">"hello world"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>将需要回写的字符串直接返回<br>但此时需要通过@ResponseBody注解告知SpringMVC框架<br>方法返回的字符串不是跳转是直接在http响应体中返回。</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick5")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod5</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello springMVC!!!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>在异步项目中，客户端与服务器端往往要进行json格式字符串交互，此时我们可以手动拼接json字符串返回</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick6")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod6</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"><span class="keyword">return</span> <span class="string">"{\"name\":\"zhangsan\",\"age\":18}"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方式手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串<br> 我们可以使用web阶段学习过的json转换工具jackson进行转换，导入jackson坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过jackson转换json格式字符串，回写字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick7")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod7</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数<br>指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置</p><blockquote><p><strong>注意此处配置后后面返回字符串都会带上引号 尽量不要使用这种繁琐而且效果不好的办法</strong></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick8")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">quickMethod8</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在方法上添加@ResponseBody就可以返回json格式的字符串<br>但是这样配置比较麻烦，配置的代码比较多<br>因此，我们可以使用MVC的注解驱动代替上述配置(引入mvc的引入空间)</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation</span></span><br><span class="line"><span class="comment">.RequestMappingHandlerAdapter"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="messageConverters"&gt;</span></span><br><span class="line"><span class="comment">        &lt;list&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.http.converter.json</span></span><br><span class="line"><span class="comment">            .MappingJackson2HttpMessageConverter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">        &lt;/list&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件</p><p>使用自动加载 RequestMappingHandlerMapping（处理映射器）和 RequestMappingHandlerAdapter（ 处理 适 配 器 ），可用在Spring-xml.xml配置文件中使用 替代注解处理器和适配器的配置</p><p>同时使用默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p><h1 id="5-SpringMVC获得请求数据"><a href="#5-SpringMVC获得请求数据" class="headerlink" title="5. SpringMVC获得请求数据"></a>5. SpringMVC获得请求数据</h1><h2 id="5-1-获得请求参数"><a href="#5-1-获得请求参数" class="headerlink" title="5.1 获得请求参数"></a>5.1 获得请求参数</h2><p>客户端请求参数的格式是：name=value&amp;name=value… … 服务器端要获得请求的参数，有时还需要进行数据的封装<br>SpringMVC可以接收如下类型的参数：</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">获得基本类型参数</button></li><li class="tab"><button type="button" data-href="#1-2">获得POJO类型参数</button></li><li class="tab"><button type="button" data-href="#1-3">获得数组类型参数</button></li><li class="tab"><button type="button" data-href="#1-4">获得集合类型参数</button></li><li class="tab"><button type="button" data-href="#1-5">ajax</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick9?username=zhangsan&amp;age=12</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick9")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod9</span><span class="params">(String username,<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick9?username=zhangsan&amp;age=12</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    getter/setter…</span><br><span class="line">}</span><br><span class="line"><span class="meta">@RequestMapping("/quick10")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod10</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配</p></blockquote><p>springmvc1/quick11?strs=111&amp;strs=222&amp;strs=333</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick11")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod11</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(Arrays.asList(strs));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>获得集合参数时，要将集合参数包装到一个POJO中才可以</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick12"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss Vo{</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList</span><br><span class="line">        getter/setter...方法</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick12")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod12</span><span class="params">(Vo vo)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(vo.getUserList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><blockquote><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"${pageContext.request.contextPath}/js/jquery-3.3.1.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//模拟数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userList = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        userList.<span class="title function_">push</span>({<span class="attr">username</span>: <span class="string">"zhangsan"</span>,<span class="attr">age</span>: <span class="string">"20"</span>});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        userList.<span class="title function_">push</span>({<span class="attr">username</span>: <span class="string">"lisi"</span>,<span class="attr">age</span>: <span class="string">"20"</span>});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $.<span class="title function_">ajax</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">"POST"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">url</span>: <span class="string">"/springmvc1/quick13"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userList),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            contentType : <span class="string">'application/json;charset=utf-8'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        });</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick13")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod13</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">System.out.println(userList);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="5-2-放行静态资源"><a href="#5-2-放行静态资源" class="headerlink" title="5.2 放行静态资源"></a>5.2 放行静态资源</h2><p>注意：通过谷歌开发者工具抓包发现，没有加载到jquery文件<br>原因是SpringMVC的前端控制器 DispatcherServlet的url-pattern配置的是/<br>代表对所有的资源都进行过滤操作<br>我们可以通过以下两种方式指定放行静态资源：</p><ul><li><p>在spring-mvc.xml配置文件中指定放行的资源</p><p><code>&lt;mvc:resources mapping="/js/**" location="/js/"/&gt;</code></p></li><li><p>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</p><p>代表原始容器去寻找资源</p></li></ul><h2 id="5-3-请求数据乱码问题"><a href="#5-3-请求数据乱码问题" class="headerlink" title="5.3 请求数据乱码问题"></a>5.3 请求数据乱码问题</h2><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-参数绑定注解-requestParam"><a href="#5-4-参数绑定注解-requestParam" class="headerlink" title="5.4 参数绑定注解@requestParam"></a>5.4 参数绑定注解@requestParam</h2><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick14"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick14")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod14</span><span class="params">(<span class="meta">@RequestParam("name")</span> String username)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">System.out.println(username);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注解@RequestParam还有如下参数可以使用</p><ul><li><code>value</code>：与请求参数名称</li><li><code>required</code>：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</li><li><code>defaultValue</code>：当没有指定请求参数时，则使用指定的默认值赋值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick14")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod14</span><span class="params">(<span class="meta">@RequestParam(value="name",required = </span></span></span><br><span class="line"><span class="meta"><span class="params">false,defaultValue = "你好!")</span> String username)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">System.out.println(username);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-5-获得Restful风格的参数"><a href="#5-5-获得Restful风格的参数" class="headerlink" title="5.5 获得Restful风格的参数"></a>5.5 获得Restful风格的参数</h2><blockquote><p><code>Restful</code>是一种软件<code>架构风格、设计风格</code>，而不是标准，只是提供了一组设计原则和约束条件<br>主要用于客户端和服务 器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等</p></blockquote><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p><ul><li>GET：用于获取资源                /user/1 GET ： 得到 id = 1 的 user</li><li>POST：用于新建资源             /user POST： 新增 user</li><li>PUT：用于更新资源               /user/1 PUT： 更新 id = 1 的 user</li><li>DELETE：用于删除资源        /user/1 DELETE： 删除 id = 1 的 user</li></ul><p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定</p><p>地址/user/1可以写成 /user/{id}，占位符{id}对应的就是1的值</p><p>在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作</p><blockquote><p><strong>springmvc1/quick19/zhangsan</strong></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick19/{name}")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod19</span><span class="params">(<span class="meta">@PathVariable(value = "name",required = true)</span> String name)</span>{</span><br><span class="line">System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-6-自定义类型转换器"><a href="#5-6-自定义类型转换器" class="headerlink" title="5.6 自定义类型转换器"></a>5.6 自定义类型转换器</h2><ul><li><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置</p></li><li><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器<br>例如：日期类型的数据就需要自 定义转换器。</p></li></ul><blockquote><h3 id="1-定义转换器类实现Converter接口"><a href="#1-定义转换器类实现Converter接口" class="headerlink" title="1. 定义转换器类实现Converter接口"></a>1. 定义转换器类实现Converter接口</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String,Date&gt;{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> {</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> format.parse(source);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-在配置文件中声明转换器"><a href="#2-在配置文件中声明转换器" class="headerlink" title="2. 在配置文件中声明转换器"></a>2. 在配置文件中声明转换器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"converterService"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jyw.converter.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-在-lt-annotation-driven-gt-中引用转换器"><a href="#3-在-lt-annotation-driven-gt-中引用转换器" class="headerlink" title="3. 在< annotation-driven>中引用转换器"></a>3. 在&lt; annotation-driven&gt;中引用转换器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"converterService"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-7-获得Servlet相关API"><a href="#5-7-获得Servlet相关API" class="headerlink" title="5.7 获得Servlet相关API"></a>5.7 获得Servlet相关API</h2><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick16")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod16</span><span class="params">(HttpServletRequest request,HttpServletResponse </span></span><br><span class="line"><span class="params">response,HttpSession session)</span>{</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-8-获得请求头"><a href="#5-8-获得请求头" class="headerlink" title="5.8 获得请求头"></a>5.8 获得请求头</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1"><i class="RequestHeader"></i>请求头</button></li><li class="tab"><button type="button" data-href="#1-2"><i class="CookieValue"></i>Cookie</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name) @RequestHeader注解的属性如下：</p><ul><li><code>value</code>：请求头的名称</li><li><code>required</code>：是否必须携带此请求头</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick17")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod17</span><span class="params">(<span class="meta">@RequestHeader(value = "User-Agent",required = false)</span> String </span></span><br><span class="line"><span class="params">headerValue)</span>{</span><br><span class="line">System.out.println(headerValue);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>使用@CookieValue可以获得指定Cookie的值 @CookieValue注解的属性如下：</p><ul><li><code>value</code>：指定cookie的名称</li><li><code>required</code>：是否必须携带此cookie</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick18")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod18</span><span class="params">(<span class="meta">@CookieValue(value = "JSESSIONID",required = false)</span> String jsessionid)</span>{</span><br><span class="line">System.out.println(jsessionid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="6-文件上传"><a href="#6-文件上传" class="headerlink" title="6. 文件上传"></a>6. 文件上传</h1><h2 id="6-1-文件上传客户端三要素"><a href="#6-1-文件上传客户端三要素" class="headerlink" title="6.1 文件上传客户端三要素"></a>6.1 文件上传客户端三要素</h2><ul><li>表单项type=“file”</li><li>表单的提交方式是post</li><li>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</li></ul><h2 id="6-2-文件上传原理"><a href="#6-2-文件上传原理" class="headerlink" title="6.2 文件上传原理"></a>6.2 文件上传原理</h2><ul><li>当form表单修改为多部分表单时，request.getParameter()将失效</li><li>enctype=“application/x-www-form-urlencoded”时，form表单的正文内容格式是<code>key=value&amp;key=value&amp;key=value</code></li><li>当form表单的enctype取值为Mutilpart/form-data时，请求正文内容就变成多部分形式：</li></ul><h2 id="6-3-单文件上传步骤"><a href="#6-3-单文件上传步骤" class="headerlink" title="6.3 单文件上传步骤"></a>6.3 单文件上传步骤</h2><blockquote><h3 id="1-导入fileupload和io坐标"><a href="#1-导入fileupload和io坐标" class="headerlink" title="1. 导入fileupload和io坐标"></a>1. 导入fileupload和io坐标</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置文件上传解析器"><a href="#2-配置文件上传解析器" class="headerlink" title="2. 配置文件上传解析器"></a>2. 配置文件上传解析器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242800"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单个文件的大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"5242800"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件的编码类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-编写文件上传代码"><a href="#3-编写文件上传代码" class="headerlink" title="3. 编写文件上传代码"></a>3. 编写文件上传代码</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick20")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod20</span><span class="params">(String name,MultipartFile uploadFile)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">    <span class="comment">//获得文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\upload\\"</span>+originalFilename));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-4-多文件上传实现"><a href="#6-4-多文件上传实现" class="headerlink" title="6.4 多文件上传实现"></a>6.4 多文件上传实现</h2><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>多文件上传测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"${pageContext.request.contextPath}/quick21"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件3：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFiles"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick21")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod21</span><span class="params">(String name,MultipartFile[] uploadFiles)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException {</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile uploadFile : uploadFiles){</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">        uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\upload\\"</span>+originalFilename));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="7-SpringMVC拦截器"><a href="#7-SpringMVC拦截器" class="headerlink" title="7. SpringMVC拦截器"></a>7. SpringMVC拦截器</h1><h2 id="7-1-拦截器（interceptor）的作用"><a href="#7-1-拦截器（interceptor）的作用" class="headerlink" title="7.1 拦截器（interceptor）的作用"></a>7.1 拦截器（interceptor）的作用</h2><p>Spring MVC 的拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理</p><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（Interceptor Chain）</p><p>在访问被拦截的方 法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用</p><p>拦截器也是AOP思想的具体实现</p><h2 id="7-2-拦截器和过滤器区别"><a href="#7-2-拦截器和过滤器区别" class="headerlink" title="7.2 拦截器和过滤器区别"></a>7.2 拦截器和过滤器区别</h2><table><thead><tr><th align="center">区别</th><th align="center">过滤器(Filter)</th><th align="center">拦截器(Interceptor)</th></tr></thead><tbody><tr><td align="center">使用范围</td><td align="center">是servlet规范中的一部分,<br>任何Java Web 工程都能使用</td><td align="center">是 SpringMVC 框架自己的,<br>只有使用了 SpringMVC 框架的工程才能用</td></tr><tr><td align="center">拦截范围</td><td align="center">在 url-pattern 中配置了/*之后,<br>可以对所有要访问的资源拦截</td><td align="center">在&lt; mvc:mapping path=””/&gt;中配置了/**之后也可以多所有资源进行拦截<br>但是可以通过&lt; mvc:exclude-mapping path=””/&gt;标签排除不需要拦截的资源</td></tr></tbody></table><h2 id="7-3-拦截器快速入门"><a href="#7-3-拦截器快速入门" class="headerlink" title="7.3 拦截器快速入门"></a>7.3 拦截器快速入门</h2><blockquote><h3 id="1-创建拦截器类实现HandlerInterceptor接口"><a href="#1-创建拦截器类实现HandlerInterceptor接口" class="headerlink" title="1. 创建拦截器类实现HandlerInterceptor接口"></a>1. 创建拦截器类实现HandlerInterceptor接口</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line">    <span class="comment">//在目标方法之前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> {</span><br><span class="line">        System.out.println(<span class="string">"preHandle running..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="comment">//在目标方法执行之后视图对象返回值执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> {</span><br><span class="line">        System.out.println(<span class="string">"postHandle running..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//在流程都执行完毕之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> {</span><br><span class="line">    System.out.println(<span class="string">"afterCompletion running..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置拦截器"><a href="#2-配置拦截器" class="headerlink" title="2.  配置拦截器"></a>2.  配置拦截器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jyw.interceptor.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick23")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod23</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException {</span><br><span class="line">    System.out.println(<span class="string">"目标方法执行...."</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"itcast"</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-测试拦截效果"><a href="#3-测试拦截效果" class="headerlink" title="3. 测试拦截效果"></a>3. 测试拦截效果</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick23")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">quickMethod23</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"目标方法执行...."</span>);</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"Ciallo"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preHandle running...</span><br><span class="line">目标方法执行....</span><br><span class="line">postHandle running...</span><br><span class="line">afterCompletion running...</span><br></pre></td></tr></tbody></table></figure><h2 id="7-4-多拦截器操作"><a href="#7-4-多拦截器操作" class="headerlink" title="7.4 多拦截器操作"></a>7.4 多拦截器操作</h2><p>同上，在编写一个MyHandlerInterceptor2操作，测试执行顺序</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">preHandle running...</span><br><span class="line">preHandle running222...</span><br><span class="line">目标方法执行....</span><br><span class="line">postHandle running222...</span><br><span class="line">postHandle running...</span><br><span class="line">afterCompletion running222...</span><br><span class="line">afterCompletion running...</span><br></pre></td></tr></tbody></table></figure><h2 id="7-5-拦截器方法说明"><a href="#7-5-拦截器方法说明" class="headerlink" title="7.5 拦截器方法说明"></a>7.5 拦截器方法说明</h2><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">preHandle()</td><td align="center">方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的<br> 当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行<br>当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方 法</td></tr><tr><td align="center">postHandle()</td><td align="center">该方法是在当前请求进行处理之后被调用，前提是preHandle 方法的返回值为 true 时才能被调用<br>且它会在DispatcherServlet 进行视图返回渲染之前被调用<br>所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象 进行操作</td></tr><tr><td align="center">afterCompletion()</td><td align="center">该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行<br>前提是preHandle 方法的返回值为true 时才能被调用</td></tr></tbody></table><h1 id="8-SpringMVC异常处理机制"><a href="#8-SpringMVC异常处理机制" class="headerlink" title="8. SpringMVC异常处理机制"></a>8. SpringMVC异常处理机制</h1><h2 id="8-1-异常处理的思路"><a href="#8-1-异常处理的思路" class="headerlink" title="8.1 异常处理的思路"></a>8.1 异常处理的思路</h2><p>系统中异常包括两类：<code>预期异常</code>和<code>运行时异常RuntimeException</code>，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生</p><p>系统的<code>Dao</code>、<code>Service</code>、<code>Controller</code>出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交 由异常处理器进行异常处理，如下图</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/SpirngMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="SpirngMVC异常处理"></p><h2 id="8-2-异常处理两种方式"><a href="#8-2-异常处理两种方式" class="headerlink" title="8.2 异常处理两种方式"></a>8.2 异常处理两种方式</h2><ul><li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器</li></ul><h2 id="8-3-简单异常处理器SimpleMappingExceptionResolver"><a href="#8-3-简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="8.3 简单异常处理器SimpleMappingExceptionResolver"></a>8.3 简单异常处理器SimpleMappingExceptionResolver</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">“org.springframework.web.servlet.handler.SimpleMappingExceptionResolver”</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“defaultErrorView”</span> <span class="attr">value</span>=<span class="string">“error”/</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“exceptionMappings”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--异常类型 错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cn.jyw.exception.MyException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.lang.ClassCastException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="8-4-自定义异常处理步骤"><a href="#8-4-自定义异常处理步骤" class="headerlink" title="8.4 自定义异常处理步骤"></a>8.4 自定义异常处理步骤</h2><blockquote><h3 id="1-创建异常处理器类实现HandlerExceptionResolver"><a href="#1-创建异常处理器类实现HandlerExceptionResolver" class="headerlink" title="1. 创建异常处理器类实现HandlerExceptionResolver"></a>1. 创建异常处理器类实现HandlerExceptionResolver</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> {</span><br><span class="line">        <span class="comment">//处理异常的代码实现</span></span><br><span class="line">        <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"exceptionPage"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="2-配置异常处理器"><a href="#2-配置异常处理器" class="headerlink" title="2.  配置异常处理器"></a>2.  配置异常处理器</h3></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.exception.MyExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="3-编写异常页面"><a href="#3-编写异常页面" class="headerlink" title="3. 编写异常页面"></a>3. 编写异常页面</h3></blockquote><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是一个最终异常的显示页面</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="4-测试异常跳转"><a href="#4-测试异常跳转" class="headerlink" title="4. 测试异常跳转"></a>4. 测试异常跳转</h3></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/quick22")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickMethod22</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException {</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    simpleDateFormat.parse(<span class="string">"abcde"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(三) MyBatis的多表查询和注解操作</title>
      <link href="/mybatis-san-mybatis-de-duo-biao-cha-xun-he-zhu-jie-cao-zuo/"/>
      <url>/mybatis-san-mybatis-de-duo-biao-cha-xun-he-zhu-jie-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis多表查询"><a href="#1-Mybatis多表查询" class="headerlink" title="1. Mybatis多表查询"></a>1. Mybatis多表查询</h1><h2 id="1-1-一对一查询"><a href="#1-1-一对一查询" class="headerlink" title="1.1 一对一查询"></a>1.1 一对一查询</h2><blockquote><ol><li>一对一查询的模型</li></ol></blockquote><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户 </p><p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p><table><thead><tr><th align="center">orders</th><th align="center">user</th></tr></thead><tbody><tr><td align="center">id:int</td><td align="center">id:int</td></tr><tr><td align="center">ordertime:varchar(255)</td><td align="center">username:varchar(50)</td></tr><tr><td align="center">total:double</td><td align="center">password:varchar(50)</td></tr><tr><td align="center">uid:int</td><td align="center">birthday:varchar(50)</td></tr></tbody></table><blockquote><ol start="2"><li>一对一查询的语句</li></ol></blockquote><p>对应的sql语句：select * from orders o,user u where o.uid=u.id</p><blockquote><ol start="3"><li>创建Order和User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>创建OrderMapper接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> {</span><br><span class="line">List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置OrderMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"user.username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中<code>&lt;resultMap&gt;</code>还可以配置如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"ordertime"</span> <span class="attr">column</span>=<span class="string">"ordertime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">column</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OrderMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">List&lt;Order&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(Order order : all){</span><br><span class="line">System.out.println(order);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-一对多查询"><a href="#1-2-一对多查询" class="headerlink" title="1.2  一对多查询"></a>1.2  一对多查询</h2><blockquote><ol><li>一对多查询的模型</li></ol></blockquote><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户 </p><p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p><blockquote><ol start="2"><li>一对多查询的语句</li></ol></blockquote><p>对应的sql语句：select * from user u left join orders o on u.id=o.uid;</p><blockquote><ol start="3"><li>修改User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>创建UserMapper接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.jyw.pojo.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"cn.jyw.pojo.Order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : all){</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList){</span><br><span class="line">    System.out.println(order);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-多对多查询"><a href="#1-3-多对多查询" class="headerlink" title="1.3 多对多查询"></a>1.3 多对多查询</h2><blockquote><ol><li>多对多查询的模型</li></ol></blockquote><p>用户表和角色表的关系为，一个用户有多个角色</p><p>一个角色被多个用户使用</p><p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p><table><thead><tr><th align="center">user</th><th align="center">user_role</th><th align="center">role</th></tr></thead><tbody><tr><td align="center">id:int</td><td align="center">user_id:int</td><td align="center">id:int</td></tr><tr><td align="center">username:varchar(50)</td><td align="center">role_id:int</td><td align="center">rolename:varchar(255)</td></tr><tr><td align="center">password:varchar(50)</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">birthday:varchar(50)</td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><ol start="2"><li>多对多查询的语句</li></ol></blockquote><p>对应的sql语句：select u.* ,r.* ,r.id rid from user u left join user_role ur on u.id=ur.user_id inner join role r on ur.role_id=r.id</p><blockquote><ol start="3"><li>创建Role实体，修改User实体</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>添加UserMapper接口方法</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findAllUserAndRole</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>配置UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">ofType</span>=<span class="string">"cn.jyw.pojo.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rolename"</span> <span class="attr">property</span>=<span class="string">"rolename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUserAndRole"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    select u.*,r.*,r.id rid from user u left join user_role ur on </span><br><span class="line">u.id=ur.user_id</span><br><span class="line">    inner join role r on ur.role_id=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>测试结果</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all){</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList){</span><br><span class="line">    System.out.println(role);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-MyBatis多表配置方式小结"><a href="#1-4-MyBatis多表配置方式小结" class="headerlink" title="1.4 MyBatis多表配置方式小结"></a>1.4 MyBatis多表配置方式小结</h2><ul><li>一对一配置：使用<code>&lt;resultMap&gt;</code>做配置</li><li>一对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置</li><li>多对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置</li></ul><h1 id="2-MyBatis注解开发"><a href="#2-MyBatis注解开发" class="headerlink" title="2. MyBatis注解开发"></a>2. MyBatis注解开发</h1><h2 id="2-1-MyBatis的常用注解"><a href="#2-1-MyBatis的常用注解" class="headerlink" title="2.1 MyBatis的常用注解"></a>2.1 MyBatis的常用注解</h2><ul><li>@Insert：实现新增</li><li>@Update：实现更新</li><li>@Delete：实现删除</li><li>@Select：实现查询</li><li>@Result：实现结果集封装</li><li>@Results：可以与@Result 一起使用，封装多个结果集</li><li>@One：实现一对一结果集封装</li><li>@Many：实现一对多结果集封装</li></ul><h2 id="2-2-MyBatis的增删改查"><a href="#2-2-MyBatis的增删改查" class="headerlink" title="2.2 MyBatis的增删改查"></a>2.2 MyBatis的增删改查</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert("insert into user values(#{id},#{username},#{password},#{birthday})")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update("update user set username=#{username},password=#{password} where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("select * from user where id=#{id}")</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("select * from user")</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.jyw.mapper.UserMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>或者指定扫描包含映射关系的接口所在的包也可以</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定接口所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.jyw.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-MyBatis的注解实现复杂映射开发"><a href="#2-3-MyBatis的注解实现复杂映射开发" class="headerlink" title="2.3 MyBatis的注解实现复杂映射开发"></a>2.3 MyBatis的注解实现复杂映射开发</h2><p>实现复杂关系映射之前我们可以在映射文件中通过配置来实现</p><p>使用注解开发后，我们可以使用@Results注解 ，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Results</td><td align="center">代替的是<code>&lt;resultMap&gt;</code>标签该注解中可以使用单个@Result注解，也可以使用@Result集合<br>使用格式：@Results（{@Result（），@Result（）}）或@Results（@Result（））</td></tr><tr><td align="center">@Resut</td><td align="center">代替了<code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签 @Result中属性介绍：<br> column：数据库的列名<br>property：需要装配的属性名<br>one：需要使用的@One 注解（@Result（one=@One）（）））<br>many：需要使用的@Many 注解（@Result（many=@many）（）））</td></tr><tr><td align="center">@One （一对一）</td><td align="center">代替了<code>&lt;assocation&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象<br>@One注解属性介绍：<br>select: 指定用来多表查询的 sqlmapper<br>使用格式：@Result(column=” “,property=””,one=@One(select=””))</td></tr><tr><td align="center">@Many （多对一）</td><td align="center">代替了<code>&lt;collection&gt;</code>标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合<br>使用格式：@Result(property=””,column=””,many=@Many(select=””))</td></tr></tbody></table><h2 id="2-4-一对一查询"><a href="#2-4-一对一查询" class="headerlink" title="2.4 一对一查询"></a>2.4 一对一查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select *,o.id oid from orders o,user u where o.uid=u.id")</span></span><br><span class="line">    <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">            @Result(column = "oid",property = "id"),</span></span><br><span class="line"><span class="meta">            @Result(column = "ordertime",property = "ordertime"),</span></span><br><span class="line"><span class="meta">            @Result(column = "total",property = "total"),</span></span><br><span class="line"><span class="meta">            @Result(column = "uid",property = "user.id"),</span></span><br><span class="line"><span class="meta">            @Result(column = "username",property = "user.username"),</span></span><br><span class="line"><span class="meta">            @Result(column = "password",property = "user.password")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select * from orders")</span></span><br><span class="line">   <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">           @Result(column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">           @Result(column = "ordertime",property = "ordertime"),</span></span><br><span class="line"><span class="meta">           @Result(column = "total",property = "total"),</span></span><br><span class="line"><span class="meta">           @Result(</span></span><br><span class="line"><span class="meta">                   property = "user", //要封装的属性名称</span></span><br><span class="line"><span class="meta">                   column = "uid", //根据那个字段去查询user表的数据</span></span><br><span class="line"><span class="meta">                   javaType = User.class, /a/要封装的实体类型</span></span><br><span class="line"><span class="meta">                   //select属性 代表查询那个接口的方法获得数据</span></span><br><span class="line"><span class="meta">                   one = @One(select = "cn.jyw.mapper.UserMapper.findById")</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">   })</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-一对多查询"><a href="#2-5-一对多查询" class="headerlink" title="2.5 一对多查询"></a>2.5 一对多查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("select * from user")</span></span><br><span class="line"><span class="meta">@Results({</span></span><br><span class="line"><span class="meta">        @Result(id=true ,column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">        @Result(column = "username",property = "username"),</span></span><br><span class="line"><span class="meta">        @Result(column = "password",property = "password"),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">                property = "orderList",</span></span><br><span class="line"><span class="meta">                column = "id",</span></span><br><span class="line"><span class="meta">                javaType = List.class,</span></span><br><span class="line"><span class="meta">                many = @Many(select = "cn.jyw.mapper.OrderMapper.findByUid")</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserAndOrderAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> {</span><br><span class="line">    <span class="meta">@Select("select * from orders where uid=#{uid}")</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-6-多对多查询"><a href="#2-6-多对多查询" class="headerlink" title="2.6 多对多查询"></a>2.6 多对多查询</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("SELECT * FROM USER")</span></span><br><span class="line">   <span class="meta">@Results({</span></span><br><span class="line"><span class="meta">           @Result(id = true,column = "id",property = "id"),</span></span><br><span class="line"><span class="meta">           @Result(column = "username",property = "username"),</span></span><br><span class="line"><span class="meta">           @Result(column = "password",property = "password"),</span></span><br><span class="line"><span class="meta">           @Result(</span></span><br><span class="line"><span class="meta">                   property = "roleList",</span></span><br><span class="line"><span class="meta">                   column = "id",</span></span><br><span class="line"><span class="meta">                   javaType = List.class,</span></span><br><span class="line"><span class="meta">                   many = @Many(select = "cn.jyw.mapper.RoleMapper.findByUid")</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">   })</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserAndRoleAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> {</span><br><span class="line">    <span class="meta">@Select("select * from role r,user_role ur where r.id=ur.role_id and ur.user_id=#{uid}")</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">findByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(二) Dao层实现以及映射文件和配置文件</title>
      <link href="/mybatis-er-dao-ceng-shi-xian-yi-ji-ying-she-wen-jian-he-pei-zhi-wen-jian/"/>
      <url>/mybatis-er-dao-ceng-shi-xian-yi-ji-ying-she-wen-jian-he-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MyBatis的Dao层实现"><a href="#1-MyBatis的Dao层实现" class="headerlink" title="1. MyBatis的Dao层实现"></a>1. MyBatis的Dao层实现</h1><h2 id="1-1-传统开发方式"><a href="#1-1-传统开发方式" class="headerlink" title="1.1 传统开发方式"></a>1.1 传统开发方式</h2><blockquote><ol><li>编写UserDao接口</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> {</span><br><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写UserDaoImpl实现</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>. 测试传统方式</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraditionDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">    System.out.println(all);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-代理开发方式"><a href="#1-2-代理开发方式" class="headerlink" title="1.2 代理开发方式"></a>1.2 代理开发方式</h2><blockquote><ol><li>代理开发方式介绍</li></ol></blockquote><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流</p><p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接 口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法</p><p>Mapper 接口开发需要遵循以下规范：</p><blockquote><ol><li>Mapper.xml文件中的namespace与mapper接口的全限定名相同</li><li>Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol></blockquote><blockquote><ol start="2"><li>编写UserMapper接口</li></ol></blockquote><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Mybaatis%E4%BB%A3%E7%90%86Dao%E5%B1%82%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83.png" alt="Mybaatis代理Dao层书写规范"></p><p>UserDao 指的是 namespace 的位置</p><blockquote><ol start="3"><li>测试代理方式</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxyDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2-MyBatis映射文件深入"><a href="#2-MyBatis映射文件深入" class="headerlink" title="2. MyBatis映射文件深入"></a>2. MyBatis映射文件深入</h1><h2 id="2-1-动态sql语句"><a href="#2-1-动态sql语句" class="headerlink" title="2.1 动态sql语句"></a>2.1 动态sql语句</h2><blockquote><p>动态sql语句概述</p></blockquote><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的</p><p>有些时候业务逻辑复杂时，我们的 SQL是动态变化的， 此时在前面的学习中我们的 SQL 就不能满足要求了</p><blockquote><ol start="2"><li>动态 SQL 的使用</li></ol></blockquote><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">if</button></li><li class="tab"><button type="button" data-href="#1-2">foreach</button></li><li class="tab"><button type="button" data-href="#1-3"><if></if></button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>我们根据实体类的不同取值，使用不同的 SQL语句来进行查</p><p>比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件</p><p>这种情况在我们的多条件组合查询中经常会碰到</p><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">        and id=#{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></span><br><span class="line">        and username=#{username}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当查询条件id和username都存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">un</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line">condition.setUsername(<span class="string">"lucy"</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByCondition(condition);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User WHERE id = ? and username = ?</span><br></pre></td></tr></tbody></table></figure><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByCondition(condition);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User WHERE id = ? </span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试代码片段如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">int</span>[] ids = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">2</span>,<span class="number">5</span>};</span><br><span class="line">List&lt;User&gt; userList = userMapper.findByIds(ids);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * form User WHERE id in(?,?)</span><br></pre></td></tr></tbody></table></figure><p>foreach标签的属性含义如下：</p><p>&lt; foreach&gt;标签用于遍历集合，它的属性：</p><ul><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-SQL片段抽取"><a href="#2-2-SQL片段抽取" class="headerlink" title="2.2 SQL片段抽取"></a>2.2 SQL片段抽取</h2><blockquote><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取sql片段简化编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectUser"</span>&gt;</span>select * from User<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span> where id=#{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-MyBatis映射文件配置-小结"><a href="#2-3-MyBatis映射文件配置-小结" class="headerlink" title="2.3 MyBatis映射文件配置(小结)"></a>2.3 MyBatis映射文件配置(小结)</h2><table><thead><tr><th align="center">标签</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>&lt;select&gt;</code></td><td align="center">查询</td></tr><tr><td align="center"><code>&lt;insert&gt;</code></td><td align="center">插入</td></tr><tr><td align="center"><code>&lt;update&gt;</code></td><td align="center">修改</td></tr><tr><td align="center"><code>&lt;delete&gt;</code></td><td align="center">删除</td></tr><tr><td align="center"><code>&lt;where&gt;</code></td><td align="center">where条件</td></tr><tr><td align="center"><code>&lt;if&gt;</code></td><td align="center">if判断</td></tr><tr><td align="center"><code>&lt;foreach&gt;</code></td><td align="center">循环</td></tr><tr><td align="center"><code>&lt;sql&gt;</code></td><td align="center">sql片段抽取</td></tr><tr><td align="center"><code>&lt;include&gt;</code></td><td align="center">插入</td></tr></tbody></table><h1 id="3-MyBatis核心配置文件深入"><a href="#3-MyBatis核心配置文件深入" class="headerlink" title="3. MyBatis核心配置文件深入"></a>3. MyBatis核心配置文件深入</h1><h2 id="3-1-typeHandlers标签"><a href="#3-1-typeHandlers标签" class="headerlink" title="3.1 typeHandlers标签"></a>3.1 typeHandlers标签</h2><table><thead><tr><th align="center">数据类型</th><th align="center">Java类型</th><th align="center">JDBC类型</th></tr></thead><tbody><tr><td align="center"><code>BoolenaTypeHandler</code></td><td align="center"><code>java.lang.Boolean</code>,<code>boolean</code></td><td align="center">数据库兼容的<code>BOOLEAN</code></td></tr><tr><td align="center"><code>ByteTypeHander</code></td><td align="center"><code>java.lang.Byte</code>,<code>yte</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>BYTE</code></td></tr><tr><td align="center"><code>ShortTypeHander</code></td><td align="center"><code>java.lang.Short</code>,<code>short</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>SHORT INTEGER</code></td></tr><tr><td align="center"><code>IntegerTypeHander</code></td><td align="center"><code>java.lang.Integer</code>,<code>int</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>INTEGER</code></td></tr><tr><td align="center"><code>LongTypeHander</code></td><td align="center"><code>java.lang.Long</code>,<code>long</code></td><td align="center">数据库兼容的<code>NUMERIC</code>或<code>LONG INTEGER</code></td></tr></tbody></table><blockquote><p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型</p><p>具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个JDBC类型</p><p>例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一 个1970年至今的毫秒数，取出来时转换成java的Date<br>即java的Date与数据库的varchar毫秒值之间转换</p></blockquote><p>开发步骤：</p><blockquote><ol><li>定义转换类继承类BaseTypeHandler</li><li>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult 为查询时 mysql的字符串类型转换成 java的Type类型的方法</li><li>在MyBatis核心配置文件中进行注册</li><li>测试转换是否正确</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;Date&gt; {</span><br><span class="line">    <span class="comment">//将Date转换成long 给 数据库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="type">int</span> i, Date date, JdbcType type)</span> </span><br><span class="line">    {</span><br><span class="line">    preparedStatement.setString(i,date.getTime()+<span class="string">""</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//根据结果集字段名称 把 long转换成Date给java</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(resultSet.getLong(s));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//根据结果集字段位置 把 long转换成Date给java</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(resultSet.getLong(i));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">    <span class="keyword">return</span> callableStatement.getDate(i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"cn.jyw.typeHandlers.MyDateTypeHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-plugins标签"><a href="#3-2-plugins标签" class="headerlink" title="3.2 plugins标签"></a>3.2 plugins标签</h2><blockquote><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即 可获得分页的相关数据</p></blockquote><p>开发步骤：</p><ol><li>导入通用PageHelper的坐标</li><li>在mybatis核心配置文件中配置PageHelper插件 </li><li>测试分页数据获取</li></ol><blockquote><ol><li>导入通用PageHelper坐标</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>在mybatis核心配置文件中配置PageHelper插件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：分页助手的插件 配置在通用馆mapper之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="3"><li>测试分页代码实现</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span>{</span><br><span class="line">    <span class="comment">//设置分页参数 当前页+每页显示条数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; select = userMapper2.select(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(User user : select){</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>获得分页相关的其他参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;User&gt;(select);</span><br><span class="line">System.out.println(<span class="string">"总条数："</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">"当前页："</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">"每页显示长度："</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">"是否第一页："</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">"是否最后一页："</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-MyBatis核心配置文件常用标签："><a href="#3-3-MyBatis核心配置文件常用标签：" class="headerlink" title="3.3 MyBatis核心配置文件常用标签："></a>3.3 MyBatis核心配置文件常用标签：</h2><blockquote><ol><li>properties标签：该标签可以加载外部的properties文件 </li><li>typeAliases标签：设置类型别名 </li><li>environments标签：数据源环境配置标签 </li><li>typeHandlers标签：配置自定义类型处理器 </li><li>plugins标签：配置MyBatis的插件</li><li>mapers标签：加载映射文件</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(一) 入门操作</title>
      <link href="/mybatis-yi-ru-men-cao-zuo/"/>
      <url>/mybatis-yi-ru-men-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis简介"><a href="#1-Mybatis简介" class="headerlink" title="1. Mybatis简介"></a>1. Mybatis简介</h1><h2 id="1-1-原始jdbc操作"><a href="#1-1-原始jdbc操作" class="headerlink" title="1.1 原始jdbc操作"></a>1.1 原始jdbc操作</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">插入数据</button></li><li class="tab"><button type="button" data-href="#1-2">查询数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟实体对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">2</span>);</span><br><span class="line">user.setUsername(<span class="string">"tom"</span>);</span><br><span class="line">user.setPassword(<span class="string">"lucy"</span>); .</span><br><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//获得连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span> );</span><br><span class="line"><span class="comment">//获得statement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">"insert into user(id,username , password) values(?,?,?)"</span>);</span><br><span class="line"><span class="comment">//设置占位符参数</span></span><br><span class="line">statement.setInt(<span class="number">1</span>,user.getId());</span><br><span class="line">statement.setString(<span class="number">2</span>,user.getUsername());</span><br><span class="line">statement.setString(<span class="number">3</span>,user.getPassword());</span><br><span class="line"><span class="comment">//执行更新操作</span></span><br><span class="line">statement.executeUpdate();</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//获得连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span> );</span><br><span class="line"><span class="string">"root"</span>, password: <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//获得statement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">"select id,username,password from user"</span>); .</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line"><span class="comment">//遍历结果集</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next()){</span><br><span class="line">    <span class="comment">//封装实体</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">    user.setUsername(resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">    user.setPassword(resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">    <span class="comment">//user实体封装完毕</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-原始jdbc操作的分析"><a href="#1-2-原始jdbc操作的分析" class="headerlink" title="1.2 原始jdbc操作的分析"></a>1.2 原始jdbc操作的分析</h2><blockquote><p>原始jdbc开发存在的问题如下：</p></blockquote><ol><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li><li>sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码</li><li>查询操作时，需要手动将结果集中的数据手动封装到实体中，插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li></ol><blockquote><p>应对上述问题给出的解决方案：</p></blockquote><ol><li>使用数据库连接池初始化连接资源</li><li>将sql语句抽取到xml配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ol><h2 id="1-3-什么是Mybatis"><a href="#1-3-什么是Mybatis" class="headerlink" title="1.3 什么是Mybatis"></a>1.3 什么是Mybatis</h2><ul><li><blockquote><p>mybatis 是一个优秀的<code>基于java的持久层框架</code>，它内部封装了 jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程</p></blockquote></li><li><blockquote><p>mybatis通过<strong>xml或注解</strong>的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的<strong>动态参数</strong>进行 映射生成最终执行的sql语句</p></blockquote></li><li><blockquote><p>最后mybatis框架执行sql并将结果映射为java对象并返回</p><p>采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了 封装，屏蔽了jdbc api 底层访问细节，使我们不用与<strong>jdbc api</strong>打交道，就可以完成对数据库的持久化操作</p></blockquote></li></ul><h2 id="1-4-Mybatis架构"><a href="#1-4-Mybatis架构" class="headerlink" title="1.4 Mybatis架构"></a>1.4 Mybatis架构</h2><p>Mybatis的功能架构分为三层：</p><ol><li><blockquote><p>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库</p><p>接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理</p></blockquote></li><li><blockquote><p>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等</p><p>它主要的目的是根据调用的请求完成一次数据库操作</p></blockquote></li><li><blockquote><p>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件</p><p>为上层的数据处理层提供最基础的支撑。</p></blockquote></li></ol><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Mybatis%E6%9E%B6%E6%9E%84.png" alt="Mybatis架构图"></p><h2 id="1-5-Mybatis原理步骤"><a href="#1-5-Mybatis原理步骤" class="headerlink" title="1.5 Mybatis原理步骤"></a>1.5 Mybatis原理步骤</h2><ol><li><p>mybatis配置文件，包括<code>Mybatis全局配置文件和Mybatis映射文件</code></p><p>其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息</p></li><li><p>mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出<code>SqlSessionFactory</code>，即会话工厂</p></li><li><p>通过SqlSessionFactory，可以创建<code>SqlSession</code>即会话</p><p><strong>Mybatis是通过SqlSession来操作数据库的</strong></p></li><li><p>SqlSession本身不能直接操作数据库，它是通过底层的<code>Executor</code>执行器接口来操作数据库的</p><p><code>Executor</code>接口有两个实现类，一个是普通执行器，一个是<code>缓存执行器（默认）</code>。</p></li><li><p>Executor执行器要处理的SQL信息是封装到一个底层对象<code>MappedStatement</code>中</p><p>该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息</p><p>其中输入参数和输出结果的映射类型包括<code>HashMap</code>集合对象、<code>POJO对象类型</code>。</p></li></ol><h1 id="2-Mybatis的快速入门"><a href="#2-Mybatis的快速入门" class="headerlink" title="2. Mybatis的快速入门"></a>2. Mybatis的快速入门</h1><h2 id="2-1-MyBatis开发步骤"><a href="#2-1-MyBatis开发步骤" class="headerlink" title="2.1 MyBatis开发步骤"></a>2.1 MyBatis开发步骤</h2><ol><li>添加MyBatis的坐标</li><li>创建user数据表</li><li>编写User实体类 </li><li>编写映射文件UserMapper.xml</li><li>编写核心文件SqlMapConfig.xml</li><li>编写测试类</li></ol><h2 id="2-2-MyBatis-快速实现"><a href="#2-2-MyBatis-快速实现" class="headerlink" title="2.2 MyBatis 快速实现"></a>2.2 MyBatis 快速实现</h2><blockquote><ol><li>导入MyBatis的坐标和其他相关坐标</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mysql坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--日志坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>创建user数据表</li></ol></blockquote><table><thead><tr><th>名</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>int</td></tr><tr><td>username</td><td>varchar</td></tr><tr><td>password</td><td>varchar</td></tr></tbody></table><blockquote><ol start="3"><li>编写User实体类</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略get个set方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>编写映射文件UserMapper.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="5"><li>编写核心文件SqlMapConfig.xml</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn.jyw/mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="6"><li>编写测试类</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">      <span class="comment">//获得核心配置文件</span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">      <span class="comment">//获得session工厂对象</span></span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">      <span class="comment">//获得session会话对象</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">//执行操作   参数：namespace+id</span></span><br><span class="line">      List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">      <span class="comment">//打印数据</span></span><br><span class="line">      System.out.println(userList);</span><br><span class="line">      <span class="comment">//释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h1 id="3-MyBatis的映射文件概述"><a href="#3-MyBatis的映射文件概述" class="headerlink" title="3. MyBatis的映射文件概述"></a>3. MyBatis的映射文件概述</h1><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--映射文件DTD约束头--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--跟标签 命名空间,与下面语句的id一起组成查询的标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select 查询操作,可选的还有insert,update,delete</span></span><br><span class="line"><span class="comment">    id 语句id标识 与上面的命名空间一起组成查询标识</span></span><br><span class="line"><span class="comment">    resultType  查询结果对应的实体类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">        # 要执行的sql语句</span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="4-MyBatis的增删改查操作"><a href="#4-MyBatis的增删改查操作" class="headerlink" title="4. MyBatis的增删改查操作"></a>4. MyBatis的增删改查操作</h1><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">插入数据</button></li><li class="tab"><button type="button" data-href="#1-2">删除数据</button></li><li class="tab"><button type="button" data-href="#1-3">修改数据</button></li><li class="tab"><button type="button" data-href="#1-4">查找数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><ol><li>写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into user values(#{id},#{username},#{password})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写插入实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">"userMapper.add"</span>, user);</span><br><span class="line">System.out.println(insert);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>插入操作注意问题</strong></p><ol><li>插入语句使用insert标签</li><li>在映射文件中使用parameterType属性指定要插入的数据类型</li><li>Sql语句中使用#{实体属性名}方式引用实体中的属性值</li><li>插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象);</li><li>插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务， 即sqlSession.commit()</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写删除数据的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> sqlSession.delete(<span class="string">"userMapper.delete"</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(delete);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>删除操作注意问题</p><ol><li>删除语句使用delete标签</li><li>Sql语句中使用#{任意字符串}方式引用传递的单个参数</li><li>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object)</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    update user set username=#{username},password=#{password} where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写修改实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> sqlSession.update(<span class="string">"userMapper.update"</span>, user);</span><br><span class="line">System.out.println(update);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改操作注意问题</p><ol><li>修改语句使用update标签</li><li>修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><ol><li>编写UserMapper映射文件</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="2"><li>编写修改实体User的代码</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="5-MyBatis核心配置文件概述"><a href="#5-MyBatis核心配置文件概述" class="headerlink" title="5. MyBatis核心配置文件概述"></a>5. MyBatis核心配置文件概述</h1><h2 id="5-1-MyBatis核心配置文件层级关系"><a href="#5-1-MyBatis核心配置文件层级关系" class="headerlink" title="5.1 MyBatis核心配置文件层级关系"></a>5.1 MyBatis核心配置文件层级关系</h2><ul><li>configuration 配置<ul><li><strong>properties 属性</strong></li><li><strong>settiongs 设置</strong></li><li><strong>typeAliases 类型别名</strong></li><li><strong>typeHandlers 类型处理器</strong></li><li><strong>objectFactory 对象工厂</strong></li><li><strong>plugins 插件</strong></li><li><strong>environments 环境</strong><ul><li><em>environment 环境变量</em><ul><li><em>transactionManager 事务管理器</em></li><li><em>dataSource 数据源</em></li></ul></li></ul></li><li><strong>databaseldProvider 数据库厂商标识</strong></li><li><strong>mappers 映射器</strong></li></ul></li></ul><h2 id="5-2-MyBatis常用配置解析"><a href="#5-2-MyBatis常用配置解析" class="headerlink" title="5.2 MyBatis常用配置解析"></a>5.2 MyBatis常用配置解析</h2><blockquote><ol><li><h3 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h3>数据库环境的配置，支持多环境配置</li></ol></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定默认的环境名称--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--指定当前环境的名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--指定事务类型的JDBC--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--指定当前数据类型是连接池--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--数据源配置的基本参数--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///test"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中，事务管理器（transactionManager）类型有两种：</p></blockquote><ul><li><p><code>JDBC</code>：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域 </p></li><li><p><code>MANAGED</code>：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE  应用服务器的上下文）</p><p>默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置 为 false 来阻止它默认的关闭行为</p></li></ul><blockquote><p>其中，数据源（dataSource）类型有三种：</p></blockquote><ul><li><code>UNPOOLED</code>：这个数据源的实现只是每次被请求时打开和关闭连接</li><li><code>POOLED</code>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来</li><li><code> JNDI</code>：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置 一个 JNDI 上下文的引用</li></ul><blockquote><ol start="2"><li><h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3></li></ol></blockquote><p>该标签的作用是加载映射的，加载方式有如下几种：</p><ul><li>使用相对于类路径的资源引用，例如：&lt; mapper resource=”org/mybatis/builder/AuthorMapper.xml”/&gt;</li><li>使用完全限定资源定位符（URL），例如：&lt; mapper url=”file:///var/mappers/AuthorMapper.xml”/&gt;</li><li>使用映射器接口实现类的完全限定类名，例如：&lt; mapper class=”org.mybatis.builder.AuthorMapper”/&gt;</li><li>将包内的映射器接口实现全部注册为映射器，例如：&lt; package name=”org.mybatis.builder”/&gt;</li></ul><blockquote><ol start="3"><li><h3 id="Properties标签"><a href="#Properties标签" class="headerlink" title="Properties标签"></a>Properties标签</h3></li></ol></blockquote><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><ol start="4"><li>typeAliases标签</li></ol></blockquote><p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.jyw.pojo.User"</span>&gt;</span></span><br><span class="line">select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>配置typeAliases,为cn.jyw.pojo.User定义别名为user</strong> </p><p><strong>typeAliases 放在核心配置文件中且位置在映射之前</strong></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.jyw.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面我们是自定义的别名，mybatis框架已经为我们设置好的一些常用的类型的别名</p></blockquote><table><thead><tr><th align="center">别名</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">int</td><td align="center">Interger</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">… …</td><td align="center">… …</td></tr></tbody></table><h2 id="5-3-知识小结"><a href="#5-3-知识小结" class="headerlink" title="5.3 知识小结"></a>5.3 知识小结</h2><blockquote><ol><li><p>properties标签：该标签可以加载外部的properties文件</p><p>&lt; properties resource=”jdbc.properties”/&gt;</p></li><li><p>typeAliases标签：设置类型别名 </p><p><strong>typeAliases 放在核心配置文件中且位置在映射之前</strong></p><p>&lt; typeAlias type=”cn.jyw.pojo.User” alias=”user”&gt;</p></li><li><p>mappers标签：加载映射配置</p><p>&lt; mapper resource=”cn.jyw/mapper.xml”/&gt;</p></li><li><p>environments标签：数据源环境配置标签</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--池子--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></blockquote><h1 id="6-MyBatis的相应API"><a href="#6-MyBatis的相应API" class="headerlink" title="6. MyBatis的相应API"></a>6. MyBatis的相应API</h1><h2 id="6-1-SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#6-1-SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="6.1 SqlSession工厂构建器SqlSessionFactoryBuilder"></a>6.1 SqlSession工厂构建器SqlSessionFactoryBuilder</h2><p>常用API：<code>SqlSessionFactory build(InputStream inputStream)</code></p><p>通过加载mybatis的核心文件的输入流的形式构建一个<strong>SqlSessionFactory</strong>对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"org/mybatis/builder/mybatis-config.xml"</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(inputStream);</span><br></pre></td></tr></tbody></table></figure><p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中</p><p>Resources 类帮助你从类路径下、文件系统或 一个 web URL 中加载资源文件。</p><h2 id="6-2-SqlSession工厂对象SqlSessionFactory"><a href="#6-2-SqlSession工厂对象SqlSessionFactory" class="headerlink" title="6.2 SqlSession工厂对象SqlSessionFactory"></a>6.2 SqlSession工厂对象SqlSessionFactory</h2><p>SqlSessionFactory 有多个个方法创建 SqlSession 实例。常用的有如下两个：</p><table><thead><tr><th align="center">方法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">openSession()</td><td align="center">会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提 交该事务，更新操作数据才会持久化到数据库中</td></tr><tr><td align="center">openSession(boolean autoCommit)</td><td align="center">参数为是否自动提交，如果设置为true，那么不需要手动提交事务</td></tr></tbody></table><h2 id="6-3-SqlSession会话对象"><a href="#6-3-SqlSession会话对象" class="headerlink" title="6.3 SqlSession会话对象"></a>6.3 SqlSession会话对象</h2><p>SqlSession 实例在 MyBatis 中是非常强大的一个类</p><p>在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法</p><blockquote><p>执行语句的方法主要有：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line">&lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>操作事务的方法主要有：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(五) JdbcTemplate基本使用与事务控制</title>
      <link href="/spring-wu-jdbctemplate/"/>
      <url>/spring-wu-jdbctemplate/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-JdbcTemplate基本使用"><a href="#1-Spring-JdbcTemplate基本使用" class="headerlink" title="1. Spring JdbcTemplate基本使用"></a>1. Spring JdbcTemplate基本使用</h1><h2 id="1-1-JdbcTemplate概述"><a href="#1-1-JdbcTemplate概述" class="headerlink" title="1.1 JdbcTemplate概述"></a>1.1 JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始繁琐的<strong>Jdbc API对象的简单封装</strong>。spring框架为我们提供了很多的操作模板类</p><p>例如：操作关系型数据的<strong>JdbcTemplate</strong>和<strong>HibernateTemplate</strong>，操作nosql数据库的RedisTemplate操 作消息队列的JmsTemplate等等。</p><h2 id="1-2-JdbcTemplate开发步骤-x2F-快速入门"><a href="#1-2-JdbcTemplate开发步骤-x2F-快速入门" class="headerlink" title="1.2 JdbcTemplate开发步骤/快速入门"></a>1.2 JdbcTemplate开发步骤/快速入门</h2><h3 id="1-2-1-导入spring-jdbc和spring-tx坐标"><a href="#1-2-1-导入spring-jdbc和spring-tx坐标" class="headerlink" title="1.2.1 导入spring-jdbc和spring-tx坐标"></a>1.2.1 导入spring-jdbc和spring-tx坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-2-创建数据库表和实体"><a href="#1-2-2-创建数据库表和实体" class="headerlink" title="1.2.2 创建数据库表和实体"></a>1.2.2 创建数据库表和实体</h3><p>运行SQL脚本 和 Generate POJOs.groovy即可</p><h3 id="1-2-3-创建JdbcTemplate对象"><a href="#1-2-3-创建JdbcTemplate对象" class="headerlink" title="1.2.3 创建JdbcTemplate对象"></a>1.2.3 创建JdbcTemplate对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建数据源对象</span></span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//2、创建JdbcTemplate对象</span></span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line"><span class="comment">//3、设置数据源给JdbcTemplate</span></span><br><span class="line">jdbcTemplate.setDataSource(dataSource);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-4执行数据库操作"><a href="#1-2-4执行数据库操作" class="headerlink" title="1.2.4执行数据库操作"></a>1.2.4执行数据库操作</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into account values(?,?)"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"user3"</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-Spring产生JdbcTemplate对象"><a href="#1-3-Spring产生JdbcTemplate对象" class="headerlink" title="1.3 Spring产生JdbcTemplate对象"></a>1.3 Spring产生JdbcTemplate对象</h2><blockquote><p>我们可以将JdbcTemplate的创建权交给Spring</p><p>将数据源DataSource的创建权也交给Spring</p><p><strong>注意</strong>:<strong>applicationContext.xml加载jdbc.properties配置文件获得连接信息时别忘了   引入context命名空间和约束路径</strong></p><p>在Spring容器内部将 数据源DataSource注入到JdbcTemplate模版对象中，配置如下：</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jidbc模板对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> app.getBean(JdbcTemplate.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into account values(?,?)"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">"user4"</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-JdbcTemplate的常用操作"><a href="#1-4-JdbcTemplate的常用操作" class="headerlink" title="1.4 JdbcTemplate的常用操作"></a>1.4 JdbcTemplate的常用操作</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">update(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-2">queryForMap(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-3">queryForList(sql,?的值)</button></li><li class="tab"><button type="button" data-href="#1-4">query(sql,query的参数)</button></li><li class="tab"><button type="button" data-href="#1-5">queryForObject</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>执行DML语句。增、删、改语句</p><ol><li><p>修改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"update emp set salary = 10000 where id = 1001"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql)</span><br></pre></td></tr></tbody></table></figure></li><li><p>增加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>, <span class="string">"郭靖"</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"delete from emp where id = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>查询结果将结果集封装为map集合</p><p>将列名作为 key，将值作为value</p><p>将这条记录封装为一个map 集合</p><blockquote><p><strong>注意：这个方法查询的结果集长度只能是1</strong></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp where id = ? or id = ?"</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>查询结果将结果集封装为list集合</p><blockquote><p>注意：将每一条记录封装为一个Map集合，再将 Map集合装载到List集合中</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>查询结果，将结果封装为JavaBean对象 封装给对象</p><p>用封装类 不然 数值类型 不能被赋null</p></blockquote><ol><li><p>new BeanPropertyRowMapper&lt;类型&gt;(类型. class)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line"><span class="keyword">for</span> (Emp emp : list) { System.out.println(emp); }</span><br></pre></td></tr></tbody></table></figure></li><li><p>new RowMapper&lt;类型&gt;</p><blockquote><p>我们使用BeanPropertyRowMapper实现类</p><p>可 以完成数据到JavaBean的自动封装</p><p>不推荐)手动 设置 要接收的值的set与get</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from emp"</span>;</span><br><span class="line">List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span></span><br><span class="line"><span class="title class_">RowMapper</span>&lt;Emp&gt;() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> i)</span> <span class="keyword">throws</span></span><br><span class="line">SQLException {</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">emp.setId(id); </span><br><span class="line">    emp.setEname(ename);</span><br><span class="line"><span class="keyword">return</span> emp; }</span><br><span class="line">}</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><ol><li><p>聚合函数的查询 查询有多少记录</p><blockquote><p>还可以用主键代替要用主键</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select count(*) from emp"</span>; </span><br><span class="line"><span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> template.queryForObject(sql,Long.class);</span><br></pre></td></tr></tbody></table></figure></li><li><p>返回对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(</span><br><span class="line">    sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);</span><br></pre></td></tr></tbody></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-事务控制"><a href="#2-事务控制" class="headerlink" title="2. 事务控制"></a>2. 事务控制</h1><h2 id="2-1-编程式事务控制相关对象"><a href="#2-1-编程式事务控制相关对象" class="headerlink" title="2.1 编程式事务控制相关对象"></a>2.1 编程式事务控制相关对象</h2><h3 id="2-1-1-PlatformTransactionManager-事务管理器"><a href="#2-1-1-PlatformTransactionManager-事务管理器" class="headerlink" title="2.1.1 PlatformTransactionManager 事务管理器"></a>2.1.1 PlatformTransactionManager 事务管理器</h3><p>PlatformTransactionManager 接口是 spring 的事务管理器</p><p>它里面提供了我们常用的操作事务的方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">TransactionStatus  getTransaction(TransactionDefination defination)</td><td align="center">获取事务的状态信息</td></tr><tr><td align="center">void commit(TransactionStatus status)</td><td align="center">提交事务</td></tr><tr><td align="center">void rollback(TransactionStatus status)</td><td align="center">回滚事务</td></tr></tbody></table><blockquote><p>注意： </p><p>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类<br>例如：Dao 层技术是jdbc  或 mybatis 时：</p><p>org.springframework.jdbc.datasource.DataSourceTransactionManager </p><p>Dao 层技术是hibernate时：</p><p>org.springframework.orm.hibernate5.HibernateTransactionManager</p></blockquote><h3 id="2-1-2-TransactionDefinition-事务的定义信息对象"><a href="#2-1-2-TransactionDefinition-事务的定义信息对象" class="headerlink" title="2.1.2 TransactionDefinition 事务的定义信息对象"></a>2.1.2 TransactionDefinition 事务的定义信息对象</h3><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int getIsolationLevel()</td><td align="center">获得事务的隔离级别</td></tr><tr><td align="center">int getPropogationBehavior()</td><td align="center">获得事务的传播行为</td></tr><tr><td align="center">int getTimeout()</td><td align="center">获得超时时间</td></tr><tr><td align="center">boolean isReadOnly()</td><td align="center">是否只读</td></tr></tbody></table><blockquote><p><strong>事务隔离级别</strong></p></blockquote><blockquote><p><strong>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读</strong></p></blockquote><p>数据库是要被广大客户所共享访问的，那么在数据库操作过程中很可能出现以下几种不确定情况。</p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">更新丢失(Lost update)</button></li><li class="tab"><button type="button" data-href="#1-2">脏读（Dirty reads）</button></li><li class="tab"><button type="button" data-href="#1-3">不可重复读（Non-repeatable Reads）</button></li><li class="tab"><button type="button" data-href="#1-4">幻读（Phantom Reads）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><blockquote><p>两个事务都同时更新一行数据，一个事务对数据的更新把另一个事务对数据的更新覆盖了</p></blockquote><p>比如 CMS系统中，两个同时打开一篇文章进行修改，一个人先保存，另一个人后保存，后保存的就覆盖了先保存的那个人的内容，这就造成更新丢失</p><p>这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来</p><p>在并发事务处理带来的问题中，“更新丢失”通常应该是完全避免的</p><p>但防止更新丢失，并不能单靠数据库事务控制器来解决，需要应用程序对要更新的数据加必要的锁来解决，因此，防止更新丢失应该是应用的责任。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><blockquote><p>一个事务读取到了另一个事务未提交的数据操作结果</p></blockquote><p>这是相当危险的，因为很可能所有的操作都被回滚。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><blockquote><p>一个事务对同一行数据重复读取两次，但是却得到了不同的结果</p></blockquote><p>比如事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时得到与前一次不同的值。又叫虚读。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><blockquote><p>事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据或者缺少了第一次查询中出现的数据（这里并不要求两次查询的SQL语句相同）</p></blockquote><p>这是因为在两次查询过程中有另外一个事务插入数据造成的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>不可重复读的重点是修改某个记录字段，幻读的重点在于新增或者删除记录。<br>对于前者, 只需要锁住满足条件的记录。对于后者, 要锁住满足条件及其相近的记录。</p><p>“脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</p><table><thead><tr><th align="center">隔离级别</th><th align="center">读数据一致性</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">ISOLATION_DEFAULT(默认)</td><td align="center">默认</td><td align="center">默认</td><td align="center">默认</td><td align="center">默认</td></tr><tr><td align="center">ISOLATION_READ_UNCOMMITTED(未提交读)</td><td align="center">最低级别,只能保证不读取物理上损坏的数据</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_READ_COMMITTED(已提交读)</td><td align="center">语句级</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_REPEATABLE_READ(可重复读)</td><td align="center">事务级</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">ISOLATION_SERIALIZABLE(可序列化)</td><td align="center">最高级别,事务级</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">默认(Default)</button></li><li class="tab"><button type="button" data-href="#1-2">未提交读取（Read Uncommitted）</button></li><li class="tab"><button type="button" data-href="#1-3">已提交读取（Read Committed）</button></li><li class="tab"><button type="button" data-href="#1-4">可重复读取（Repeatable Read）</button></li><li class="tab"><button type="button" data-href="#1-5">序列化（Serializable）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Spring中一个标识：ISOLATION_DEFAULT</p><p>表示使用后端数据库默认的隔离级别</p><p>大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle</p><p>MySQL的默认隔离级别是Repeatable read</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>Spring标识：ISOLATION_READ_UNCOMMITTED</p><p>允许脏读取，但不允许更新丢失</p><p>如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。</p><p>该隔离级别可以通过“排他写锁”实现。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>Spring标识：ISOLATION_READ_COMMITTED</p><p>允许不可重复读取，但不允许脏读取</p><p>这可以通过“瞬间共享读锁”和“排他写锁”实现</p><p>读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><p>Spring标识：ISOLATION_REPEATABLE_READ</p><p>禁止不可重复读取和脏读取，但是有时可能出现幻读数据</p><p>这可以通过“共享读锁”和“排他写锁”实现</p><p>读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><p>Spring标识：ISOLATION_SERIALIZABLE</p><p>提供严格的事务隔离</p><p>它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行</p><p>仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大</p><p>对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed</p><p>它能够避免脏读取，而且具有较好的并发性能</p><p>尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制</p></blockquote><blockquote><p><strong>事务传播行为</strong></p></blockquote><table><thead><tr><th align="center">名词</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>REQUIRED</code></td><td align="center"><code>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值)</code></td></tr><tr><td align="center"><code>SUPPORTS</code></td><td align="center"><code>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</code></td></tr><tr><td align="center">MANDATORY</td><td align="center">使用当前的事务，如果当前没有事务，就抛出异常</td></tr><tr><td align="center">REQUERS_NEW</td><td align="center">新建事务，如果当前在事务中，把当前事务挂起</td></tr><tr><td align="center">NOT_SUPPORTED</td><td align="center">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td></tr><tr><td align="center">NEVER</td><td align="center">以非事务方式运行，如果当前存在事务，抛出异常</td></tr><tr><td align="center">NESTED</td><td align="center">如果当前存在事务，则在嵌套事务内执行如果当前没有事务，则执行 REQUIRED 类似的操作</td></tr><tr><td align="center">超时时间</td><td align="center">默认值是-1，没有超时限制。如果有，以秒为单位进行设置</td></tr><tr><td align="center">是否只读</td><td align="center">建议查询时设置为只读</td></tr></tbody></table><h3 id="2-1-3-TransactionStatus-事务具体的运行状态"><a href="#2-1-3-TransactionStatus-事务具体的运行状态" class="headerlink" title="2.1.3 TransactionStatus  事务具体的运行状态"></a>2.1.3 TransactionStatus  事务具体的运行状态</h3><blockquote><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下</p></blockquote><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean hasSavepoint()</td><td align="center">是否存储回滚点</td></tr><tr><td align="center">boolean isCompleted()</td><td align="center">事务是否完成</td></tr><tr><td align="center">boolean isNewTransaction()</td><td align="center">是否是新事务</td></tr><tr><td align="center">boolean isRollbackOnly()</td><td align="center">事务是否回滚</td></tr></tbody></table><h2 id="2-2-基于-XML-的声明式事务控制"><a href="#2-2-基于-XML-的声明式事务控制" class="headerlink" title="2.2 基于 XML 的声明式事务控制"></a>2.2 基于 XML 的声明式事务控制</h2><h3 id="2-2-1-什么是声明式事务控"><a href="#2-2-1-什么是声明式事务控" class="headerlink" title="2.2.1 什么是声明式事务控"></a>2.2.1 什么是声明式事务控</h3><p>Spring 的声明式事务顾名思义就是采用<code>声明的方式来处理事务</code></p><p>这里所说的声明，就是指在配置文件中声明 ，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务</p><blockquote><p>声明式事务处理的作用</p></blockquote><ul><li><p>事务管理不侵入开发的组件</p><p>具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话， 也只需要在定义文件中重新配置即可 </p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译 ，这样维护起来极其方便</p></li></ul><blockquote><p>注意：Spring 声明式事务控制底层就是AOP</p></blockquote><h3 id="2-2-2-声明式事务控制的实现"><a href="#2-2-2-声明式事务控制的实现" class="headerlink" title="2.2.2 声明式事务控制的实现"></a>2.2.2 声明式事务控制的实现</h3><p>声明式事务控制明确事项：</p><ul><li>谁是切点？</li><li>谁是通知？</li><li>配置切面？</li></ul><ol><li><p>引入tx命名空间</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop="http://www.springframework.org/schema/tx"</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置事务增强</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置事务的信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中， &lt; tx:method &gt;代表切点方法的事务参数的配置，例如:</p><blockquote><p>&lt;tx:method name=”transfer” isolation=”REPEATABLE_READ” propagation=”REQUIRED” timeout=”-1” read-only=”false”/&gt;</p></blockquote><ul><li>name：切点方法名称 </li><li>isolation:事务的隔离级别</li><li>propogation：事务的传播行为</li><li>timeout：超时时间</li><li>read-only：是否只读</li></ul></li><li><p>配置事务 AOP 织入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务的aop增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">cn.jyw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="2-3-使用注解配置声明式事务控制"><a href="#2-3-使用注解配置声明式事务控制" class="headerlink" title="2.3 使用注解配置声明式事务控制"></a>2.3 使用注解配置声明式事务控制</h2><h3 id="2-3-1-使用注解配置声明式事务控制"><a href="#2-3-1-使用注解配置声明式事务控制" class="headerlink" title="2.3.1 使用注解配置声明式事务控制"></a>2.3.1 使用注解配置声明式事务控制</h3><ol><li><p>编写 AccoutDao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository("accountDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(String outMan, <span class="type">double</span> money)</span> {</span><br><span class="line">    jdbcTemplate.update(<span class="string">"update account set money=money-? where name=?"</span>,money,outMan);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">(String inMan, <span class="type">double</span> money)</span> {</span><br><span class="line">    jdbcTemplate.update(<span class="string">"update account set money=money+? where name=?"</span>,money,inMan);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写 AccoutService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("accountService")</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> {</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写 applicationContext.xml 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--&gt;</span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="2-3-2-注解配置声明式事务控制解析"><a href="#2-3-2-注解配置声明式事务控制解析" class="headerlink" title="2.3.2 注解配置声明式事务控制解析"></a>2.3.2 注解配置声明式事务控制解析</h3><ol><li>使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离 级别、传播行为等</li><li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置</li><li>使用在方法上，不同的方法可以采用不同的事务参数配置</li><li>Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(四) 面向切面编程AOP</title>
      <link href="/spring-si-mian-xiang-qie-mian-bian-cheng-aop/"/>
      <url>/spring-si-mian-xiang-qie-mian-bian-cheng-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-的-AOP-简介"><a href="#1-Spring-的-AOP-简介" class="headerlink" title="1. Spring 的 AOP 简介"></a>1. Spring 的 AOP 简介</h1><h2 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h2><p>AOP 为 <em><strong>A</strong></em>spect <em><strong>O</strong></em>riented <em><strong>P</strong></em>rogramming 的缩写，意思为面向切面编程，<strong>是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</strong></p><p> <strong>AOP 是 OOP 的延续</strong>，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍 生范型。</p><blockquote><p><strong>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</strong></p></blockquote><p>在应用 AOP 编程时，仍然需要定义公共功能，但可以明确的定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类， 这样一来横切关注点就被模块化到特殊的对象(切面)里</p><h2 id="1-2-AOP-的作用及其优势"><a href="#1-2-AOP-的作用及其优势" class="headerlink" title="1.2 AOP 的作用及其优势"></a>1.2 AOP 的作用及其优势</h2><blockquote><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强 </p></blockquote><blockquote><p>优势：每个切面位于一个位置，代码不分散， 减少重复代码，提高开发效率，并且便于维护和升级，业务模块更简洁, 只包含核心业务代码</p></blockquote><h2 id="1-3-AOP-的底层实现"><a href="#1-3-AOP-的底层实现" class="headerlink" title="1.3 AOP 的底层实现"></a>1.3 AOP 的底层实现</h2><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。</p><p>在运行期间，Spring通过动态代理技术动态 的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强</p><h2 id="1-4-AOP-的动态代理技术"><a href="#1-4-AOP-的动态代理技术" class="headerlink" title="1.4 AOP 的动态代理技术"></a>1.4 AOP 的动态代理技术</h2><p>常用的动态代理技术 </p><ul><li><blockquote><p>JDK 代理 : 基于接口的动态代理技术 </p></blockquote><p>要求:   </p><ol><li><p>使用反射包下的 Proxy类及InvocationHandler接口</p></li><li><p>目标类必须要实现接口，代理类同样也要使用相同的接口</p></li><li><p>使用场合:struts拦截器，spring的AOP使用的都是jdk代理</p></li></ol></li><li><blockquote><p>cglib 代理：基于父类的动态代理技术</p></blockquote><p>code Generation lib(高性能开源的代码生成包，它采用非常底层的字节码技术，在程序执行期间对指定的目标类生成一个子类，并对子类进行增强)</p><p>它使用的底层框架是ASM（java字节码生成小框架）</p><p>要求：</p><ol><li><p>目标类不用实现任何接口，也可以实现接口</p></li><li><p>目标类不能被final 修饰，因为代理类是目标类的子类</p></li></ol><p>​       使用场合：hibernate中的session.load()得到的就是cglib的代理对象</p><ol start="3"><li>spring中也有使用</li></ol></li></ul><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/AOP%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="AOP 的动态代理技术示意图"></p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">JDK 的动态代理</button></li><li class="tab"><button type="button" data-href="#1-2">cglib 的动态代理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>目标类接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>目标类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态代理代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TargetInterface target=<span class="keyword">new</span> <span class="title class_">Target</span>();<span class="comment">//创建目标对象</span></span><br><span class="line">        <span class="comment">//创建代理对象 返回值就是动态生成的代理对象 目标对象和代理对象同级故都用多态来接收</span></span><br><span class="line">        <span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),<span class="comment">//目标对象类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),<span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">                    <span class="comment">//调用代理对象的任何方法,实质执行的哦都是invoke方法</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                            <span class="keyword">throws</span> Throwable {</span><br><span class="line">                        System.out.println(<span class="string">"前置增强代码..."</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);<span class="comment">//执行目标方法</span></span><br><span class="line">                        System.out.println(<span class="string">"后置增强代码..."</span>);</span><br><span class="line">                        <span class="keyword">return</span> invoke;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//调用代理对象的方法测试</span></span><br><span class="line">        proxy.method();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>目标类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态代理代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>(); <span class="comment">//创建增强器</span></span><br><span class="line">enhancer.setSuperclass(Target.class); <span class="comment">//设置父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() { <span class="comment">//设置回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects,</span></span><br><span class="line"><span class="params">                            MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(<span class="string">"前置代码增强...."</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, objects);</span><br><span class="line">        System.out.println(<span class="string">"后置代码增强...."</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="comment">//创建代理对象  基于父的代理对象 用子来接</span></span><br><span class="line"><span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) enhancer.create();</span><br><span class="line">proxy.method();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5AOP-相关概念"><a href="#1-5AOP-相关概念" class="headerlink" title="1.5AOP 相关概念"></a>1.5AOP 相关概念</h2><blockquote><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强</p></blockquote><p> 在正式讲解 AOP 的操作之前，我们必须理解 AOP 的<em><strong>相关术语</strong></em>，常用的术语如下：</p><ul><li>Target（目标对象）：代理的目标对象</li><li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li><li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方 法类型的连接点</li><li><code>Pointcut</code>（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li><li><code>Advice</code>（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li><li><code>Aspect</code>（切面）：是切入点和通知（引介）的结合</li><li><code>Weaving</code>（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而 AspectJ采用编译期织入和类装载期织入</li></ul><h2 id="1-6-AOP-开发明确的事项"><a href="#1-6-AOP-开发明确的事项" class="headerlink" title="1.6 AOP 开发明确的事项"></a>1.6 AOP 开发明确的事项</h2><h3 id="1-6-1-需要编写的内容"><a href="#1-6-1-需要编写的内容" class="headerlink" title="1.6.1 需要编写的内容"></a>1.6.1 需要编写的内容</h3><ul><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类，切面类中有通知(增强功能方法) </li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li></ul><h3 id="1-6-2-AOP-技术实现的内容"><a href="#1-6-2-AOP-技术实现的内容" class="headerlink" title="1.6.2 AOP 技术实现的内容"></a>1.6.2 AOP 技术实现的内容</h3><p>Spring 框架监控切入点方法的执行。</p><p>一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的 代理对象</p><p>根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行</p><h3 id="1-6-3-AOP-底层使用哪种代理方式"><a href="#1-6-3-AOP-底层使用哪种代理方式" class="headerlink" title="1.6.3 AOP 底层使用哪种代理方式"></a>1.6.3 AOP 底层使用哪种代理方式</h3><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式</p><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><blockquote><ul><li><p>aop：面向切面编程 </p></li><li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理 </p></li><li><p>aop的重点概念： Pointcut（切入点）：被增强的方法 </p><p>​                                Advice（通知/ 增强）：封装增强业务逻辑的方法</p><p>​                                Aspect（切面）：切点+通知 </p><p>​                                Weaving（织入）：将切点与通知结合的过程 </p></li><li><p>开发明确事项： </p><p>​                        谁是切点（切点表达式配置） </p><p>​                        谁是通知（切面类中的增强方法）</p><p>​                         将切点和通知进行织入配置</p></li></ul></blockquote><h1 id="2-基于-XML-的-AOP-开发"><a href="#2-基于-XML-的-AOP-开发" class="headerlink" title="2. 基于 XML 的 AOP 开发"></a>2. 基于 XML 的 AOP 开发</h1><h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h2><ol><li>导入 AOP 相关坐标 </li><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>将目标类和切面类的对象创建权交给 spring </li><li>在 applicationContext.xml 中配置织入关系</li><li>测试代码</li></ol><h3 id="2-1-1-导入-AOP-相关坐标"><a href="#2-1-1-导入-AOP-相关坐标" class="headerlink" title="2.1.1 导入 AOP 相关坐标"></a>2.1.1 导入 AOP 相关坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-2-创建目标接口和目标类（内部有切点）"><a href="#2-2-2-创建目标接口和目标类（内部有切点）" class="headerlink" title="2.2.2 创建目标接口和目标类（内部有切点）"></a>2.2.2 创建目标接口和目标类（内部有切点）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Target runing..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-3-将目标类和切面类的对象创建权交给-sprin"><a href="#2-1-3-将目标类和切面类的对象创建权交给-sprin" class="headerlink" title="2.1.3 将目标类和切面类的对象创建权交给 sprin"></a>2.1.3 将目标类和切面类的对象创建权交给 sprin</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.Target"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.MyAspect"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-4-在-applicationContext-xml-中配置织入关系"><a href="#2-1-4-在-applicationContext-xml-中配置织入关系" class="headerlink" title="2.1.4 在 applicationContext.xml 中配置织入关系"></a>2.1.4 在 applicationContext.xml 中配置织入关系</h3><blockquote><p>导入aop命名空间</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           </span></span></span><br><span class="line"><span class="string"><span class="tag">"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置切点表达式和前置增强的织入关系</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入,告诉spring框架 哪些方法需要哪写增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面:切点+通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void cn.jyw.aop.aop.Target.save())"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-5-测试代码"><a href="#2-1-5-测试代码" class="headerlink" title="2.1.5 测试代码"></a>2.1.5 测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">        target.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前置增强</span><br><span class="line">Target runing...</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-XML-配置-AOP-详解"><a href="#2-2-XML-配置-AOP-详解" class="headerlink" title="2.2 XML 配置 AOP 详解"></a>2.2 XML 配置 AOP 详解</h2><h3 id="2-2-1-切点表达式的写法"><a href="#2-2-1-切点表达式的写法" class="headerlink" title="2.2.1 切点表达式的写法"></a>2.2.1 切点表达式的写法</h3><p>表达式语法：</p><blockquote><p><strong>execution([修饰符] 返回值类型 包名.类名.方法名(参数)</strong></p></blockquote><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号* 代表任意</li><li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li><li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li></ul><p>例如:</p><blockquote><p>execution(public <strong>void</strong> cn.jyw.aop.Target.method())  //Target类下的 method 没有返回值没有参数</p><p>execution(<strong>void</strong> cn.jyw.aop.Target.*(..))  //Target类下的 任意方法任意参数(void 没有返回值的)</p><p>execution(* cn.jyw.aop.* .*(..)) // aop包下的任意类任意参数</p><p>execution(* cn.jyw.aop..* .*(..)) //aop包下及其子包下任何</p><p>execution(* * ..* .*(..))// 任意</p></blockquote><h3 id="2-2-2-通知的类型"><a href="#2-2-2-通知的类型" class="headerlink" title="2.2.2 通知的类型"></a>2.2.2 通知的类型</h3><p>通知的配置语法：</p><blockquote><p>&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式”&gt;&lt; /aop:通知类型&gt;</p></blockquote><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt; aop:before&gt;</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>&lt; aop:after-returning&gt;</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>&lt; aop:around&gt;</td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>&lt; aop:throwing&gt;</td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>&lt; aop:after&gt;</td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"后置增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//proceeding JoinPoint 正在执行的连接点===切点</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">    System.out.println(<span class="string">"增强前"</span>);</span><br><span class="line">    <span class="comment">//切点方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">"增前后"</span>);</span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"异常抛出增强"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"最终增强"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.Target"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.aop.aop.MyAspect"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置织入,告诉spring框架 哪些方法需要哪写增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面:切点+通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.jyw.aop.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前置增强</span><br><span class="line">增强前</span><br><span class="line">//Target runing...</span><br><span class="line">//增强后</span><br><span class="line">//后置增强</span><br><span class="line">最终增强</span><br><span class="line">异常抛出增强</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-3-切点表达式的抽取"><a href="#2-2-3-切点表达式的抽取" class="headerlink" title="2.2.3 切点表达式的抽取"></a>2.2.3 切点表达式的抽取</h3><blockquote><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽 取后的切点表达式</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.jyw.aop.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-4-知识要点"><a href="#2-2-4-知识要点" class="headerlink" title="2.2.4 知识要点"></a>2.2.4 知识要点</h2><blockquote><p>aop织入的配置</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">“切面类”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">“通知方法名称”</span> <span class="attr">pointcut</span>=<span class="string">“切点表达式</span>"&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</p></blockquote><blockquote><p>切点表达式的写法： execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p></blockquote><h1 id="3-基于注解的-AOP-开发"><a href="#3-基于注解的-AOP-开发" class="headerlink" title="3. 基于注解的 AOP 开发"></a>3. 基于注解的 AOP 开发</h1><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h2><p>基于注解的aop开发步骤：</p><h3 id="3-1-1-创建目标接口和目标类（内部有切点）"><a href="#3-1-1-创建目标接口和目标类（内部有切点）" class="headerlink" title="3.1.1 创建目标接口和目标类（内部有切点）"></a>3.1.1 创建目标接口和目标类（内部有切点）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"Target running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-2-创建切面类（内部有增强方法）"><a href="#3-1-2-创建切面类（内部有增强方法）" class="headerlink" title="3.1.2 创建切面类（内部有增强方法）"></a>3.1.2 创建切面类（内部有增强方法）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-3-将目标类和切面类的对象创建权交给-spring"><a href="#3-1-3-将目标类和切面类的对象创建权交给-spring" class="headerlink" title="3.1.3 将目标类和切面类的对象创建权交给 spring"></a>3.1.3 将目标类和切面类的对象创建权交给 spring</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("target")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"Target running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-4-在切面类中使用注解配置织入关系"><a href="#3-1-4-在切面类中使用注解配置织入关系" class="headerlink" title="3.1.4 在切面类中使用注解配置织入关系"></a>3.1.4 在切面类中使用注解配置织入关系</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="meta">@Before("execution(* cn.jyw.aop.*.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-5-在配置文件中开启组件扫描和-AOP-的自动代理"><a href="#3-1-5-在配置文件中开启组件扫描和-AOP-的自动代理" class="headerlink" title="3.1.5 在配置文件中开启组件扫描和 AOP 的自动代理"></a>3.1.5 在配置文件中开启组件扫描和 AOP 的自动代理</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw.aop"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-6-测试"><a href="#3-1-6-测试" class="headerlink" title="3.1.6 测试"></a>3.1.6 测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    target.method();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><p>测试结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前置代码增强.....</span><br><span class="line">Target running....</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3-2-注解配置-AOP-详解"><a href="#3-2-注解配置-AOP-详解" class="headerlink" title="3.2 注解配置 AOP 详解"></a>3.2 注解配置 AOP 详解</h2><h3 id="3-2-1-注解通知的类型"><a href="#3-2-1-注解通知的类型" class="headerlink" title="3.2.1 注解通知的类型"></a>3.2.1 注解通知的类型</h3><blockquote><p>通知的配置语法：@通知注解(“切点表达式”)</p></blockquote><table><thead><tr><th>名称</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>@Before</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>@AfterReturning</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>@Around</td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>@AfterThrowing</td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>@After</td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h3 id="3-2-2-切点表达式的抽取"><a href="#3-2-2-切点表达式的抽取" class="headerlink" title="3.2.2 切点表达式的抽取"></a>3.2.2 切点表达式的抽取</h3><blockquote><p>同 xml 配置 aop 一样，我们可以将切点表达式抽取</p><p>抽取方式是在切面内定义方法</p><p>在该方法上使用@Pointcut 注解定义切点表达式</p><p>然后在在增强注解中进行引用。具体如下：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("myAspect")</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> {</span><br><span class="line">    <span class="meta">@Before("MyAspect.myPoint()")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"前置代码增强....."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Pointcut("execution(* cn.jyw.aop.*.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPoint</span><span class="params">()</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(三) IoC和DI注解开发</title>
      <link href="/spring-san-ji-yu-zhu-jie-fang-shi-pei-zhi/"/>
      <url>/spring-san-ji-yu-zhu-jie-fang-shi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring配置数据源"><a href="#1-Spring配置数据源" class="headerlink" title="1. Spring配置数据源"></a>1. Spring配置数据源</h1><h2 id="1-1-数据源（连接池）的作用"><a href="#1-1-数据源（连接池）的作用" class="headerlink" title="1.1 数据源（连接池）的作用"></a>1.1 数据源（连接池）的作用</h2><ul><li><p>数据源(连接池)是提高程序性能如出现的</p></li><li><p>事先实例化数据源，初始化部分连接资源</p></li><li><p>使用连接资源时从数据源中获取</p></li><li><p>使用完毕后将连接资源归还给数据源</p></li><li><p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p></li></ul><h2 id="1-2-数据源的开发步骤"><a href="#1-2-数据源的开发步骤" class="headerlink" title="1.2 数据源的开发步骤"></a>1.2 数据源的开发步骤</h2><ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据</li><li>使用数据源获取连接资源和归还连接资源</li></ol><h2 id="1-3-数据源的手动创建"><a href="#1-3-数据源的手动创建" class="headerlink" title="1.3 数据源的手动创建"></a>1.3 数据源的手动创建</h2><ol><li>导入<strong>c3p0</strong>和<strong>druid</strong>的坐标以及导入<strong>mysql</strong>数据库驱动坐标</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- C3P0连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>数据源的手动创建</li></ol><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306"</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>但是这种创建连接池高耦合了 用配置文件来解耦</p></blockquote><ol><li>提取jdbc.properties配置文件</li></ol><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>测试手动创建数据源(加载properties配置文件)</li></ol><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruidProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(rb.getString(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">        druidDataSource.setUrl(rb.getString(<span class="string">"jdbc.url"</span>));</span><br><span class="line">        druidDataSource.setUsername(rb.getString(<span class="string">"jdbc.username"</span>));</span><br><span class="line">        druidDataSource.setPassword(rb.getString(<span class="string">"jdbc.password"</span>));</span><br><span class="line">        <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0ByProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">    <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    dataSource.setDriverClass(rb.getString(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">    dataSource.setJdbcUrl(rb.getString(<span class="string">"jdbc.url"</span>));</span><br><span class="line">    dataSource.setUser(rb.getString(<span class="string">"jdbc.username"</span>));</span><br><span class="line">    dataSource.setPassword(rb.getString(<span class="string">"jdbc.password"</span>));</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-4-Spring配置数据源"><a href="#1-4-Spring配置数据源" class="headerlink" title="1.4 Spring配置数据源"></a>1.4 Spring配置数据源</h2><p>可以将DataSource的创建权交由Spring容器去完成 </p><ul><li>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</li><li>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试Spring容器产生数据源对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试Spring容器产生数据源对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) </span><br><span class="line">applicationContext.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-抽取jdbc配置文件"><a href="#1-5-抽取jdbc配置文件" class="headerlink" title="1.5 抽取jdbc配置文件"></a>1.5 抽取jdbc配置文件</h2><blockquote><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p><p>首先，需要引入context命名空间和约束路径：</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"  //命名空间</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context  </span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd //约束路径</span><br></pre></td></tr></tbody></table></figure>  <div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">创建Druid连接池</button></li><li class="tab"><button type="button" data-href="#1-2">创建C3P0连接池</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context:property-placeholder location="classpath:jdbc.properties"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context:property-placeholder location="classpath:jdbc.properties"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h1><h2 id="2-1-Spring原始注解"><a href="#2-1-Spring原始注解" class="headerlink" title="2.1 Spring原始注解"></a>2.1 Spring原始注解</h2><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率</p><p>所以注解开发是一种趋势，注解代替xml配置 文件可以简化配置，提高开发效率</p><blockquote><p>Spring原始注解主要是替代的配置           </p></blockquote><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>@Component</code></strong></td><td>使用在类上用于实例化Bean</td></tr><tr><td><strong><code>@Controller</code></strong></td><td>使用在web层类上用于实例化Bean</td></tr><tr><td><strong><code>@Service</code></strong></td><td>使用在service层类上用于实例化Bean</td></tr><tr><td><strong><code>@Repository</code></strong></td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td><strong><code>@Autowired</code></strong></td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td><strong><code>@Qualifier</code></strong></td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td><strong><code>@Resource</code></strong></td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td><strong><code>@Value</code></strong></td><td>注入普通属性</td></tr><tr><td><strong><code>@Scope</code></strong></td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><blockquote><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean 需要进行扫描以便识别使用注解配置的类、字段和方法</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.jyw"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 @Compont 或 @Repository 标识UserDaoImpl需要Spring进行实例化</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&lt;bean id="userDao" class="cn.jyw.dao.impl.UserDaoImpl/&gt;</span></span><br><span class="line"><span class="comment">//@Component("userDao")</span></span><br><span class="line"><span class="meta">@Repository("userDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"save running... ..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化 </p><p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&lt;bean id="Service" class="cn.jyw.service.impl.UserServiceImpl"&gt;</span></span><br><span class="line"><span class="comment">//@Component("userService")</span></span><br><span class="line"><span class="meta">@Service("userService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于&lt;property name="userDao" ref="userDao"/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Autowired  //只写@Autowired也可以注入 按照&lt;数据类型&gt;从Spring容器中进行匹配</span></span><br><span class="line">    <span class="comment">//@Qualifier("userDao") 按照id值从容器中进行匹配但是要结合@Autowired一起使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name="userDao")</span> <span class="comment">//相当于@Autowired+@Qualifier</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用注解方式可以不用写 这是配置文件用反射调用set方法进行注入</span></span><br><span class="line">    <span class="comment">/*public void setUserDao(UserDao userDao){</span></span><br><span class="line"><span class="comment">        this.userDao = userDao;</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    userDao.save(); <span class="comment">//  save running... ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Value进行字符串的注入</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository("userDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="meta">@Value("注入普通数据")</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="meta">@Value("${jdbc.driver}")</span> <span class="comment">//从spring容器中找key为jdbc.driver的值 并注入给下面</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(str); <span class="comment">//注入普通数据</span></span><br><span class="line">        System.out.println(driver); <span class="comment">// com.mysqll.jdbc.Driver</span></span><br><span class="line">        System.out.println(<span class="string">"save running... ..."</span>); <span class="comment">//</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@Scope标注Bean的范围</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Scope("prototype")//产生多个对象</span></span><br><span class="line"><span class="meta">@Scope("singleton")</span> <span class="comment">//产生一个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="comment">//此处省略代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p><p>调用有这两个方法的时候就会产生效果</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"初始化方法...."</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>{</span><br><span class="line">System.out.println(<span class="string">"销毁方法....."</span>);</span><br><span class="line">}   </span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-Spring新注解"><a href="#2-2-Spring新注解" class="headerlink" title="2.2 Spring新注解"></a>2.2 Spring新注解</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中的<code>&lt;context:component-scan base-package="cn.jyw"/&gt;</code>一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties 文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><blockquote><p>相当于xml在配置</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//代替&lt;context:component-scan base-package="cn.jyw"/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan("cn.jyw")</span></span><br><span class="line"><span class="comment">//代替&lt;import resource=""&gt;</span></span><br><span class="line"><span class="meta">@Import({DataSourceConfiguration.class})</span> <span class="comment">//多个类是数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCofiguration</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替&lt;context:property-placeholder location="jdbc.properties"/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource("classpath:jdbc.properties")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> {</span><br><span class="line">    <span class="meta">@Value("${jdbc.driver}")</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value("${jdbc.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${jdbc.username}")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value("${jdbc.password}")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("dataSource")</span> <span class="comment">//Spring会将当前方法的返回值以指定名称储存到Spring容器中</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">geDataSource</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");</span></span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringCofiguration.class);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><h1 id="3-Spring集成Junit"><a href="#3-Spring集成Junit" class="headerlink" title="3. Spring集成Junit"></a>3. Spring集成Junit</h1><h2 id="3-1-原始Junit测试Spring的问题"><a href="#3-1-原始Junit测试Spring的问题" class="headerlink" title="3.1 原始Junit测试Spring的问题"></a>3.1 原始Junit测试Spring的问题</h2><blockquote><p>在测试类中，每个测试方法都有以下两行代码：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="type">IAccountService</span> <span class="variable">as</span> <span class="operator">=</span> ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br></pre></td></tr></tbody></table></figure><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉</p><h2 id="3-2-解决思路"><a href="#3-2-解决思路" class="headerlink" title="3.2 解决思路"></a>3.2 解决思路</h2><blockquote><p>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它<br>将需要进行测试Bean直接在测试类中进行注入</p></blockquote><h2 id="3-3-Spring集成Junit步骤"><a href="#3-3-Spring集成Junit步骤" class="headerlink" title="3.3 Spring集成Junit步骤"></a>3.3 Spring集成Junit步骤</h2><ol><li>导入spring集成Junit的坐标</li><li>使用@Runwith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><h2 id="3-4-Spring集成Junit代码实现"><a href="#3-4-Spring集成Junit代码实现" class="headerlink" title="3.4 Spring集成Junit代码实现"></a>3.4 Spring集成Junit代码实现</h2><ol><li>导入spring集成Junit的坐标</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用@Runwith注解替换原来的运行期</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>使用@ContextConfiguration指定配置文件或配置类</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = {"classpath:applicationContext.xml"})</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">}      </span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>使用@Autowired注入需要测试的对象</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>创建测试方法进行测试</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration("classpath:applicationContext.xml")</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = {SpringConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserService</span><span class="params">()</span>{</span><br><span class="line">        userService.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(二) IOC和DI</title>
      <link href="/spring-er-ioc-he-di/"/>
      <url>/spring-er-ioc-he-di/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IOC和DI的基本概念"><a href="#1-IOC和DI的基本概念" class="headerlink" title="1. IOC和DI的基本概念"></a>1. IOC和DI的基本概念</h1><h2 id="1-1-IOC-Inversion-of-Control-控制反转-："><a href="#1-1-IOC-Inversion-of-Control-控制反转-：" class="headerlink" title="1.1 IOC(Inversion of Control 控制反转)："></a>1.1 IOC(Inversion of Control 控制反转)：</h2><ol><li><p>其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。</p></li><li><p>而应用了 IOC 之后，则是容器主动地将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源。</p></li><li><p>这种行为也被称为查找的被动形式。这体现的是一种设计思想，而不是具体的实现。</p></li></ol><h2 id="1-2-DI-Dependency-Injection-依赖注入-—-IOC-的另一种表达方式"><a href="#1-2-DI-Dependency-Injection-依赖注入-—-IOC-的另一种表达方式" class="headerlink" title="1.2 DI(Dependency Injection 依赖注入) — IOC 的另一种表达方式"></a>1.2 DI(Dependency Injection 依赖注入) — IOC 的另一种表达方式</h2><ol><li><p>组件以一些预先定义好的方式(例如: setter 方法)接受来自于容器的资源注入。</p></li><li><p>DI是实现了IOC设计思想的具体行为，spring容器就是通过DI来实现了IOC的设计思想。</p></li><li><p>依赖注入的目的并不是给应用程序带来更多的功能,而是为了提升组件的重用频率,并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制,我们只要通过简单的配置就可指定目标需要的资源,完成自身的业务逻辑,而不需要关心具体的资源来自何处,由谁实现。</p></li></ol><h1 id="2-Spring配置文件"><a href="#2-Spring配置文件" class="headerlink" title="2. Spring配置文件"></a>2. Spring配置文件</h1><h2 id="2-1-Bean标签基本配置"><a href="#2-1-Bean标签基本配置" class="headerlink" title="2.1 Bean标签基本配置"></a>2.1 Bean标签基本配置</h2><p>用于配置<strong>对象交由Spring 来创建</strong>。</p><p>默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p><p>基本属性： id：Bean实例在Spring容器中的唯一标识   class：Bean的全限定名称</p><h2 id="2-2-Bean标签范围配置"><a href="#2-2-Bean标签范围配置" class="headerlink" title="2.2 Bean标签范围配置"></a>2.2 Bean标签范围配置</h2><p>scope：指对象的作用范围，取值如下：</p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认的,单列的</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 request 域中</td></tr><tr><td>session</td><td>WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 session 域中</td></tr><tr><td>global session</td><td>WEB 项目中，应用在 Portlet 环境，如果没有 Portlet 环境那么globalSession 相当 于 session</td></tr></tbody></table><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">singleton</button></li><li class="tab"><button type="button" data-href="#1-2">prototype</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Bean的实例化个数：1个 </p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>Bean的生命周期：</p><ul><li><p>对象创建：当应用加载，创建容器时，对象就被创建了</p></li><li><p>对象运行：只要容器在，对象一直活着</p></li><li><p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p></li></ul><p>示例</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">    System.out.println(userDao2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImp@4abdb505</span><br><span class="line">cn.jyw.impl.UserDaoImp@4abdb505</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>Bean的生命周期：</p><ul><li><p>对象创建：当使用对象时，创建新的对象实例</p></li><li><p>对象运行：只要对象在使用中，就一直活着</p></li><li><p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p></li></ul><p>示例</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">    System.out.println(userDao2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@587d1d39</span><br><span class="line">cn.jyw.impl.UserDaoImpl@58c1670b</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-Bean生命周期配置"><a href="#2-3-Bean生命周期配置" class="headerlink" title="2.3 Bean生命周期配置"></a>2.3 Bean生命周期配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p><em><strong>init-method</strong></em>：指定类中的初始化方法名称</p><p>创建对象后 执行init方法</p></li><li><p><em><strong>destroy-method</strong></em>：指定类中销毁方法名称</p><p>销毁之前执行 destroy方法</p></li></ul><p>ClassPathXmlApplicationContext.close 销毁执行</p><h2 id="2-4-Bean实例化三种方式"><a href="#2-4-Bean实例化三种方式" class="headerlink" title="2.4 Bean实例化三种方式"></a>2.4 Bean实例化三种方式</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">使用无参构造方法实例化</button></li><li class="tab"><button type="button" data-href="#1-2">工厂静态方法实例化</button></li><li class="tab"><button type="button" data-href="#1-3">工厂实例方法实例化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>工厂的静态方法返回Bean实例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> {</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>{</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImp</span>();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@13c27452</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><p>由于工厂是不是静态方法 无法在创建时就使用方法 所以在使用工厂方法前需要先创建工厂</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.factory.StaticFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    System.out.println(userDao1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl对象创建</span><br><span class="line">cn.jyw.impl.UserDaoImpl@13c27452</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-Bean的依赖注入-DI-入门"><a href="#3-Bean的依赖注入-DI-入门" class="headerlink" title="3. Bean的依赖注入(DI)入门"></a>3. Bean的依赖注入(DI)入门</h1><ol><li>创建UserService，UserService 内部在调用 UserDao的save() 方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao)applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将 UserServiceImpl 的创建权交给 Spring</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>从 Spring 容器中获得 UserService 进行操作</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.save();</span><br></pre></td></tr></tbody></table></figure><h2 id="3-1-Bean的依赖注入分析"><a href="#3-1-Bean的依赖注入分析" class="headerlink" title="3.1 Bean的依赖注入分析"></a>3.1 Bean的依赖注入分析</h2><p>​    目前UserService实例和UserDao实例都存在与Spring容器中，当前的做法是在容器外部获得UserService 实例和UserDao实例，然后在程序中进行结合。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90.png" alt="Bean的依赖注入分析"></p><p>​    因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在 Spring容器中，将UserDao设置到UserService内部。</p><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86.png" alt="Bean的依赖注入原理"></p><h2 id="3-2-Bean的依赖注入概念"><a href="#3-2-Bean的依赖注入概念" class="headerlink" title="3.2 Bean的依赖注入概念"></a>3.2 Bean的依赖注入概念</h2><p>依赖注入（<em><strong>Dependency Injection</strong></em>）：它是 Spring 框架核心 IOC 的具体实现。 </p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p><p> IOC 解耦只是降低他们的依赖关系，但不会消除。</p><p>例如：<strong>业务层</strong>仍会<strong>调用持久层</strong>的方法。 </p><p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。 </p><p><strong>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</strong></p><h2 id="3-3-Bean的依赖注入方式"><a href="#3-3-Bean的依赖注入方式" class="headerlink" title="3.3 Bean的依赖注入方式"></a>3.3 Bean的依赖注入方式</h2><ul><li>构造方法</li><li>set方法</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">属性注入(set方法注入)</button></li><li class="tab"><button type="button" data-href="#1-2">构造方法注入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>属性注入是最常用的注入方式，通过 setter方法注入Bean 的属性值或依赖的对象。属性注入使用 <code>&lt;property&gt; </code>元素, 使用 name 属性指定 Bean 的属性名称，value 属性或<code>&lt;value&gt;</code>子节点指定属性值</p><p>在UserServiceImpl中添加setUserDao方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> {</span><br><span class="line"><span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Spring容器调用set方法进行注入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下： 首先，需要引入P命名空间：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span> <span class="attr">p:userDao-ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>通过构造方法注入Bean 的属性值或依赖的对象，它保证了 Bean 实例在实例化后就可以使用。构造器注入在 <code>&lt;constructor-arg&gt;</code> 元素里声明属性, <code>&lt;constructor-arg&gt; </code>中没有 name 属性，可以按索引匹配入参，也可以按类型匹配入参</p><p>创建有参构造</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    pub1ic <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> {</span><br><span class="line">        <span class="built_in">this</span>. userDao = userDao;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">userDao.save();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Spring容器调用有参构造时进行注入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-4-Bean的依赖注入的数据类型"><a href="#3-4-Bean的依赖注入的数据类型" class="headerlink" title="3.4 Bean的依赖注入的数据类型"></a>3.4 Bean的依赖注入的数据类型</h2><div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2-1">普通数据类型注入</button></li><li class="tab"><button type="button" data-href="#2-2">集合数据类型（List）的注入</button></li><li class="tab"><button type="button" data-href="#2-3">集合数据类型（ Map ）的注入</button></li><li class="tab"><button type="button" data-href="#2-4">集合数据类型（Properties）的注入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2-1"><p>可用字符串表示的值，可以通过 <value> 元素标签或 value 属性进行注入</value></p><p>基本数据类型及其封装类、String 等类型都可以采取字面值注入的方式</p><p>若字面值中包含特殊字符（会使用到xml文件中的一些专用字符），可以使用 <code>&lt;![CDATA[]]&gt; </code>把字面值包裹起来</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> {</span><br><span class="line"><span class="built_in">this</span>.company = company;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">System.out.println(company+<span class="string">"==="</span>+age);</span><br><span class="line">System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">value</span>=<span class="string">"哈哈哈哈"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-2"><p>配置 java.util.List 类型的属性, 需要指定 <code>&lt;list&gt;</code> 标签, 在标签里包含一些元素.</p><p>这些标签可以通过 <code>&lt;value&gt; </code>指定简单的常量值, 通过 <code>&lt;ref&gt; </code>指定对其他 Bean 的引用</p><p>通过<code>&lt;bean&gt;</code> 指定内置 Bean 定义. 通过 <code>&lt;null/&gt;</code> 指定空元素. 甚至可以内嵌其他集合。</p><p>数组的定义和 List 一样, 都使用 <code>&lt;list&gt;</code></p><p>配置 java.util.Set 需要使用<code> &lt;set&gt;</code> 标签, 定义元素的方法与 List 一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> {</span><br><span class="line">    <span class="built_in">this</span>.strList = strList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(strList);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"strList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>集合数据类型对象（List）的注入</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> {</span><br><span class="line">    <span class="built_in">this</span>.userList = userList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u1"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u2"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"u1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"u2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-3"><p>Java.util.Map 通过 <code>&lt;map&gt; </code>标签定义, <code>&lt;map&gt;</code> 标签里可以使用多个 <code>&lt;entry&gt;</code> 作为子标签. 每个条目包含一个键和一个值.。</p><p>   必须在 <code>&lt;key&gt;</code> 标签里定义键。</p><p> 因为键和值的类型没有限制, 所以可以自由地为它们指定<code> &lt;value&gt;</code>, <code>&lt;ref&gt;</code>, <code>&lt;bean&gt;</code> 或 <code>&lt;null&gt; </code>元素.。</p><p>   可以将 Map 的键和值作为 <code>&lt;entry&gt; </code>的属性定义: 简单常量使用 key 和 value 来定义; Bean 引用通过 key-ref 和 value-ref 属性定义。</p><p>   使用 <code>&lt;props&gt;</code> 定义 java.util.Properties, 该标签使用多个 <prop> 作为子标签。 每个 <prop> 标签必须定义 key 属性</prop></prop></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> {</span><br><span class="line">    <span class="built_in">this</span>.userMap = userMap;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u1"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u2"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user1"</span> <span class="attr">value-ref</span>=<span class="string">"u1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user2"</span> <span class="attr">value-ref</span>=<span class="string">"u2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-4"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> {</span><br><span class="line">    <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(properties);</span><br><span class="line">    System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p1"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p2"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"p3"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-5-Bean的自动装配"><a href="#3-5-Bean的自动装配" class="headerlink" title="3.5 Bean的自动装配"></a>3.5 Bean的自动装配</h2><p>Spring IOC 容器可以自动装配 Bean。需要做的仅仅是在 <code>&lt;bean&gt;</code>的 autowire 属性里指定自动装配的模式</p><ol><li>byType(根据类型自动装配): 若 IOC 容器中有多个与目标 Bean 类型一致的 Bean. 在这种情况下, Spring 将无法判定哪个 Bean 最合适该属性, 所以不能执行自动装配</li><li>byName(根据名称自动装配): 必须将目标 Bean 的名称和属性名设置的完全相同。</li><li>constructor(通过构造器自动装配): 当 Bean 中存在多个构造器时, 此种自动装配方式将会很复杂. 不推荐使用</li><li>在 Bean 配置文件里设置 autowire 属性进行自动装配将会装配 Bean 的所有属性. 然而, 若只希望装配个别属性时, autowire 属性就不够灵活了</li><li>autowire 属性要么根据类型自动装配, 要么根据名称自动装配, 不能两者兼而有之</li><li>一般情况下，在实际的项目中很少使用自动装配功能，因为和自动装配功能所带来的好处比起来，明确清晰的配置文档更有说服力一些</li></ol><h2 id="3-6-Bean-的作用域"><a href="#3-6-Bean-的作用域" class="headerlink" title="3.6 Bean 的作用域"></a>3.6 Bean 的作用域</h2><ol><li><p>在 Spring 中, 可以在 <code>&lt;bean&gt;</code> 元素的 <code>scope</code> 属性里设置 Bean 的作用域。</p></li><li><p>默认情况下, Spring 只为每个在 IOC 容器里声明的 Bean 创建唯一一个实例</p><p>整个 IOC 容器范围内都能共享该实例，所有后续的 getBean() 调用和 Bean 引用都将返回这个唯一的 Bean 实例</p><p>该作用域被称为 singleton, 它是所有 Bean 的默认作用域。</p></li></ol><h2 id="3-7-使用外部属性文件"><a href="#3-7-使用外部属性文件" class="headerlink" title="3.7 使用外部属性文件"></a>3.7 使用外部属性文件</h2><ol><li><p>在配置文件里配置 Bean 时, 有时需要在 Bean 的配置里混入系统部署的细节信息(例如: 文件路径, 数据源配置信息等)。 而这些部署细节实际上需要和 Bean 配置相分离。</p></li><li><p>可通过 &lt; context:property-placeholder&gt; 元素来加载属性文件（.properties）中的属性值</p></li><li><p>Spring 允许在value属性中使用 ${propName}，以实现属性之间的相互引用</p></li></ol><p>​    &lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt;</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:</span> <span class="attr">property-placeholder</span> <span class="attr">location</span>= <span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">"dataSource"</span> <span class="attr">class</span>= <span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用外部化属性文件的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${user}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${driverclass}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbcurl}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-8-引入其他配置文件（分模块开发）"><a href="#3-8-引入其他配置文件（分模块开发）" class="headerlink" title="3.8 引入其他配置文件（分模块开发）"></a>3.8 引入其他配置文件（分模块开发）</h2><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-xxx.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-9-Bean-的生命周期"><a href="#3-9-Bean-的生命周期" class="headerlink" title="3.9 Bean 的生命周期"></a>3.9 Bean 的生命周期</h2><blockquote><p>Spring IOC容器可以管理Bean的生命周期, Spring 允许在 Bean 生命周期的特定点执行定制的任务。</p></blockquote><blockquote><p>Spring IOC 容器对 Bean 的生命周期进行管理的过程:</p></blockquote><ol><li>通过构造器或工厂方法创建 Bean 实例</li><li>为 Bean 的属性设置值和对其他 Bean 的引用</li><li>调用 Bean 的初始化方法</li><li>Bean 可以使用了</li><li>当容器关闭时, 调用 Bean 的销毁方法</li><li>在Bean的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法</li></ol><blockquote><p>Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：</p></blockquote><ol><li>Bean自身的方法：<br>这个包括了Bean本身调用的方法和通过配置文件中<code>&lt;bean&gt;</code>的init-method和destroy-method指定的方法。</li><li>Bean级生命周期接口方法：　　<br>这个包括了<strong>BeanNameAware</strong>、<strong>BeanFactoryAware</strong>、<strong>InitializingBean</strong>和<strong>DiposableBean</strong>这些接口的方法。</li><li>容器级生命周期接口方法：<br>这个包括了<strong>InstantiationAwareBeanPostProcessor</strong> 和 <strong>BeanPostProcessor</strong> 这两个接口实现，一般称它们的实现类为“后处理器”。</li><li>工厂后处理器接口方法：<br>这个包括了<strong>AspectJWeavingEnabler</strong>, <strong>ConfigurationClassPostProcessor</strong>, <strong>CustomAutowireConfigurer</strong>等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用</li></ol><blockquote><p>创建 Bean 后置处理器</p></blockquote><ol><li><p>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理</p></li><li><p>Bean 后置处理器对 IOC 容器里的所有 Bean 实例逐一处理, 而非单一实例.</p><p>其典型应用是: 检查 Bean 属性的正确性或根据特定的标准更改 Bean 的属性。</p></li><li><p>对Bean 后置处理器而言, 需要实现接口（BeanPostProcessor）</p><p>在初始化方法被调用前后, Spring 将把每个 Bean 实例分别传递给上述接口的以下两个方法:</p><p>Object <em><strong>postProcessAfterInitialization</strong></em> (Object bean,String bname)</p><p>Object <em><strong>postProcessBeforeInitialization</strong></em> (Object bean,String bname)</p></li></ol><blockquote><p>添加 Bean 后置处理器后 Bean 的生命周期<br>Spring IOC 容器对 Bean 的生命周期进行管理的过程:</p></blockquote><ol><li><p>通过构造器或工厂方法创建 Bean 实例;</p></li><li><p>为 Bean 的属性设置值和对其他 Bean 的引用;</p></li><li><p>将Bean例传递给Bean后置处理器的 <em><strong>postProcessBeforeInitialization</strong></em> 方法;</p></li><li><p>调用 Bean 的初始化方法;</p></li><li><p>将Bean实例传递给Bean后置处理器的<em><strong>postProcessAfterInitialization</strong></em>方法;</p></li><li><p>Bean 可以使用了</p></li><li><p>当容器关闭时, 调用 Bean 的销毁方法</p></li></ol><p> 后置处理器主要应用在spring容器的底层，spring容器的原生AOP要使用它实现对Bean的切面编程</p><h2 id="Spring的重点配置"><a href="#Spring的重点配置" class="headerlink" title="Spring的重点配置"></a>Spring的重点配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span>标签</span><br><span class="line">    id属性:在容器中Bean实例的唯一标识，不允许重复</span><br><span class="line">    class属性:要实例化的Bean的全限定名</span><br><span class="line">    scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>标签：属性注入</span><br><span class="line">        name属性：属性名称</span><br><span class="line">        value属性：注入的普通属性值</span><br><span class="line">        ref属性：注入的对象引用值</span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span>&gt;</span>标签:导入其他的Spring的分文件</span><br></pre></td></tr></tbody></table></figure><h1 id="4-Spring相关API"><a href="#4-Spring相关API" class="headerlink" title="4. Spring相关API"></a>4. Spring相关API</h1><h2 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/ClassPathXmlApplicationContext.png" alt="ClassPathXmlApplicationContext"></p><p>Spring 提供了两种类型的 IOC 容器实现：</p><ul><li><p><strong>BeanFactory: IOC</strong> 容器的基本实现，是 Spring 框架的基础设施，面向 Spring 本身</p></li><li><p><strong>ApplicationContext</strong>:供了更多的高级特性. 是 BeanFactory 的子接口，面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory，无论使用何种方式, 配置文件是相同的</p></li></ul><h2 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h2><p><em><strong>applicationContext</strong></em>：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p><ol><li><p><em><strong>ClassPathXmlApplicationContext</strong></em></p><p>它是从类的根路径下加载配置文件 推荐使用这种</p></li><li><p><em><strong>FileSystemXmlApplicationContext</strong></em></p><p>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p></li><li><p><em><strong>AnnotationConfigApplicationContext</strong></em></p><p>当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p></li><li><p><em><strong>ConfigurableApplicationContext</strong></em></p><p>扩展于 ApplicationContext，新增加两个主要方法：refresh() 和 close()， 让 ApplicationContext 具有启动、刷新和关闭上下文的能力</p></li><li><p><em><strong>WebApplicationContext</strong></em></p><p>是专门为**<code>WEB</code>**应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作</p></li></ol><h2 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h2><p>getBean()的源码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。 当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时， 则此方法会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService1</span> <span class="operator">=</span> (UserService) </span><br><span class="line">applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService2</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-Spring的重点API"><a href="#4-4-Spring的重点API" class="headerlink" title="4.4 Spring的重点API"></a>4.4 Spring的重点API</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClasspathXmlApplicationContext</span>(<span class="string">"xml文件"</span>)</span><br><span class="line">app.getBean(<span class="string">"id"</span>)</span><br><span class="line">app.getBean(Class)</span><br></pre></td></tr></tbody></table></figure><p>当容器中某一类型的对象有多个 用不同的id获取</p><p>有一个可以用.class获取</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(一) Spring的入门概念</title>
      <link href="/spring-yi-spring-de-ru-men-gai-nian/"/>
      <url>/spring-yi-spring-de-ru-men-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1. Spring简介"></a>1. Spring简介</h1><h2 id="1-1-Spring是什么"><a href="#1-1-Spring是什么" class="headerlink" title="1.1 Spring是什么"></a>1.1 Spring是什么</h2><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 <em><strong>IOC</strong></em>（Inverse Of Control：<strong>反转控制</strong>）和 <em><strong>AOP</strong></em>（Aspect Oriented Programming：<strong>面向切面编程</strong>）为内核。</p><p> 提供了<strong>展现层 SpringMVC</strong> 和<strong>持久层 Spring JDBCTemplate</strong> 以及<strong>业务层事务管理</strong>等众多的企业级应用技术 ，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p><h2 id="1-2-Spring的优势"><a href="#1-2-Spring的优势" class="headerlink" title="1.2 Spring的优势"></a>1.2 Spring的优势</h2><ol><li>方便解耦，简化开发</li></ol><blockquote><p>通过 Spring 提供的 <strong><strong><strong>IoC</strong></strong></strong>容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度耦合。 用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p></blockquote><ol start="2"><li><em><strong>AOP</strong></em> 编程的支持</li></ol><blockquote><p>通过 Spring的 <em><strong>AOP</strong></em> 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 <em><strong>AOP</strong></em> 轻松实现。</p></blockquote><ol start="3"><li>声明式事务的支持</li></ol><blockquote><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p></blockquote><ol start="4"><li>方便程序的测试</li></ol><blockquote><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p></blockquote><ol start="5"><li>方便集成各种优秀框架</li></ol><blockquote><p>Spring对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的支持。</p></blockquote><ol start="6"><li>降低 JavaEE API 的使用难度</li></ol><blockquote><p>Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p></blockquote><ol start="7"><li>Java 源码是经典学习范例</li></ol><blockquote><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深 造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p></blockquote><h2 id="1-3-Spring的相关描述"><a href="#1-3-Spring的相关描述" class="headerlink" title="1.3 Spring的相关描述"></a>1.3 Spring的相关描述</h2><ol><li><p>轻量级</p><p>Spring 是非侵入性的 - 基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API。</p></li><li><p>依赖注入(DI — dependency injection、IOC)</p></li><li><p>面向切面编程(AOP — aspect oriented programming)</p></li><li><p>容器</p><p>Spring 是一个容器, 因为它包含并且管理应用对象的生命周期。</p></li><li><p>框架</p><p>Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。</p></li><li><p>一站式</p><p>在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库 （实际上 Spring </p><p>自身也提供了展现层的 SpringMVC 和 持久层的 Spring JDBC）。</p></li></ol><h2 id="1-4-Spring的体系结构"><a href="#1-4-Spring的体系结构" class="headerlink" title="1.4 Spring的体系结构"></a>1.4 Spring的体系结构</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Spring的体系结构"></p><h1 id="2-Spring快速入门"><a href="#2-Spring快速入门" class="headerlink" title="2. Spring快速入门"></a>2. Spring快速入门</h1><h2 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h2><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.png" alt="Spring程序开发步骤"></p><ol><li>导入 Spring 开发的基本包坐标</li><li>编写 Dao 接口和实现类</li><li>创建 Spring 核心配置文件</li><li>创建 Spring 核心配置文件 </li><li>使用 Spring 的 API 获得 Bean 实例</li></ol><h2 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">接口</button></li><li class="tab"><button type="button" data-href="#1-2">实现类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> {</span><br><span class="line">System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h2><div class="note info flat"><p>在类路径下（resources）创建applicationContext.xml配置文件</p></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.jyw.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    userDao.save();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Spring的开发步骤"><a href="#Spring的开发步骤" class="headerlink" title="Spring的开发步骤"></a>Spring的开发步骤</h2><ol><li>导入坐标</li><li>创建Bean</li><li>创建applicationContext.xml</li><li>在配置文件中进行配置</li><li>创建ApplicationContext对象getBean</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog美化记录</title>
      <link href="/bolg-mei-hua-ji-lu/"/>
      <url>/bolg-mei-hua-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">添加emoji表情支持（可选的）</button></li><li class="tab"><button type="button" data-href="#test-2">代码高亮</button></li><li class="tab"><button type="button" data-href="#test-3">搜索</button></li><li class="tab"><button type="button" data-href="#test-4">中文链接转拼音（可选的）</button></li><li class="tab"><button type="button" data-href="#test-5">文章字数统计插件 （可选的）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><h3 id="1-添加emoji表情支持（可选的）"><a href="#1-添加emoji表情支持（可选的）" class="headerlink" title="1. 添加emoji表情支持（可选的）"></a>1. 添加emoji表情支持（可选的）</h3><p><strong>本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）转变成会跳跃的emoji表情</strong> <strong>安装命令如下：</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><h3 id="2-代码高亮"><a href="#2-代码高亮" class="headerlink" title="2. 代码高亮"></a>2. 代码高亮</h3><p><strong>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮</strong> <strong>安装命令如下:</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></tbody></table></figure><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'tomorrow'</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></tbody></table></figure><p>当你添加代码块时一定要加上语言的名字不然此功能会无效！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><h3 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3. 搜索"></a>3. 搜索</h3><p><strong>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><h3 id="4-中文链接转拼音（可选的）"><a href="#4-中文链接转拼音（可选的）" class="headerlink" title="4. 中文链接转拼音（可选的）"></a>4. 中文链接转拼音（可选的）</h3><p><strong>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin Hexo</a> 插件使在生成文章时生成中文拼音的永久链接</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: '-' # default: '-'</span><br></pre></td></tr></tbody></table></figure><p>注：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><p><strong>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></tbody></table></figure><p>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordCount:</span><br><span class="line">  enable: false # 将这个值设置为 true 即可.</span><br><span class="line">  postWordCount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalCount: true</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="btn-center"><a class="btn-beautify outline blue larger" href="/blog-mei-hua-yi/" title="详情步骤"><span>详情步骤</span></a></div># 第二次优化<div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">hexo-githubcalendar 插件</button></li><li class="tab"><button type="button" data-href="#test-2">透明特效</button></li><li class="tab"><button type="button" data-href="#test-3">字体样式修改</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><h3 id="1-hexo-githubcalendar-插件"><a href="#1-hexo-githubcalendar-插件" class="headerlink" title="1. hexo-githubcalendar 插件"></a>1. hexo-githubcalendar 插件</h3><p><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/hexo-githubcalendar%E6%8F%92%E4%BB%B6%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA.png" alt="hexo-githubcalendar 插件 效果演示"></p><blockquote><p>NPM 插件安装的部署方法</p></blockquote><blockquote><p>执行 npm 安装操作</p></blockquote><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-githubcalendar</span> <span class="literal">--save</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cnpm i hexo<span class="literal">-githubcalendar</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure><div class="note info flat"><p>注意，一定要加 <code>--save</code>，不然本地预览的时候可能不会显示！！！</p></div><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ice Kano Plus_in</span></span><br><span class="line"><span class="comment"># hexo-githubcalendar 插件 1.0</span></span><br><span class="line"><span class="comment"># Author: Ice Kano</span></span><br><span class="line"><span class="comment"># Modify: Lete乐特 https://zfe.space/post/hexo-githubcalendar.html</span></span><br><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启插件</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">WindAndStill</span> <span class="comment"># 你的 github 或者 gitee 用户名</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">'&lt;div class="recent-post-item" style="width:100%;height:auto;padding:10px;"&gt;&lt;div id="github_loading" style="width:10%;height:100%;margin:0 auto;display: block"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable-background:new 0 0 50 50" xml:space="preserve"&gt;&lt;path fill="#d0d0d0" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z" transform="rotate(275.098 25 25)"&gt;&lt;animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id="github_container"&gt;&lt;/div&gt;&lt;/div&gt;'</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"['#ebedf0', '#cdeefd', '#9bcffc', '#6ab6fa', '#389df8', '#0889f5', '#0672c4', '#055492', '#033354', '#022d48', '#021f30']"</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure><p>更多主题配置请前往：<a href="https://github.com/Zfour/hexo-github-calendar/issues">https://github.com/Zfour/hexo-github-calendar/issues</a><br>也欢迎共享自己的配置和进行修改。</p><p>接下来来简单说明一下配置项的含义：</p><blockquote><p>enable</p></blockquote><p><strong>参数：</strong>true/false<br><strong>含义：</strong>是否开启插件</p><blockquote><p>enable_page</p></blockquote><p><strong>参数：</strong>/<br><strong>含义：</strong>路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</p><blockquote><p>user</p></blockquote><p><strong>参数：</strong>zfour<br><strong>含义：</strong>你的 github 或者 gitee 用户名</p><blockquote><p>layout</p></blockquote><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 gihubcalendar 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><blockquote><p>githubcalendar_html</p></blockquote><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含 loading，和挂载容器</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是墙"</span> <span class="attr">id</span>=<span class="string">"recent-posts"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是画框"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"我是纸"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里通过js挂载githubcalendar，也就是画画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>githubcalendar_html</p></blockquote><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含 loading，和挂载容器</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recent-post-item"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:auto;padding:10px;"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个是画框，顾名思义就是借用文章样式给加个框--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是loading的样式，可自行调整--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"github_loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"width:10%;height:100%;margin:0 auto;display: block"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">viewBox</span>=<span class="string">"0 0 50 50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"enable-background:new 0 0 50 50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xml:space</span>=<span class="string">"preserve"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">"#d0d0d0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">d</span>=<span class="string">"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">transform</span>=<span class="string">"rotate(275.098 25 25)"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateTransform</span></span></span><br><span class="line"><span class="tag">          <span class="attr">attributeType</span>=<span class="string">"xml"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">attributeName</span>=<span class="string">"transform"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"rotate"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">from</span>=<span class="string">"0 25 25"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">to</span>=<span class="string">"360 25 25"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">dur</span>=<span class="string">"0.6s"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是github_containner容器，也就是纸--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"github_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>pc_minheight</p></blockquote><p><strong>参数：</strong>280px<br><strong>含义：</strong>电脑端插件的最小高度，减少加载带来的视觉偏移</p><blockquote><p>mobile_minheight</p></blockquote><p><strong>参数：</strong>0px<br><strong>含义：</strong>手机端插件的最小高度，减少加载带来的视觉偏移</p><blockquote><p>color</p></blockquote><p><strong>参数：</strong>“[‘#ebedf0’, ‘#fdcdec’, ‘#fc9bd9’, ‘#fa6ac5’, ‘#f838b2’, ‘#f5089f’, ‘#c4067e’, ‘#92055e’, ‘#540336’, ‘#48022f’, ‘#30021f’]”<br><strong>含义：</strong>calendar 的主题色</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下色调选择喜欢的一行保留即可。其余注释。—————akilar的糖果色</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">"['#e4dfd7', '#f9f4dc', '#f7e8aa', '#f7e8aa', '#f8df72', '#fcd217', '#fcc515', '#f28e16', '#fb8b05', '#d85916', '#f43e06']"</span> <span class="comment">#橘黄色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f']" #浅紫色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#f0fff4', '#dcffe4', '#bef5cb', '#85e89d', '#34d058', '#28a745', '#22863a', '#176f2c', '#165c26', '#144620']" #翠绿色调</span></span><br><span class="line"><span class="comment"># color: "['#ebedf0', '#f1f8ff', '#dbedff', '#c8e1ff', '#79b8ff', '#2188ff', '#0366d6', '#005cc5', '#044289', '#032f62', '#05264c']" #天青色调</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>api</p></blockquote><p><strong>参数：</strong><a href="https://python-github-calendar-api.vercel.app/api">https://python-github-calendar-api.vercel.app/api</a><br>或 <a href="https://python-gitee-calendar-api.vercel.app/api">https://python-gitee-calendar-api.vercel.app/api</a><br><strong>含义：</strong>这里提供的是公用的 api，仅供日常使用，请不要滥用。如果想搭建自用 api，具体的部署方案可看考 <a href="https://github.com/Zfour/python_github_calendar_api">python_github_calendar_api</a> 及 <a href="https://github.com/Zfour/python_gitee_calendar_api">python_gitee_calendar_api</a> 的文档说明，这里不多加赘述。</p><blockquote><p>calendar_js</p></blockquote><p><strong>参数：</strong><a href="https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</a><br><strong>含义：</strong>jsd 加速的 js，将 github calendar 挂载入容器中<br><strong>目前已知 bug：</strong>在 1.21 适配 retina 屏幕后虽解决了模糊问题，但部分用户的 tooltip 会出现数据错误。降级到 @1.16 使用即可解决。</p><p>plus_style</p><p><strong>参数：</strong>“”<br><strong>含义：</strong>提供可自定义的 style</p><p>如果你是 butterfly 主题，你需要修改用户名即可，如果你想在友链或者个人介绍挂载，你可以在 md 中增加墙 —— 也就是具有某一的 id 的 div。因为是在 md 中所以通过去掉 class 隐藏画框的样式，即可。同时需要调整 <code>enable_page</code> 来限定展示的页面。</p><p>如果你是其他主题用户，你可以尝试使用墙 &gt; 画框 &gt; 画的方式挂载，也可以通过修改主题模板来挂载。如<br><a href="https://imciraos.com/posts/353f0aee/">给萌典主题加上 git-calendar</a> 的方法。</p><blockquote><p>hexo 三连</p></blockquote><p>执行 hexo 三连</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://www.wwru.cn/archives/125" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><h3 id="2-透明特效"><a href="#2-透明特效" class="headerlink" title="2. 透明特效"></a>2. 透明特效</h3><p><strong><img src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/%E8%83%8C%E6%99%AF%E4%B8%BB%E9%A2%98.png" alt="背景主题"></strong></p><blockquote><p>首页部分</p></blockquote><p>把横幅图片<code>top_img</code>与背景图<code>background</code>设置成一样的</p><blockquote><p>页脚部分</p></blockquote><p>在<code>footer.styl</code>（位置直接搜索）里的<code>#footer</code>里</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br></pre></td></tr></tbody></table></figure><p>首先在主题配置文件里全部把这些页面的图片值改为<code>false</code></p><blockquote><p>其他页面头部</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><p>然后在<code>head.styl</code>里把<em><strong>background-color: $light-blue</strong></em>注释</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background-color: $light-blue</span></span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://sady0.com/archives/d6cfcb1a.html" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><h3 id="3-字体样式修改"><a href="#3-字体样式修改" class="headerlink" title="3. 字体样式修改"></a>3. 字体样式修改</h3><ol><li><p>首先需要下载心仪的字体。得到相应的字体文件。为了方便起见，我将其重命名为 <code>Candy.ttf</code>。</p></li><li><p>将下载好的字体包放到本地文件夹下，这里推荐新建一个 <code>fonts</code> 文件夹。例如我是放在 <code>[Blogroot]\themes\butterfly\source\fonts\</code> 目录下。</p></li><li><p>在自定义样式 <code>custom.css</code> 中引入字体包：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>{</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">'Candyhome'</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">'/fonts/Candy.ttf'</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">    <span class="attribute">font-display</span> : swap;</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Candyhome'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更多详情请查看</p></li></ol><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://akilar.top/posts/ebf20e02/" title="大佬的博客"><i class="far fa-hand-point-right"></i><span>大佬的博客</span></a></div><p>1</p><p><strong>更改整体字体</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="想要添加的功能的功能"><a href="#想要添加的功能的功能" class="headerlink" title="想要添加的功能的功能"></a>想要添加的功能的功能</h1><p>封面图片加载自动切换</p><p>图册</p><p>live2d</p><p>以及很多</p><h1 id="先放着以后再写"><a href="#先放着以后再写" class="headerlink" title="先放着以后再写"></a>先放着以后再写</h1>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> blog 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE中上传图片的方式</title>
      <link href="/javaee-zhong-shang-chuan-tu-pian-de-fang-shi/"/>
      <url>/javaee-zhong-shang-chuan-tu-pian-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h1><div class="note info flat"><p>1.要有一个<em><strong>form</strong></em>标签,<em><strong>method=post</strong></em>请求,以及在<em><strong>form</strong></em>标签中使用<em><strong>input type=file</strong></em>添加上传文件</p></div><p>因为传输的带有图片文件 数据会很大 <em><strong>get</strong></em>请求用容量限制 <em><strong>post</strong></em>没有 所以如果需要传输文件就要用<em><strong>post</strong></em>请求</p><div class="note info flat"><p>2.<em><strong>form</strong></em>标签的<em><strong>encType</strong></em>属性必须为<em><strong>multipart/form-data</strong></em></p></div><p>​    在http协议中  请求头中有这样一个信息</p><p>Content-Type: <em><strong>multipart/form-data</strong></em>; <em><strong>boundary</strong></em>=—-WebKitFormBoundarysrd39rxk51BB2BtB</p><p>Content-Type表示提交的数据类型<br>而<em><strong>encType=multipart/form-data</strong></em>表示提交的数据,以多段(每一个表单项一个数据段)的形式进行拼接,然后<strong>以二进制流的形式发送给服务器</strong><br><em><strong>boundary</strong></em> 表示每段数据的分隔符</p><ol><li>表示数据的开始</li><li>每次都由浏览器随机生成</li><li>结束会再生成一个多了两个-的分隔符</li></ol><h1 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h1><p>导入<em><strong>conmons-fileupload.jar</strong></em>  而 这个jar包又依赖于 <em><strong>conmmons-io.jar</strong></em>  所以这两个都要导入</p><div class="note info flat"><p>jar包中常用的类与方法</p></div><p>ServletFileUpload类  , 用于解析上传数据</p><p>Fileltem类，表示每一一个表单项。</p><div class="note info flat"><ul><li>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</li></ul></div><p>​    判断当前上传的数据格式是否是多段的格式。</p><ul><li><p>public List<fileitem> parseRequest(HttpServletRequest request)<br>​    解释上传的文件</fileitem></p></li><li><p>boolean FileItem.isFormField()</p><p>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。<br>true  表示普通类型的表单项</p><p>false 表示上传文件内容</p></li><li><p>String FileItem.getFieldName()<br>获取表单项的name属性值</p></li><li><p>String FileItem. getString( )<br>获取当前表单项的值。</p></li><li><p>String FileItem. getName();<br>获取上传的文件名</p></li><li><p>void FileItem.write( file );<br>将上传的文件写到参数file所指向抽硬盘位置。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Utils </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客标签外挂的写法</title>
      <link href="/bo-ke-biao-qian-wai-gua-de-xie-fa/"/>
      <url>/bo-ke-biao-qian-wai-gua-de-xie-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="标签外挂（Tag-Plugins）"><a href="#标签外挂（Tag-Plugins）" class="headerlink" title="标签外挂（Tag Plugins）"></a>标签外挂（Tag Plugins）</h1><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89" title="本文章来源"><span>本文章来源</span></a><h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">通用设置</button></li><li class="tab"><button type="button" data-href="#test1-2">用法1</button></li><li class="tab"><button type="button" data-href="#test1-3">用法2(自定义icon)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>移植于next主题，并进行修改。</p><p>修改 主题配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><em><strong>icons</strong></em>和<em><strong>light_bg_offset</strong></em>只对用法1生效</p><p><strong>Note</strong> 标签外挂有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="note info simple"><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note simple %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default simple %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary simple %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success simple %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info simple %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning simple %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger simple %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><div class="note info modern"><h2 id="modern"><a href="#modern" class="headerlink" title="modern"></a>modern</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note modern %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default modern %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary modern %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success modern %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info modern %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning modern %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger modern %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><div class="note info flat"><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note flat %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default flat %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary flat %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success flat %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info flat %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning flat %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger flat %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><div class="note info disabled"><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note disabled %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default disabled %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary disabled %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success disabled %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info disabled %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning disabled %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger disabled %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><div class="note info no-icon flat"><h2 id="no-icon"><a href="#no-icon" class="headerlink" title="no-icon"></a>no-icon</h2></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{% note no-icon %}</span><br><span class="line">默认 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default no-icon %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary no-icon %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success no-icon %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info no-icon %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning no-icon %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger no-icon %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><div class="note info flat"><p>3.2.0 以上版本支持</p></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% note [color] [icon] [style] %}</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>color</td><td>【可选】顔色(default / blue / pink / red / purple / orange / green)</td></tr><tr><td>icon</td><td>【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{% note 'fab fa-cc-visa' flat %}</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note blue 'fas fa-bullhorn' flat %}</span><br><span class="line">加油</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note pink 'fas fa-car-crash' flat %}</span><br><span class="line">小心开车 安全至上</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note red 'fas fa-fan' flat%}</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note orange 'fas fa-battery-half' flat %}</span><br><span class="line">电量不足</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note purple 'far fa-hand-scissors' flat %}</span><br><span class="line">剪刀石头布</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note green 'fab fa-internet-explorer' flat %}</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>加油</p></div><div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>电量不足</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h1><p>写法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup '原神' 'Q版头像' 'gallery/原神q版头像'https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg%}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>Q版头像</p>  <a href="/gallery/%E5%8E%9F%E7%A5%9Eq%E7%89%88%E5%A4%B4%E5%83%8F"></a>  </figcaption>  </figure>  </div><h1 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% gallery %}</span><br><span class="line">markdown 图片格式</span><br><span class="line">{% endgallery %}</span><br></pre></td></tr></tbody></table></figure><p>例如</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageBean的一些用法</title>
      <link href="/pagebean-de-yi-xie-yong-fa/"/>
      <url>/pagebean-de-yi-xie-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h1><p>下面有分页选项的时候 有一个PageBean就可以对该列表进行多种不同分页查询</p><h1 id="PaheBean对象的创建"><a href="#PaheBean对象的创建" class="headerlink" title="PaheBean对象的创建"></a>PaheBean对象的创建</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//分页Bean，它会在各层之间传递！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span>&lt;T&gt; {</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNow;<span class="comment">//当前页码</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> totalRecords;<span class="comment">//总记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageSize;<span class="comment">//每页记录数</span></span><br><span class="line"><span class="keyword">private</span> String url;<span class="comment">//请求路径和参数，例如：/BookServlet?method=findXXX&amp;cid=1&amp;bname=2</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; beanList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算总页数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageCount</span><span class="params">()</span> {</span><br><span class="line"><span class="type">int</span> <span class="variable">pageCount</span> <span class="operator">=</span> totalRecords / pageSize;</span><br><span class="line"><span class="keyword">return</span> totalRecords % pageSize == <span class="number">0</span> ? pageCount : pageCount + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageNow</span><span class="params">()</span> { <span class="keyword">return</span> pageNow; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNow</span><span class="params">(<span class="type">int</span> pageNow)</span> { <span class="built_in">this</span>.pageNow = pageNow; }</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalRecords</span><span class="params">()</span> { <span class="keyword">return</span> totalRecords; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalRecords</span><span class="params">(<span class="type">int</span> totalRecords)</span> { <span class="built_in">this</span>.totalRecords = totalRecords; }</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> { <span class="keyword">return</span> pageSize; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> { <span class="built_in">this</span>.pageSize = pageSize; }</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> { <span class="keyword">return</span> url; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> { <span class="built_in">this</span>.url = url; }</span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getBeanList</span><span class="params">()</span> { <span class="keyword">return</span> beanList; }</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanList</span><span class="params">(List&lt;T&gt; beanList)</span> { <span class="built_in">this</span>.beanList = beanList; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="封装每页记录数的类"><a href="#封装每页记录数的类" class="headerlink" title="封装每页记录数的类"></a>封装每页记录数的类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageConstants</span> {</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOOK_PAGE_SIZE</span> <span class="operator">=</span> <span class="number">12</span>;<span class="comment">//图书每页记录数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ORDER_PAGE_SIZE</span> <span class="operator">=</span> <span class="number">8</span>;<span class="comment">//订单每页记录数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h1><h2 id="通用的查询方法"><a href="#通用的查询方法" class="headerlink" title="通用的查询方法"></a>通用的查询方法</h2><p>通用的查询方法只需要对应查询传过来sql语句与pageNow即可返回封装好的PagebBean对象与查询对象的List集合</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入sql 返回分页查询结果</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCriteria</span><span class="params">(String sql, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> PageConstants.BOOK_PAGE_SIZE;<span class="comment">//每页记录数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">totalRecords</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//查询一共有多少条数据</span></span><br><span class="line">    List&lt;Book&gt; list = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class));</span><br><span class="line">    <span class="comment">//得到了总记录数</span></span><br><span class="line">   <span class="keyword">for</span>(Book book :list){</span><br><span class="line">       totalRecords++;</span><br><span class="line">   }</span><br><span class="line">    <span class="comment">//得到beanList，即当前页记录</span></span><br><span class="line">    sql = sql+<span class="string">" order by orderBy limit ?,?"</span>;</span><br><span class="line">    List&lt;Book&gt; beanList = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class),</span><br><span class="line">    (pageNow-<span class="number">1</span>) * pageSize,pageSize);</span><br><span class="line">    PageBean&lt;Book&gt; pb = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//其中PageBean没有url，这个任务由Servlet完成</span></span><br><span class="line">    pb.setBeanList(beanList);</span><br><span class="line">    pb.setPageNow(pageNow);</span><br><span class="line">    pb.setPageSize(pageSize);</span><br><span class="line">    pb.setTotalRecords(totalRecords);</span><br><span class="line">    <span class="keyword">return</span> pb;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按书名模糊查询</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByBname</span><span class="params">(String bname, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">        String sql=<span class="string">"select * from t_book where bname like '%"</span> + bname + <span class="string">"%'"</span>;</span><br><span class="line">        <span class="keyword">return</span> findByCriteria(sql,pageNow);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件组合查询</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCombination</span><span class="params">(Book criteria, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    String sql=<span class="string">"select * from t_book where 1=1 "</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getBname())){</span><br><span class="line">        sql = sql+ <span class="string">"AND bname like '%"</span> + criteria.getBname() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getAuthor())){</span><br><span class="line">        sql = sql+ <span class="string">"AND author like '%"</span> + criteria.getAuthor() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(criteria.getPress())){</span><br><span class="line">        sql = sql+ <span class="string">"AND press like '%"</span> + criteria.getPress() +<span class="string">"%'"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//将sql传入findByCriteria方法即可</span></span><br><span class="line">    <span class="keyword">return</span> findByCriteria(sql, pageNow);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h1><p>直接调用相应方法即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByBname</span><span class="params">(String bname, <span class="type">int</span> pageNow)</span>  {</span><br><span class="line">    <span class="keyword">return</span> bookDao.findByBname(bname,pageNow);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Book&gt; <span class="title function_">findByCombination</span><span class="params">(Book book, <span class="type">int</span> pageNow)</span> {</span><br><span class="line">    <span class="keyword">return</span> bookDao.findByCombination(book,pageNow);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Servlet层"><a href="#Servlet层" class="headerlink" title="Servlet层"></a>Servlet层</h1><h2 id="获取当前页码"><a href="#获取当前页码" class="headerlink" title="获取当前页码"></a>获取当前页码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前页码</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPageNow</span><span class="params">(HttpServletRequest req)</span> {</span><br><span class="line"><span class="comment">//默认pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> req.getParameter(<span class="string">"pageNow"</span>);</span><br><span class="line">    <span class="comment">//用来确定传过来的pageNow是否为空 如果不为空就转成整形赋给pageNow</span></span><br><span class="line">    <span class="comment">//trim()方法用来返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line">    <span class="keyword">if</span>(param != <span class="literal">null</span> &amp;&amp; !param.trim().isEmpty()) {</span><br><span class="line">            pageNow = Integer.parseInt(param);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pageNow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="获取需要分页的url"><a href="#获取需要分页的url" class="headerlink" title="获取需要分页的url"></a>获取需要分页的url</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 截取url，页面中的分页导航中需要使用它做为超链接的目标！</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/BookeWeb/user/bookServlet?methed=findByBname&amp;bid=xxx&amp;pageNow=3</span></span><br><span class="line"><span class="comment"> * /BookeWeb/user/bookServlet + methed=findByBname&amp;bid=xxx&amp;pageNow=3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getUrl</span><span class="params">(HttpServletRequest req)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURI() + <span class="string">"?"</span> + req.getQueryString();</span><br><span class="line">     <span class="comment">//如果url中存在pageNow参数，截取掉，如果不存在那就不用截取。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> url.lastIndexOf(<span class="string">"&amp;pageNow="</span>);</span><br><span class="line">    <span class="keyword">if</span>(index != -<span class="number">1</span>) {</span><br><span class="line">        url = url.substring(<span class="number">0</span>, index);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按书名查</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findByBname</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span>  {</span><br><span class="line">    <span class="comment">//1. 得到pageNow：如果页面传递，使用页面的，如果没传，pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> getPageNow(req);</span><br><span class="line">    <span class="comment">//2. 得到url:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getUrl(req);</span><br><span class="line">    <span class="type">String</span> <span class="variable">bname</span> <span class="operator">=</span> req.getParameter(<span class="string">"bname"</span>);</span><br><span class="line">    PageBean&lt;Book&gt; pb = bookService.findByBname(bname, pageNow);</span><br><span class="line">    <span class="comment">//3. 给PageBean设置url，保存PageBean，转发到/jsps/book/list.jsp</span></span><br><span class="line">    pb.setUrl(url);</span><br><span class="line">    req.setAttribute(<span class="string">"pb"</span>, pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"f:/jsps/book/list.jsp"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合查询</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findByCombination</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> {</span><br><span class="line">    <span class="comment">//1. 得到pageNow：如果页面传递，使用页面的，如果没传，pageNow=1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNow</span> <span class="operator">=</span> getPageNow(req);</span><br><span class="line">    <span class="comment">//2. 得到url：...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getUrl(req);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setBname(req.getParameter(<span class="string">"bname"</span>));</span><br><span class="line">    book.setAuthor(req.getParameter(<span class="string">"author"</span>));</span><br><span class="line">    book.setPress(req.getParameter(<span class="string">"press"</span>));</span><br><span class="line">    PageBean&lt;Book&gt; pb = bookService.findByCombination(book, pageNow);</span><br><span class="line">    <span class="comment">//3. 给PageBean设置url，保存PageBean，转发到/jsps/book/list.jsp</span></span><br><span class="line">    pb.setUrl(url);</span><br><span class="line">    req.setAttribute(<span class="string">"pb"</span>, pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"f:/jsps/book/list.jsp"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Jsp页面"><a href="#Jsp页面" class="headerlink" title="Jsp页面"></a>Jsp页面</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">_go</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pageNow = $(<span class="string">"#pageCode"</span>).<span class="title function_">val</span>();<span class="comment">//获取文本框中的当前页码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!<span class="regexp">/^[1-9]\d*$/</span>.<span class="title function_">test</span>(pageNow)) {<span class="comment">//对当前页码进行整数校验</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">'请输入正确的页码！'</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(pageNow &gt; ${pb.<span class="property">pageCount</span>}) {<span class="comment">//判断当前页码是否大于最大页</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">'请输入正确的页码！'</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        location = <span class="string">"${pb.url}&amp;pageNow="</span> + pageNow;</span></span><br><span class="line"><span class="language-javascript">   }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divBody"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divContent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;%--上一页 --%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq 1 }"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnDisabled"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${pb.pageNow-1}"</span> <span class="attr">class</span>=<span class="string">"aBtn bold"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">&lt;%--</span><br><span class="line">我们需要计算页码列表的开始和结束位置，即两个变量begin和end</span><br><span class="line">计算它们需要通过当前页码！</span><br><span class="line">1. 总页数不足6页--&gt; begin=1, end=最大页</span><br><span class="line">2. 通过公式设置begin和end，begin=当前页-1，end=当前页+3</span><br><span class="line">3. 如果begin&lt;1，那么让begin=1，end=6</span><br><span class="line">4. 如果end&gt;tp, 让begin=pageCount-5, end=pageCount</span><br><span class="line"> --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            &lt;%--1. 总页数不足6页--&gt; begin=1, end=最大页--%&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageCount &lt;= 6}"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                &lt;%--2. 通过公式设置begin和end，begin=当前页-1，end=当前页+3--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow-2}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow+3}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                &lt;%--3. 如果begin&lt;1，那么让begin=1，end=6--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${begin &lt;= 1}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">                &lt;%--4. 如果end&gt;tp, 让begin=pageCount-5, end=pageCount--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${end &gt;= pb.pageCount}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"begin"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount-5}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"end"</span> <span class="attr">value</span>=<span class="string">"${pb.pageCount}"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">           &lt;%--开始根据获取到的begin和end来遍历生成页码--%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">"${begin}"</span> <span class="attr">end</span>=<span class="string">"${end}"</span> <span class="attr">var</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">                &lt;%--如果是本页面就不生成链接--%&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq i}"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnSelect"</span>&gt;</span>${i}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${i}"</span> <span class="attr">class</span>=<span class="string">"aBtn"</span>&gt;</span>${i}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    &lt;%-- 显示点点点 --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"${end &lt; pb.pageCount}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanApostrophe"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">     &lt;%--下一页 --%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"${pb.pageNow eq pb.pageCount }"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spanBtnDisabled"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${pb.url}&amp;pageNow=${pb.pageNow+1}"</span> <span class="attr">class</span>=<span class="string">"aBtn bold"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    &lt;%-- 共N页 到M页 --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>共${pb.pageCount}页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>到<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"inputPageCode"</span> <span class="attr">id</span>=<span class="string">"pageCode"</span> <span class="attr">value</span>=<span class="string">"${pb.pageNow}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:_go();"</span> <span class="attr">class</span>=<span class="string">"aSubmit"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用时在jsp页面中导如即可</p><p>比如</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"/jsps/pager/pager.jsp"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Utils </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于BaseServlet的使用方法</title>
      <link href="/guan-yu-baseservlet-de-shi-yong-fang-fa/"/>
      <url>/guan-yu-baseservlet-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>在访问服务器的时候在后面带上?methon=方法名 即可调用方法</p><p>比如访问TestServlet?method=regist 就会调用下面的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/TestServlet")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">regist</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            response.sendRedirect(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="BaseServlet-源码"><a href="#BaseServlet-源码" class="headerlink" title="BaseServlet 源码"></a>BaseServlet 源码</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">//获取表单路径后面带的参数method=方法名中的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//获得方法对象</span></span><br><span class="line">            method = <span class="built_in">this</span>.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception var10) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"您要调用的方法："</span> + methodName + <span class="string">"它不存在！"</span>, var10);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获取调用请求后处理的方法返回的字符串,来确定是转发还是重定向</span></span><br><span class="line"><span class="comment">             * "/index.jsp" 表示转发到index.jsp</span></span><br><span class="line"><span class="comment">             * "f:/index.jsp" f前缀表示forward 转发到index.jsp</span></span><br><span class="line"><span class="comment">             * "r:/index.jsp" r前缀表示redirect 重定向到index.jsp</span></span><br><span class="line"><span class="comment">             * null 或者 "" 表示既不转发又不重定向</span></span><br><span class="line"><span class="comment">             *  想重定向到百度,return null 自己去设置重定向</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            result = (String)method.invoke(<span class="built_in">this</span>, request, response);</span><br><span class="line">        } <span class="keyword">catch</span> (IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (InvocationTargetException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; !result.trim().isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> result.indexOf(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) {</span><br><span class="line">                request.getRequestDispatcher(result).forward(request, response);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> result.substring(<span class="number">0</span>, index);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> result.substring(index + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (start.equals(<span class="string">"f"</span>)) {</span><br><span class="line">                        request.getRequestDispatcher(path).forward(request, response);</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (start.equals(<span class="string">"r"</span>)) {</span><br><span class="line">                        response.sendRedirect(request.getContextPath() + path);</span><br><span class="line"></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Servlet </category>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Utils </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客写法</title>
      <link href="/bo-ke-xie-fa/"/>
      <url>/bo-ke-xie-fa/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Front-matter的使用"><a href="#Front-matter的使用" class="headerlink" title="Front-matter的使用"></a>Front-matter的使用</h1><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p><strong>Page Front-matter 用于页面配置</strong><br><strong>Post Front-matter 用于文章页配置</strong></p><h2 id="Page-Front-matter-用于页面配置"><a href="#Page-Front-matter-用于页面配置" class="headerlink" title="Page Front-matter 用于页面配置"></a>Page Front-matter 用于页面配置</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>sticky</td><td>【可选】数字  数值越大，置顶的优先级越大。</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h2 id="Post-Front-matter用于文章页配置"><a href="#Post-Front-matter用于文章页配置" class="headerlink" title="Post Front-matter用于文章页配置"></a>Post Front-matter用于文章页配置</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>标签与分类的写法</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 123</span><br><span class="line">  - 456</span><br><span class="line">tags: [123, 456]</span><br></pre></td></tr></tbody></table></figure><p>多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这是默认的写法，给文章添加一个分类。</span><br><span class="line">categories: 123</span><br><span class="line"># 这会将文章分类123/456子分类目录下。</span><br><span class="line">categories: [123, 456]</span><br><span class="line">这会将文章分类到123/456子分类目录下。</span><br><span class="line">categories:</span><br><span class="line">   - 123</span><br><span class="line">   - 456</span><br><span class="line">多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。</span><br><span class="line">categories:</span><br><span class="line">   - [123]</span><br><span class="line">   - [456]</span><br><span class="line">   - [123, 789]</span><br></pre></td></tr></tbody></table></figure><h1 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h1><p>写法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line">{% galleryGroup name description link img-url %}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span><br><span class="line">{% galleryGroup '原神' 'Q版头像' 'gallery/原神q版头像'https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg%}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://windandstill-1309695473.cos.ap-guangzhou.myqcloud.com/img/01A9ABB42D5C96647074F5FF24D8C29B.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>Q版头像</p>  <a href="/gallery/%E5%8E%9F%E7%A5%9Eq%E7%89%88%E5%A4%B4%E5%83%8F"></a>  </figcaption>  </figure>  </div><h1 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% gallery %}</span><br><span class="line">markdown 图片格式</span><br><span class="line">{% endgallery %}</span><br></pre></td></tr></tbody></table></figure><p>例如</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读hexo的config.yml文件</title>
      <link href="/jie-du-hexo-de-config.yml-wen-jian/"/>
      <url>/jie-du-hexo-de-config.yml-wen-jian/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br></pre></td></tr></tbody></table></figure><p>Hexo <a href="https://so.csdn.net/so/search?q=Configuration&amp;spm=1001.2101.3001.7020">Configuration</a>下的两行表示hexo文档的相关文档，Docs指的是hexo的文档，Source指的是hexo的GitHub源码</p><h1 id="Site-网站"><a href="#Site-网站" class="headerlink" title="# Site 网站"></a># Site 网站</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo  #网站的名字，会写在hexo generator命令生成后的public文件夹下的index.html文件的title标签里</span><br><span class="line"></span><br><span class="line">subtitle: '' #网站的副标题，生成的时候默认为空</span><br><span class="line"></span><br><span class="line">description: '' #主要用于SEO，告诉搜索引擎一个关于站点的简单描述，在官方文档中建议在这段描述中增加自己的一</span><br><span class="line"></span><br><span class="line">keywords: #网站的关键词，使用半角逗号分隔开多个关键词，关键词对SEO的优化有一定的作用</span><br><span class="line"></span><br><span class="line">author: John Doe #顾名思义就是作者，这个也只是署个名而已</span><br><span class="line"></span><br><span class="line">language: zh-CN #这里就写了网站使用的语言</span><br><span class="line"></span><br><span class="line">timezone: 'Asia/Shanghai' #网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure><h1 id="URL-网址"><a href="#URL-网址" class="headerlink" title="# URL 网址"></a># URL 网址</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url: #网站的网址</span><br><span class="line"></span><br><span class="line">permalink: :title/ #文章的永久链接格式，可以在permalink这里配置 也就是文章打开url显示的格式</span><br><span class="line"></span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # 设置为false时会将末尾的index.html去掉</span><br><span class="line">  trailing_html: true # 设置为false时会将末尾的.html去掉，对index.html无效</span><br></pre></td></tr></tbody></table></figure><p>对应上面的年，月，天和标题，我们自己配置时，使用:加上要设置的对应属性，以/分隔，可以配置的有以下内容，</p><table><thead><tr><th>变量</th><th align="left">描述</th></tr></thead><tbody><tr><td>:year</td><td align="left">文章的发表年份(4 位数)</td></tr><tr><td>:motnth</td><td align="left">文章的发表月份(2 位数)</td></tr><tr><td>:i_month</td><td align="left">文章的发表月份(去掉开头的零)</td></tr><tr><td>:i_day</td><td align="left">文章的发表日期(去掉开头的零)</td></tr><tr><td>:hour</td><td align="left">文章发表时的小时(2位数)</td></tr><tr><td>:minute</td><td align="left">文章发表时的分钟(2位数)</td></tr><tr><td>:title</td><td align="left">文件名称</td></tr><tr><td>:post_title</td><td align="left">文章标题</td></tr><tr><td>:id</td><td align="left">文章ID (not persistent across cache reset)</td></tr><tr><td>:category</td><td align="left">分类。如果文章没有分类,则是default_ category 配置信息。</td></tr></tbody></table><p>比如默认生成的hello-world.md中这里要注意的是，如果使用id的话，在使用hexo clean后重新hexo g会使得id发生改变，将permalink改为:year/:month/:day/:title/:id/使用hexo g构造文件，然后使用hexo clean后重新使用hexo g构造，发现前后两次文章的id是不一样的</p><p>除了上面的变量外，也可以使用Font-matter中的值，Font-matter是文章文件最上方以—分隔的区域，用于指定个别文件的变量</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签(不适用于分页)</td><td></td></tr><tr><td>categories</td><td>分类(不适用于分页)</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>keywords</td><td>仅用于meta标签和Open Graph的关键词(不推荐使用)</td><td></td></tr></tbody></table><h1 id="Directory-目录"><a href="#Directory-目录" class="headerlink" title="#Directory 目录"></a>#Directory 目录</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source_dir: source #存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是source</span><br><span class="line"></span><br><span class="line">public_dir: public #存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是public</span><br><span class="line"></span><br><span class="line">tag_dir: tags #按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同）</span><br><span class="line"></span><br><span class="line">archive_dir: archives #归档文件夹，存放归档文件，默认值为archives</span><br><span class="line"></span><br><span class="line">category_dir: categories #分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹</span><br><span class="line"></span><br><span class="line">code_dir: downloads/code #Include code 文件夹，source_dir 下的子目录，默认值为downloads/code</span><br><span class="line"></span><br><span class="line">i18n_dir: :lang #国际化（i18n）文件夹，默认值:lang</span><br><span class="line"></span><br><span class="line">skip_render: #跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章</span><br></pre></td></tr></tbody></table></figure><h1 id="Writing-文章"><a href="#Writing-文章" class="headerlink" title="#Writing 文章"></a>#Writing 文章</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md #新文章的默认名称，我们是使用hexo new来构造文章的，生成的文章名就是通过这里配置的，默认为:title.md，也就是标题.md</span><br><span class="line"></span><br><span class="line">default_layout: post #预设布局，hexo new可以创建三种文件，post/帖子，draft/草稿，page/页面，这里设置默认值在使用hexo new就可以直接创建对应默认类型的文章，设置了post就等同于说在命令行执行hexo new &lt;name&gt;和执行hexo new post &lt;name&gt;是一样的，也可以设置为draft和page</span><br><span class="line"></span><br><span class="line">titlecase: false #把标题转换为 title case</span><br><span class="line"></span><br><span class="line">external_link:</span><br><span class="line">  enable: true #是否在新标签中打开链接</span><br><span class="line">  field: site #external_link.enable的配置对当前网站（site）生效或仅对文章（post）生效，默认为site</span><br><span class="line">  exclude: '' #需要排除的域名</span><br><span class="line">  </span><br><span class="line">filename_case: 0 #把文件名称转换为小写(1)或者大写(2)，默认不转换(0)</span><br><span class="line"></span><br><span class="line">render_drafts: false #否渲染草稿文件，默认为false不渲染</span><br><span class="line"></span><br><span class="line">post_asset_folder: false #是否启动资源文件夹，对于我们的网站，如果我们的文章里面有图片，我们可以在source文件夹下建立一个统一的images文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为true，这样在source文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源，比如我设置为true，然后执行hexo new newPost</span><br><span class="line"></span><br><span class="line">relative_link: false #是否把链接改为与根目录的相对地址，默认为false</span><br><span class="line"></span><br><span class="line">future: true #是否显示当前时间之后的文章，默认为true，如果设置为false的话，我们设置的日期如果是未来的日期的话，就不会显示</span><br><span class="line"></span><br><span class="line">highlight: #代码块的设置</span><br><span class="line">  enable: true #开启代码高亮，默认为true</span><br><span class="line">  line_number: true #显示代码的行数，默认为true</span><br><span class="line">  auto_detect: false #如果未指定语言，就自动检测，默认为false</span><br><span class="line">  tab_replace: '' #用n个空格来代表tab键，如果值为空，则不会代替tab键</span><br><span class="line">  wrap: true #是否将代码放在table标签里，默认为true</span><br><span class="line">  hljs: false #是否对CSS类使用hljs-*前缀，默认为false</span><br><span class="line">  </span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: ''</span><br></pre></td></tr></tbody></table></figure><h1 id="Home-page-setting-主页设置"><a href="#Home-page-setting-主页设置" class="headerlink" title="#Home page setting 主页设置"></a>#Home page setting 主页设置</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator: #index_generator：主页相关的设置</span><br><span class="line">  path: '' #path：主页对应的路径，默认为’’，即域名根目录就是主页的路径</span><br><span class="line">  per_page: 10 #per_page：每页显示的帖子数，默认为10</span><br><span class="line">  order_by: -date #order_by：帖子的排序，默认为-date，即按日期倒序排</span><br></pre></td></tr></tbody></table></figure><h1 id="Category-amp-Tag-分类和标签"><a href="#Category-amp-Tag-分类和标签" class="headerlink" title="#Category &amp; Tag 分类和标签"></a>#Category &amp; Tag 分类和标签</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">default_category: uncategorized #默认分类</span><br><span class="line"></span><br><span class="line">category_map: #分类别名</span><br><span class="line"></span><br><span class="line">tag_map: #标签别名</span><br></pre></td></tr></tbody></table></figure><h1 id="Metadata-elements-元数据元素"><a href="#Metadata-elements-元数据元素" class="headerlink" title="#Metadata elements 元数据元素"></a>#Metadata elements 元数据元素</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta_generator: true #是否在页面开头插入下面的meta标签，默认为true</span><br></pre></td></tr></tbody></table></figure><h1 id="日期-x2F-时间格式"><a href="#日期-x2F-时间格式" class="headerlink" title="#日期/时间格式"></a>#日期/时间格式</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date_format: YYYY-MM-DD #日期格式，默认为YYYY-MM-DD，即年月日</span><br><span class="line"></span><br><span class="line">time_format: HH:mm:ss #时间格式，默认为HH:mm:ss，即时分秒</span><br><span class="line"></span><br><span class="line">## updated_option supports 'mtime', 'date', 'empty'</span><br><span class="line">updated_option: 'mtime' #启用以后，如果 Front Matter 中没有指定 updated（文件更新日期），post.updated 将会使用 date 的值而不是文件的创建时间，默认值为true</span><br></pre></td></tr></tbody></table></figure><h1 id="Pagination-分页"><a href="#Pagination-分页" class="headerlink" title="#Pagination 分页"></a>#Pagination 分页</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">per_page: 10 #分页时每页的文章数，如果为0则不分页，默认为10</span><br><span class="line"></span><br><span class="line">pagination_dir: page #分页的目录，默认为page，对应于public文件夹下的archives文件夹下的page文件夹，如果只有一页是不会生成这个文件夹的</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Include-x2F-Exclude-file-s-包括或不包括目录和文件"><a href="#Include-x2F-Exclude-file-s-包括或不包括目录和文件" class="headerlink" title="#Include / Exclude file(s) 包括或不包括目录和文件"></a>#Include / Exclude file(s) 包括或不包括目录和文件</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include: #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等</span><br><span class="line"></span><br><span class="line">exclude: #Hexo 会忽略这些文件和目录</span><br><span class="line"></span><br><span class="line">ignore: #忽略的文件 要注意的是，这里要写入的是数组，而yaml的数组要用-值表示数组中一个元素或者直接采用js中数组的写法[]</span><br></pre></td></tr></tbody></table></figure><h1 id="Extensions-主题"><a href="#Extensions-主题" class="headerlink" title="#Extensions 主题"></a>#Extensions 主题</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line"></span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line">theme: butterfly # 当前使用的主题名</span><br></pre></td></tr></tbody></table></figure><h1 id="Deployment-部署"><a href="#Deployment-部署" class="headerlink" title="#Deployment 部署"></a>#Deployment 部署</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:  # 库地址</span><br><span class="line">  branch: master # 分支名称</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做这个博客的一些步骤</title>
      <link href="/zuo-zhe-ge-bo-ke-de-yi-xie-bu-zou/"/>
      <url>/zuo-zhe-ge-bo-ke-de-yi-xie-bu-zou/</url>
      
        <content type="html"><![CDATA[<p>本博客基于node.js 完成的hexo博客 </p><p>欢迎大家共同学习</p><h1 id="做这个博客的一些步骤"><a href="#做这个博客的一些步骤" class="headerlink" title="做这个博客的一些步骤"></a>做这个博客的一些步骤</h1><h2 id="1-前置安装"><a href="#1-前置安装" class="headerlink" title="1.前置安装"></a>1.前置安装</h2><ol><li><p>安装Nodejs</p></li><li><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>    #安装淘宝的cnpm 管理器</p></li><li><p>cnpm install -g hexo-cli    #安装hexo框架</p><h6 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h6></li></ol><ul><li>node -v    #查看node版本</li><li>npm -v    #查看npm版本</li><li>cnpm -v    #查看cnpm版本</li><li>hexo -v    #查看hexo版本</li></ul><h2 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="2.创建目录"></a>2.创建目录</h2><ol><li>mkdir blog    #创建blog目录</li><li>cd blog     #进入blog目录</li><li>sudo hexo init     #生成博客 初始化博客</li><li>hexo s    #启动本地博客服务</li><li><a href="http://localhost:4000/">http://localhost:4000/</a>    #本地访问地址</li></ol><h2 id="3-开始写文章"><a href="#3-开始写文章" class="headerlink" title="3.开始写文章"></a>3.开始写文章</h2><ol><li><p>hexo n 我的第一篇文章 #创建新的文章 </p></li><li><p>#返回blog目录</p></li><li><p>hexo clean #清理</p></li><li><p>hexo g #生成</p></li></ol><h2 id="4-推送到GitHub"><a href="#4-推送到GitHub" class="headerlink" title="4.推送到GitHub"></a>4.推送到GitHub</h2><ol><li>Github创建一个的仓库 WindAndStill.github.io</li><li>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</li><li>hexo d    #部署到Github仓库里</li><li><a href="https://windandstill.github.io/">https://WindAndStill.github.io/</a>  #访问这个地址可以查看博客</li></ol><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><ol><li><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  #下载yilia主题到本地</p></li><li><p>配置_config.yml</p></li></ol><p><em>Deployment</em></p><p><em>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></em></p><p>​    <em>deploy:</em><br>          <em>type: git</em><br>         <em>repo: <a href="https://github.com/WindAndStill/WindAndStill.github.io.git">https://github.com/WindAndStill/WindAndStill.github.io.git</a></em><br>          <em>branch: master</em><br><em>-—-</em></p><p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><ol start="3"><li>hexo c    #清理一下</li><li>hexo g    #生成</li><li>hexo d    #部署到远程Github仓库</li></ol><p>如果文字描述不清晰 请到下方链接去学习</p><p>本博客 制作来源于视频<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p><p>本博客主题来源于<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> </p><p>文档教程：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>作者博客：<a href="https://immyw.com/">https://immyw.com/</a></p><h2 id="非常感谢该作者"><a href="#非常感谢该作者" class="headerlink" title="非常感谢该作者"></a>非常感谢该作者</h2>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
